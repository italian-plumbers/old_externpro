diff --git a/build/CMakeLists.txt b/build/CMakeLists.txt
new file mode 100644
index 0000000..e361b61
--- /dev/null
+++ b/build/CMakeLists.txt
@@ -0,0 +1,64 @@
+set(lib_name things)
+#######################################
+set(things_srcs
+  ../src/block.cpp
+  ../src/bmpcombo.cpp
+  ../src/dropdown.cpp
+  ../src/filebrws.cpp
+  ../src/genergdi.cpp
+  ../src/geometry.cpp
+  ../src/menubtn.cpp
+  ../src/optvalue.cpp
+  ../src/range.cpp
+  ../src/spinctld.cpp
+  ../src/toggle.cpp
+  )
+list(APPEND ${lib_name}_libsrcs ${things_srcs})
+########################
+set(things_hdrs
+  ../include/wx/things/block.h
+  ../include/wx/things/bmpcombo.h
+  ../include/wx/things/dropdown.h
+  ../include/wx/things/filebrws.h
+  ../include/wx/things/genergdi.h
+  ../include/wx/things/geometry.h
+  ../include/wx/things/medsort.h
+  ../include/wx/things/menubtn.h
+  ../include/wx/things/optvalue.h
+  ../include/wx/things/range.h
+  ../include/wx/things/spinctld.h
+  ../include/wx/things/thingdef.h
+  ../include/wx/things/toggle.h
+  )
+list(APPEND ${lib_name}_libsrcs ${things_hdrs})
+#######################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
+  )
+target_link_libraries(${lib_name} PUBLIC wx::core)
+list(TRANSFORM WXX_OUTPUT_NAME REPLACE "@TARGET@" "${lib_name}")
+set_target_properties(${lib_name} PROPERTIES OUTPUT_NAME ${WXX_OUTPUT_NAME})
+#######################################
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(FILES ${things_hdrs} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/wx/${lib_name})
+#######################################
+set(samples_filebrws_srcs
+  ../samples/filebrws/wxfilebrowser.cpp
+  ../samples/filebrws/wxfilebrowser.rc
+  )
+set(samples_things_srcs
+  ../samples/things/thingsdemo.cpp
+  ../samples/things/thingsdemo.rc
+  )
+foreach(sample
+  samples_filebrws
+  samples_things
+  )
+  add_executable(${sample} WIN32 ${${sample}_srcs})
+  target_link_libraries(${sample} PRIVATE ${lib_name})
+endforeach()
diff --git a/include/wx/things/bmpcombo.h b/include/wx/things/bmpcombo.h
index 8bcb9f1..55dbc7e 100644
--- a/include/wx/things/bmpcombo.h
+++ b/include/wx/things/bmpcombo.h
@@ -26,6 +26,7 @@ arrows.
 #ifndef _WX_BMPCOMBO_H_
 #define _WX_BMPCOMBO_H_
 
+#ifndef __WXMAC__
 #if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
     #pragma interface "bmpcombo.h"
 #endif
@@ -33,6 +34,8 @@ arrows.
 #include "wx/things/thingdef.h"
 #include "wx/things/dropdown.h"
 
+#include <wx/scrolwin.h>
+
 class WXDLLEXPORT wxMenu;
 class WXDLLEXPORT wxBitmap;
 class WXDLLEXPORT wxKeyEvent;
@@ -220,4 +223,5 @@ private:
     DECLARE_EVENT_TABLE()
 };
 
+#endif // NOT __WXMAC__
 #endif  // _WX_BMPCOMBO_H_
diff --git a/include/wx/things/dropdown.h b/include/wx/things/dropdown.h
index 45fa697..a45a994 100644
--- a/include/wx/things/dropdown.h
+++ b/include/wx/things/dropdown.h
@@ -33,6 +33,7 @@ DoShowPopup() - this is called from ShowPopup after creating the m_popupWin.
 #ifndef _WX_DROPDOWNBASE_H_
 #define _WX_DROPDOWNBASE_H_
 
+#ifndef __WXMAC__
 #if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
     #pragma interface "dropdown.h"
 #endif
@@ -40,6 +41,8 @@ DoShowPopup() - this is called from ShowPopup after creating the m_popupWin.
 #include "wx/popupwin.h"
 #include "wx/things/thingdef.h"
 
+#include <wx/control.h>
+
 class WXDLLEXPORT wxTimer;
 class WXDLLEXPORT wxTimerEvent;
 class WXDLLEXPORT wxCustomButton;
@@ -164,4 +167,5 @@ private:
     DECLARE_EVENT_TABLE()
 };
 
+#endif // NOT __WXMAC__
 #endif  // _WX_DROPDOWNBASE_H_
diff --git a/include/wx/things/filebrws.h b/include/wx/things/filebrws.h
index babc42f..579993b 100644
--- a/include/wx/things/filebrws.h
+++ b/include/wx/things/filebrws.h
@@ -18,7 +18,11 @@
 #include "wx/dirctrl.h"
 #include "wx/filedlg.h"
 #include "wx/textdlg.h"
+#if wxCHECK_VERSION(2,9,0)
+#include "wx/generic/filectrlg.h"
+#else
 #include "wx/generic/filedlgg.h"
+#endif
 #include "wx/things/thingdef.h"
 
 class WXDLLEXPORT wxCheckBox;
@@ -31,7 +35,11 @@ class WXDLLEXPORT wxListEvent;
 class WXDLLEXPORT wxToolBar;
 class WXDLLEXPORT wxBitmapButton;
 class WXDLLEXPORT wxConfigBase;
+#if wxCHECK_VERSION(2,9,0)
+class WXDLLEXPORT wxFileListCtrl;
+#else
 class WXDLLEXPORT wxFileCtrl;
+#endif
 class WXDLLEXPORT wxFileName;
 
 class WXDLLIMPEXP_THINGS wxFileBrowser;
@@ -285,7 +293,11 @@ protected :
     void OnTreeItemActivation(wxTreeEvent &event);
     void OnTreeRightClick(wxTreeEvent& event);
 
+#if wxCHECK_VERSION(2,9,0)
+    // wxFileListCtrl events
+#else
     // wxFileCtrl events - a wxListCtrl
+#endif
     void OnListColClick(wxListEvent &event);
     void OnListItemActivated(wxListEvent &event);
     void OnListItemSelected(wxListEvent &event);
@@ -322,7 +334,11 @@ protected :
 
     wxSplitterWindow *m_splitterWin;
     wxGenericDirCtrl *m_dirCtrl;
+#if wxCHECK_VERSION(2,9,0)
+    wxFileListCtrl   *m_fileCtrl;
+#else
     wxFileCtrl       *m_fileCtrl;
+#endif
 
     wxMenu           *m_listMenu;   // popup menu in listctrl
     wxMenu           *m_treeMenu;   // popup menu in treectrl
diff --git a/include/wx/things/genergdi.h b/include/wx/things/genergdi.h
index 4b9f74b..e97a8ad 100644
--- a/include/wx/things/genergdi.h
+++ b/include/wx/things/genergdi.h
@@ -150,11 +150,11 @@ public:
     wxGenericPen() : wxObject() {}
     wxGenericPen( const wxGenericPen &pen ) : wxObject() { Create(pen); }
     wxGenericPen( const wxPen &pen ) : wxObject() { Create(pen); }
-    wxGenericPen( const wxGenericColour &colour, int width = 1, int style = wxSOLID,
-                  int cap = wxCAP_ROUND, int join = wxJOIN_ROUND ) : wxObject()
+    wxGenericPen( const wxGenericColour &colour, int width = 1, wxPenStyle style = wxPENSTYLE_SOLID,
+                  wxPenCap cap = wxCAP_ROUND, wxPenJoin join = wxJOIN_ROUND ) : wxObject()
         { Create(colour, width, style, cap, join); }
-    wxGenericPen( const wxColour &colour, int width = 1, int style = wxSOLID,
-                  int cap = wxCAP_ROUND, int join = wxJOIN_ROUND ) : wxObject()
+    wxGenericPen( const wxColour &colour, int width = 1, wxPenStyle style = wxPENSTYLE_SOLID,
+                  wxPenCap cap = wxCAP_ROUND, wxPenJoin join = wxJOIN_ROUND ) : wxObject()
         { Create(colour, width, style, cap, join); }
 
     virtual ~wxGenericPen() {}
@@ -168,10 +168,10 @@ public:
     //    Use these to detach this pen from it's refed copies.
     void Create( const wxGenericPen &pen );
     void Create( const wxPen &pen );
-    void Create( const wxGenericColour &colour, int width = 1, int style = wxSOLID,
-                int cap = wxCAP_ROUND, int join = wxJOIN_ROUND );
-    void Create( const wxColour &colour, int width = 1, int style = wxSOLID,
-                int cap = wxCAP_ROUND, int join = wxJOIN_ROUND );
+    void Create( const wxGenericColour &colour, int width = 1, wxPenStyle style = wxPENSTYLE_SOLID,
+                wxPenCap cap = wxCAP_ROUND, wxPenJoin join = wxJOIN_ROUND );
+    void Create( const wxColour &colour, int width = 1, wxPenStyle style = wxPENSTYLE_SOLID,
+                wxPenCap cap = wxCAP_ROUND, wxPenJoin join = wxJOIN_ROUND );
 
     // -----------------------------------------------------------------------
     // Set the values of the refed data.
@@ -181,9 +181,9 @@ public:
     void SetColour( const wxGenericColour &colour );
     void SetColour( const wxColour &colour );
     void SetColour( int red, int green, int blue, int alpha=255 );
-    void SetCap( int capStyle );
-    void SetJoin( int joinStyle );
-    void SetStyle( int style );
+    void SetCap( wxPenCap capStyle );
+    void SetJoin( wxPenJoin joinStyle );
+    void SetStyle( wxPenStyle style );
     void SetWidth( int width );
     void SetDashes( int number_of_dashes, const wxDash *dash );
 
@@ -194,9 +194,9 @@ public:
     wxGenericColour GetGenericColour() const;
     wxColour GetColour() const;
     int GetWidth() const;
-    int GetStyle() const;
-    int GetCap() const;
-    int GetJoin() const;
+    wxPenStyle GetStyle() const;
+    wxPenCap GetCap() const;
+    wxPenJoin GetJoin() const;
     int GetDashes(wxDash **ptr) const;
     int GetDashCount() const;
     wxDash* GetDash() const;
@@ -243,9 +243,9 @@ public:
     wxGenericBrush() : wxObject() {}
     wxGenericBrush( const wxGenericBrush &brush ) : wxObject() { Create(brush); }
     wxGenericBrush( const wxBrush &brush ) : wxObject() { Create(brush); }
-    wxGenericBrush( const wxGenericColour &colour, int style = wxSOLID)
+    wxGenericBrush( const wxGenericColour &colour, wxBrushStyle style = wxBRUSHSTYLE_SOLID)
         : wxObject() { Create(colour, style); }
-    wxGenericBrush( const wxColour &colour, int style = wxSOLID)
+    wxGenericBrush( const wxColour &colour, wxBrushStyle style = wxBRUSHSTYLE_SOLID)
         : wxObject() { Create(colour, style); }
     wxGenericBrush( const wxBitmap& stipple ) : wxObject() { Create(stipple); }
 
@@ -260,8 +260,8 @@ public:
     //    Use these to detach this pen from it's refed copies.
     void Create( const wxGenericBrush &brush );
     void Create( const wxBrush &brush );
-    void Create( const wxGenericColour &colour, int style = wxSOLID );
-    void Create( const wxColour &colour, int style = wxSOLID );
+    void Create( const wxGenericColour &colour, wxBrushStyle style = wxBRUSHSTYLE_SOLID );
+    void Create( const wxColour &colour, wxBrushStyle style = wxBRUSHSTYLE_SOLID );
     void Create( const wxBitmap &stipple );
 
     // -----------------------------------------------------------------------
@@ -272,7 +272,7 @@ public:
     void SetColour( const wxGenericColour &colour );
     void SetColour( const wxColour &colour );
     void SetColour( int red, int green, int blue, int alpha=255 );
-    void SetStyle( int style );
+    void SetStyle( wxBrushStyle style );
     void SetStipple( const wxBitmap& stipple );
 
     // -----------------------------------------------------------------------
@@ -281,11 +281,11 @@ public:
 
     wxGenericColour GetGenericColour() const;
     wxColour GetColour() const;
-    int GetStyle() const;
+    wxBrushStyle GetStyle() const;
     wxBitmap* GetStipple() const;
 
     bool IsHatch() const
-        { return (GetStyle()>=wxFIRST_HATCH) && (GetStyle()<=wxLAST_HATCH); }
+        { return (GetStyle()>=wxBRUSHSTYLE_FIRST_HATCH) && (GetStyle()<=wxBRUSHSTYLE_LAST_HATCH); }
 
     // -----------------------------------------------------------------------
     // Equivalency tests
diff --git a/include/wx/things/optvalue.h b/include/wx/things/optvalue.h
index b8c6a4d..df8b14b 100644
--- a/include/wx/things/optvalue.h
+++ b/include/wx/things/optvalue.h
@@ -20,6 +20,10 @@ class WXDLLIMPEXP_THINGS wxOptionValue;
 #include "wx/dynarray.h"
 WX_DECLARE_OBJARRAY_WITH_DECL(wxOptionValue, wxArrayOptionValue, class WXDLLIMPEXP_THINGS);
 
+#include <wx/arrstr.h>
+#include <wx/gdicmn.h>
+#include <wx/object.h>
+
 //----------------------------------------------------------------------------
 // Global wxString utilities
 //----------------------------------------------------------------------------
diff --git a/include/wx/things/range.h b/include/wx/things/range.h
index a4dffce..cb84ee4 100644
--- a/include/wx/things/range.h
+++ b/include/wx/things/range.h
@@ -16,6 +16,8 @@
 
 #include "wx/things/thingdef.h"
 
+#include <wx/utils.h>
+
 class WXDLLIMPEXP_THINGS wxRangeInt;
 class WXDLLIMPEXP_THINGS wxRangeDouble;
 class WXDLLIMPEXP_THINGS wxRangeIntSelection;
diff --git a/include/wx/things/toggle.h b/include/wx/things/toggle.h
index 3dcfc1e..454ddd2 100644
--- a/include/wx/things/toggle.h
+++ b/include/wx/things/toggle.h
@@ -74,6 +74,9 @@ You have to #include "wx/tglbtn.h" for EVT_TOGGLEBUTTON
 
 #include "wx/things/thingdef.h"
 
+#include <wx/bitmap.h>
+#include <wx/control.h>
+
 class WXDLLEXPORT wxTimer;
 class WXDLLEXPORT wxTimerEvent;
 
@@ -227,6 +230,7 @@ protected:
     int m_down;         // toggle state if m_down%2 then depressed
     bool m_focused;     // mouse in window
     long m_button_style;
+    bool m_fit;         // resize the button to fit
 
     // the bitmaps for various states
     wxBitmap m_bmpLabel,
diff --git a/samples/filebrws/wxfilebrowser.cpp b/samples/filebrws/wxfilebrowser.cpp
index 4f48fa9..028abc2 100644
--- a/samples/filebrws/wxfilebrowser.cpp
+++ b/samples/filebrws/wxfilebrowser.cpp
@@ -29,7 +29,7 @@
 #include "wx/things/filebrws.h"
 
 /* XPM */
-static char *mondrian_xpm[] = {
+static const char *mondrian_xpm[] = {
 /* columns rows colors chars-per-pixel */
 "32 32 6 1",
 "  c Black",
@@ -229,7 +229,9 @@ void MyFrame::OnGenericFileDlg( wxCommandEvent &WXUNUSED(event) )
     //wxLog *oldLog;
     //oldLog = wxLog::SetActiveTarget(&log);
 
-    wxGenericFileDialog fileDialog(this, wxT("Select a file"));
+    // wxGenericFileDialog isn't part of any standard wx library
+    //wxGenericFileDialog fileDialog(this, wxT("Select a file"));
+    wxFileDialog fileDialog(this, wxT("Select a file"));
 
     //log.Flush();
     //wxLog::SetActiveTarget(oldLog);
diff --git a/samples/things/thingsdemo.cpp b/samples/things/thingsdemo.cpp
index 08eb021..fac8ea8 100644
--- a/samples/things/thingsdemo.cpp
+++ b/samples/things/thingsdemo.cpp
@@ -33,7 +33,7 @@
 #include "wx/things/bmpcombo.h"
 
 /* XPM */
-static char *mondrian_xpm[] = {
+static const char *mondrian_xpm[] = {
 /* columns rows colors chars-per-pixel */
 "32 32 6 1",
 "  c Black",
diff --git a/samples/things/thingsdemo.rc b/samples/things/thingsdemo.rc
index b86c4e2..dd66039 100644
--- a/samples/things/thingsdemo.rc
+++ b/samples/things/thingsdemo.rc
@@ -1 +1 @@
-#include "wx/msw/wx.rc"
+//#include "wx/msw/wx.rc"
diff --git a/src/block.cpp b/src/block.cpp
index 19f1638..e7ce995 100644
--- a/src/block.cpp
+++ b/src/block.cpp
@@ -23,6 +23,7 @@
 #endif // WX_PRECOMP
 
 #include "wx/things/block.h"
+#include "wx/wxcrtvararg.h"
 
 // use this to check to see if there is any overlap after minimizing
 //#define CHECK_BLOCK_OVERLAP 1
diff --git a/src/bmpcombo.cpp b/src/bmpcombo.cpp
index 5b3f031..635aa49 100644
--- a/src/bmpcombo.cpp
+++ b/src/bmpcombo.cpp
@@ -9,6 +9,7 @@
 // Licence:     wxWidgets licence
 /////////////////////////////////////////////////////////////////////////////
 
+#ifndef __WXMAC__
 #if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
     #pragma implementation "bmpcombo.h"
 #endif
@@ -202,7 +203,7 @@ void wxBitmapComboLabel::OnPaint( wxPaintEvent &WXUNUSED(event) )
     dc.SetFont(m_bmpCombo->GetFont());
     //dc.SetBackground(*wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxSOLID));
     //dc.Clear();
-    dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxSOLID));
+    dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxBRUSHSTYLE_SOLID));
     dc.SetPen(*wxTRANSPARENT_PEN);
     dc.DrawRectangle(wxRect(wxPoint(0,0), GetClientSize()));
 
@@ -577,3 +578,5 @@ bool wxBitmapComboBox::SetBackgroundColour(const wxColour &colour)
     }
     return DropDownBase::SetBackgroundColour(colour);
 }
+
+#endif // NOT __WXMAC__
diff --git a/src/dropdown.cpp b/src/dropdown.cpp
index 6450cb8..d4743af 100644
--- a/src/dropdown.cpp
+++ b/src/dropdown.cpp
@@ -9,6 +9,7 @@
 // Licence:     wxWidgets licence
 /////////////////////////////////////////////////////////////////////////////
 
+#ifndef __WXMAC__
 #if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
     #pragma implementation "dropdown.h"
 #endif
@@ -29,6 +30,7 @@
 #include "wx/things/dropdown.h"
 #include "wx/things/toggle.h"
 #include "wx/renderer.h"
+#include "wx/wxcrtvararg.h"
 
 /* XPM */
 static const char *down_arrow_xpm_data[] = {
@@ -147,7 +149,7 @@ void DropDownPopup::OnTimer( wxTimerEvent &WXUNUSED(event) )
     //wxPrintf(wxT("**DropDownPopup::OnTimer mouse %d %d -- %d %d %d\n"), m_mouse.x, m_mouse.y, m_popped_handler, m_child, m_handlerPopup); fflush(stdout);
     // pop the event handler if inside the child window or
     // restore the event handler if not in the child window
-    if (clientRect.Inside(m_mouse))
+    if (clientRect.Contains(m_mouse))
         PopPopupHandler(child);
     else
         PushPopupHandler(child);
@@ -167,7 +169,7 @@ void DropDownPopup::OnIdle( wxIdleEvent& event )
         //wxPrintf(wxT("**DropDownPopup::OnIdle mouse %d %d -- %d %d %d\n"), m_mouse.x, m_mouse.y, m_popped_handler, m_child, m_handlerPopup); fflush(stdout);
         // pop the event handler if inside the child window or
         // restore the event handler if not in the child window
-        if (clientRect.Inside(m_mouse))
+        if (clientRect.Contains(m_mouse))
             PopPopupHandler(child);
         else
             PushPopupHandler(child);
@@ -183,7 +185,11 @@ void DropDownPopup::OnMouse( wxMouseEvent& event )
 
 void DropDownPopup::OnKeyDown( wxKeyEvent &event )
 {
+#if wxCHECK_VERSION(2,9,0)
+    if (GetChild() && GetChild()->ProcessWindowEvent(event))
+#else
     if (GetChild() && GetChild()->ProcessEvent(event))
+#endif
         event.Skip(false);
     else
         event.Skip(true);
@@ -253,7 +259,7 @@ bool DropDownPopup::ProcessLeftDown( wxMouseEvent &event )
         }
     }
 
-    if (GetClientRect().Inside(m_mouse))
+    if (GetClientRect().Contains(m_mouse))
         return false;
 
     Dismiss();
@@ -403,3 +409,4 @@ void DropDownBase::OnDropButton( wxCommandEvent &WXUNUSED(event))
     else
         ShowPopup();
 }
+#endif // NOT __WXMAC__
diff --git a/src/filebrws.cpp b/src/filebrws.cpp
index f984875..d37000d 100644
--- a/src/filebrws.cpp
+++ b/src/filebrws.cpp
@@ -353,7 +353,12 @@ int CopyDir(const wxString& fromDir, const wxString& toDir)
     // first make sure that the source dir exists
     if(!wxDir::Exists(from))
     {
+#if wxCHECK_VERSION(2,9,0)
         wxLogError(from + wxT(" does not exist. Can not copy directory."));
+#else
+        // https://groups.google.com/forum/?fromgroups=#!topic/wx-users/sV-_jhhQ3jE
+        wxLogError(from + wxT(" does not exist. Can not copy directory."), NULL);
+#endif
         return 0;
     }
 
@@ -545,7 +550,7 @@ void OpenWithDialog::OnButton(wxCommandEvent& event)
                                                 wxFileNameFromPath(startPath),
                                                 wxEmptyString,
                                                 filters,
-                                                wxOPEN|wxFILE_MUST_EXIST );
+                                                wxFD_OPEN|wxFD_FILE_MUST_EXIST );
             if (!fileName.IsEmpty())
             {
                 fileName += wxT(" \"") + m_fileData.GetFilePath() + wxT("\"");
@@ -990,9 +995,15 @@ bool wxFileBrowser::Create( wxWindow *parent, const wxWindowID id,
 
     m_dirCtrl->Show(true);
 
+#if wxCHECK_VERSION(2,9,0)
+    m_fileCtrl = new wxFileListCtrl(m_splitterWin, wxID_ANY, GetWild(), false,
+                                    wxDefaultPosition, wxSize(50,50),
+                                    wxNO_BORDER|wxLC_SINGLE_SEL|FBStyleToLCStyle(style));
+#else
     m_fileCtrl = new wxFileCtrl(m_splitterWin, wxID_ANY, GetWild(), false,
                                 wxDefaultPosition, wxSize(50,50),
                                 wxNO_BORDER|wxLC_SINGLE_SEL|FBStyleToLCStyle(style));
+#endif
     m_fileCtrl->Show(true);
     m_fileCtrl->GoToDir(m_path);
 
@@ -1040,7 +1051,11 @@ void wxFileBrowser::OnSize( wxSizeEvent &event )
         GtkWidget  *widget = GTK_WIDGET(win->m_widget);
         //gtk_widget_set_usize(widget, size.x, size.y); this is deprecated use below
         gtk_widget_set_size_request(widget, size.x, size.y);
+#ifdef __WXGTK3__
+        if (gtk_widget_get_visible(widget))
+#else
         if (GTK_WIDGET_VISIBLE(widget))
+#endif
             gtk_widget_queue_resize(widget);
     }
 #endif //__WXGTK__
@@ -2165,7 +2180,7 @@ void wxFileBrowser::OnListMenu(wxCommandEvent &event)
                                 wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER );
 
                 wxScrolledWindow *scrWin = new wxScrolledWindow(&dialog, -1);
-                wxStaticBitmap *statBitmap = new wxStaticBitmap(scrWin, -1, wxBitmap(image));
+                //wxStaticBitmap *statBitmap = new wxStaticBitmap(scrWin, -1, wxBitmap(image));
 
                 // not necessary in MSW
                 int ext = 0; //dialog.GetSize().GetWidth() - dialog.GetClientSize().GetWidth();
diff --git a/src/genergdi.cpp b/src/genergdi.cpp
index 3f74e05..f72ceaf 100644
--- a/src/genergdi.cpp
+++ b/src/genergdi.cpp
@@ -22,6 +22,9 @@
 #include "wx/things/genergdi.h"
 #include "wx/tokenzr.h"
 
+//This next line added by SC@SDL on 10/5/07 for Solaris compile:
+#include <wx/bitmap.h>
+
 const wxGenericColour wxNullGenericColour;
 const wxGenericPen    wxNullGenericPen;
 const wxGenericBrush  wxNullGenericBrush;
@@ -261,8 +264,8 @@ IMPLEMENT_DYNAMIC_CLASS(wxGenericPen, wxObject)
 class wxGenericPenRefData : public wxObjectRefData
 {
 public:
-    wxGenericPenRefData(int width = 1, int style = wxSOLID,
-                        int cap = wxCAP_ROUND, int join = wxJOIN_ROUND)
+    wxGenericPenRefData(int width = 1, wxPenStyle style = wxPENSTYLE_SOLID,
+                        wxPenCap cap = wxCAP_ROUND, wxPenJoin join = wxJOIN_ROUND)
           : wxObjectRefData(), m_width(width), m_style(style),
                                m_cap(cap), m_join(join),
                                m_dash_count(0), m_dash(NULL) {}
@@ -283,9 +286,9 @@ public:
 
     wxGenericColour m_colour;
     int m_width;
-    int m_style;
-    int m_cap;
-    int m_join;
+    wxPenStyle m_style;
+    wxPenCap m_cap;
+    wxPenJoin m_join;
 
     int m_dash_count; // don't arbitrarily adjust these!
     wxDash *m_dash;
@@ -313,15 +316,15 @@ void wxGenericPen::Create( const wxPen &pen )
     m_refData = new wxGenericPenRefData;
     Set(pen);
 }
-void wxGenericPen::Create(const wxGenericColour &colour, int width, int style,
-                          int cap, int join )
+void wxGenericPen::Create(const wxGenericColour &colour, int width, wxPenStyle style,
+                          wxPenCap cap, wxPenJoin join )
 {
     UnRef();
     m_refData = new wxGenericPenRefData(width, style, cap, join);
     M_GPENDATA->m_colour = colour;
 }
-void wxGenericPen::Create(const wxColour &colour, int width, int style,
-                          int cap, int join )
+void wxGenericPen::Create(const wxColour &colour, int width, wxPenStyle style,
+                          wxPenCap cap, wxPenJoin join)
 {
     Create(wxGenericColour(colour), width, style, cap, join);
 }
@@ -367,17 +370,17 @@ void wxGenericPen::SetColour( int red, int green, int blue, int alpha )
 {
     SetColour(wxGenericColour(red, green, blue, alpha));
 }
-void wxGenericPen::SetCap( int capStyle )
+void wxGenericPen::SetCap( wxPenCap capStyle )
 {
     wxCHECK_RET(Ok(), wxT("Invalid generic pen"));
     M_GPENDATA->m_cap = capStyle;
 }
-void wxGenericPen::SetJoin( int joinStyle )
+void wxGenericPen::SetJoin( wxPenJoin joinStyle )
 {
     wxCHECK_RET(Ok(), wxT("Invalid generic pen"));
     M_GPENDATA->m_join = joinStyle;
 }
-void wxGenericPen::SetStyle( int style )
+void wxGenericPen::SetStyle( wxPenStyle style )
 {
     wxCHECK_RET(Ok(), wxT("Invalid generic pen"));
     M_GPENDATA->m_style = style;
@@ -439,17 +442,17 @@ int wxGenericPen::GetWidth() const
     wxCHECK_MSG(Ok(), 1, wxT("Invalid generic pen"));
     return M_GPENDATA->m_width;
 }
-int wxGenericPen::GetStyle() const
+wxPenStyle wxGenericPen::GetStyle() const
 {
-    wxCHECK_MSG(Ok(), wxSOLID, wxT("Invalid generic pen"));
+    wxCHECK_MSG(Ok(), wxPENSTYLE_SOLID, wxT("Invalid generic pen"));
     return M_GPENDATA->m_style;
 }
-int wxGenericPen::GetCap() const
+wxPenCap wxGenericPen::GetCap() const
 {
     wxCHECK_MSG(Ok(), wxCAP_ROUND, wxT("Invalid generic pen"));
     return M_GPENDATA->m_cap;
 }
-int wxGenericPen::GetJoin() const
+wxPenJoin wxGenericPen::GetJoin() const
 {
     wxCHECK_MSG(Ok(), wxJOIN_ROUND, wxT("Invalid generic pen"));
     return M_GPENDATA->m_join;
@@ -567,7 +570,7 @@ class wxGenericBrushRefData : public wxObjectRefData
 {
 public:
     wxGenericBrushRefData(const wxGenericColour& c = wxNullGenericColour,
-                          int style = wxSOLID) : wxObjectRefData(),
+                          wxBrushStyle style = wxBRUSHSTYLE_SOLID) : wxObjectRefData(),
                           m_colour(c), m_style(style) {}
 
     wxGenericBrushRefData(const wxGenericBrushRefData& data) : wxObjectRefData(),
@@ -576,7 +579,7 @@ public:
     ~wxGenericBrushRefData() { }
 
     wxGenericColour m_colour;
-    int             m_style;
+    wxBrushStyle    m_style;
     wxBitmap        m_stipple;
 };
 
@@ -602,12 +605,12 @@ void wxGenericBrush::Create( const wxBrush &brush )
     m_refData = new wxGenericBrushRefData;
     Set(brush);
 }
-void wxGenericBrush::Create(const wxGenericColour &colour, int style)
+void wxGenericBrush::Create(const wxGenericColour &colour, wxBrushStyle style)
 {
     UnRef();
     m_refData = new wxGenericBrushRefData(colour, style);
 }
-void wxGenericBrush::Create(const wxColour &colour, int style)
+void wxGenericBrush::Create(const wxColour &colour, wxBrushStyle style)
 {
     Create(wxGenericColour(colour), style);
 }
@@ -616,7 +619,7 @@ void wxGenericBrush::Create( const wxBitmap &stipple )
     UnRef();
     wxCHECK_RET(stipple.Ok(), wxT("Invalid bitmap in wxGenericBrush::Create"));
 
-    int style = stipple.GetMask() ? wxSTIPPLE_MASK_OPAQUE : wxSTIPPLE;
+    wxBrushStyle style = stipple.GetMask() ? wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE : wxBRUSHSTYLE_STIPPLE;
     m_refData = new wxGenericBrushRefData(wxNullGenericColour, style);
     M_GBRUSHDATA->m_stipple = stipple;
 }
@@ -652,7 +655,7 @@ void wxGenericBrush::SetColour( int red, int green, int blue, int alpha )
 {
     SetColour(wxGenericColour(red, green, blue, alpha));
 }
-void wxGenericBrush::SetStyle( int style )
+void wxGenericBrush::SetStyle( wxBrushStyle style )
 {
     wxCHECK_RET(Ok(), wxT("Invalid generic brush"));
     M_GBRUSHDATA->m_style = style;
@@ -661,7 +664,7 @@ void wxGenericBrush::SetStipple(const wxBitmap& stipple)
 {
     wxCHECK_RET(Ok(), wxT("Invalid generic brush"));
     M_GBRUSHDATA->m_stipple = stipple;
-    M_GBRUSHDATA->m_style = stipple.GetMask() ? wxSTIPPLE_MASK_OPAQUE : wxSTIPPLE;
+    M_GBRUSHDATA->m_style = stipple.GetMask() ? wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE : wxBRUSHSTYLE_STIPPLE;
 
 }
 
@@ -684,9 +687,9 @@ wxColour wxGenericBrush::GetColour() const
     wxCHECK_MSG(Ok(), wxNullColour, wxT("Invalid generic brush"));
     return M_GBRUSHDATA->m_colour.GetColour();
 }
-int wxGenericBrush::GetStyle() const
+wxBrushStyle wxGenericBrush::GetStyle() const
 {
-    wxCHECK_MSG(Ok(), wxSOLID, wxT("Invalid generic brush"));
+    wxCHECK_MSG(Ok(), wxBRUSHSTYLE_SOLID, wxT("Invalid generic brush"));
     return M_GBRUSHDATA->m_style;
 }
 wxBitmap* wxGenericBrush::GetStipple() const
@@ -701,7 +704,7 @@ bool wxGenericBrush::IsSameAs(const wxGenericBrush& brush) const
     wxGenericBrushRefData *bData = (wxGenericBrushRefData*)brush.GetRefData();
     return (M_GBRUSHDATA->m_colour  == bData->m_colour) &&
            (M_GBRUSHDATA->m_style   == bData->m_style) &&
-           (M_GBRUSHDATA->m_stipple == bData->m_stipple);
+           (M_GBRUSHDATA->m_stipple.IsSameAs(bData->m_stipple));
 }
 bool wxGenericBrush::IsSameAs(const wxBrush& brush) const
 {
diff --git a/src/menubtn.cpp b/src/menubtn.cpp
index b83b5cb..589780b 100644
--- a/src/menubtn.cpp
+++ b/src/menubtn.cpp
@@ -81,7 +81,7 @@ public:
         {
             wxPoint p = GetParent()->ScreenToClient(wxGetMousePosition());
 
-            if (GetRect().Inside(p) || labelBut->GetRect().Inside(p))
+            if (GetRect().Contains(p) || labelBut->GetRect().Contains(p))
             {
                 m_focused = true;
 
@@ -125,7 +125,7 @@ public:
         {
             wxPoint p = GetParent()->ScreenToClient(wxGetMousePosition());
 
-            if (GetRect().Inside(p) || dropBut->GetRect().Inside(p))
+            if (GetRect().Contains(p) || dropBut->GetRect().Contains(p))
             {
                 m_focused = true;
 
@@ -247,7 +247,15 @@ void wxMenuButton::OnButton( wxCommandEvent &event)
         bool check_next = false;
 
         // find the next available radio item to check
+#if wxUSE_STD_CONTAINERS
+        // as described in wxWidgets "Container Classes" documentation
+        // http://docs.wxwidgets.org/3.0/overview_container.html#overview_container_std
+        // wxList::compatibility_iterator must be used instead of wxList::Node* when
+        // iterating over the list contents
+        for (wxMenuItemList::compatibility_iterator node = items.GetFirst(); node; node = node->GetNext())
+#else
         for (wxMenuItemList::Node *node = items.GetFirst(); node; node = node->GetNext())
+#endif
         {
             wxMenuItem *mi = (wxMenuItem*)node->GetData();
             if (mi && (mi->GetKind() == wxITEM_RADIO))
@@ -287,7 +295,15 @@ int wxMenuButton::GetSelection() const
 
     const wxMenuItemList &items = m_menu->GetMenuItems();
 
+#if wxUSE_STD_CONTAINERS
+    // as described in wxWidgets "Container Classes" documentation
+    // http://docs.wxwidgets.org/3.0/overview_container.html#overview_container_std
+    // wxList::compatibility_iterator must be used instead of wxList::Node* when
+    // iterating over the list contents
+    for (wxMenuItemList::compatibility_iterator node = items.GetFirst(); node; node = node->GetNext())
+#else
     for (wxMenuItemList::Node *node = items.GetFirst(); node; node = node->GetNext())
+#endif
     {
         wxMenuItem *mi = (wxMenuItem*)node->GetData();
         if (mi && (mi->GetKind() == wxITEM_RADIO))
diff --git a/src/optvalue.cpp b/src/optvalue.cpp
index 02ea640..0f1fdb4 100644
--- a/src/optvalue.cpp
+++ b/src/optvalue.cpp
@@ -25,6 +25,7 @@
 
 #include "wx/tokenzr.h"
 #include "wx/things/optvalue.h"
+#include "wx/wxcrtvararg.h"
 
 #include "wx/arrimpl.cpp"
 WX_DEFINE_OBJARRAY(wxArrayOptionValue);
diff --git a/src/spinctld.cpp b/src/spinctld.cpp
index 214d80c..e23999e 100644
--- a/src/spinctld.cpp
+++ b/src/spinctld.cpp
@@ -25,6 +25,11 @@
 #include "wx/things/spinctld.h"
 #include <math.h>
 
+//These 3 lines added by SC@SDL on 10/5/07 for Solaris compile:
+#if defined(__sun__)
+#include <ieeefp.h>
+#endif
+
 #if wxCHECK_VERSION(2,5,0)
     #include "wx/math.h"
 #else
@@ -188,7 +193,7 @@ bool wxSpinCtrlDbl::Create( wxWindow *parent, wxWindowID id,
                       wxTE_NOHIDESEL|wxTE_PROCESS_ENTER, validator);
 
     DoSetSize( pos.x, pos.y, width, height );
-    SetBestSize(wxSize(width, height));
+    SetInitialSize(wxSize(width, height));
 
     m_min = min;
     m_max = max;
@@ -339,14 +344,14 @@ void wxSpinCtrlDbl::OnChar( wxKeyEvent &event )
             DoSendEvent();
             break;
         }
-        case WXK_PRIOR :  // pg-up
+        case WXK_PAGEUP :
         {
             if (m_textCtrl && m_textCtrl->IsModified()) SyncSpinToText(false);
             SetValue( m_value + m_increment * 10.0 * modifier );
             DoSendEvent();
             break;
         }
-        case WXK_NEXT :  // pg-down
+        case WXK_PAGEDOWN :
         {
             if (m_textCtrl && m_textCtrl->IsModified()) SyncSpinToText(false);
             SetValue( m_value - m_increment * 10.0 * modifier );
diff --git a/src/toggle.cpp b/src/toggle.cpp
index 9765308..41dd56b 100644
--- a/src/toggle.cpp
+++ b/src/toggle.cpp
@@ -60,6 +60,7 @@ void wxCustomButton::Init()
     m_timer = NULL;
     m_eventType = 0;
     m_button_style = wxCUSTBUT_TOGGLE|wxCUSTBUT_BOTTOM;
+    m_fit = false;
 }
 
 bool wxCustomButton::Create(wxWindow* parent, wxWindowID id,
@@ -82,7 +83,7 @@ bool wxCustomButton::Create(wxWindow* parent, wxWindowID id,
 
     wxSize bestSize = DoGetBestSize();
     SetSize(wxSize(size.x<0 ? bestSize.x:size.x, size.y<0 ? bestSize.y:size.y));
-    SetBestSize(GetSize());
+    SetInitialSize(GetSize());
 
     CalcLayout(true);
     return true;
@@ -124,6 +125,7 @@ bool wxCustomButton::SetButtonStyle(long style)
 void wxCustomButton::SetLabel( const wxString &label )
 {
     wxControl::SetLabel(label);
+    if (m_fit) SetMinSize(DoGetBestSize());
     CalcLayout(true);
 }
 
@@ -153,7 +155,7 @@ void wxCustomButton::OnMouseEvents(wxMouseEvent& event)
 
         m_eventType = wxEVT_LEFT_UP;
 
-        if (wxRect(wxPoint(0,0), GetSize()).Inside(event.GetPosition()))
+        if (wxRect(wxPoint(0,0), GetSize()).Contains(event.GetPosition()))
         {
             if ((m_button_style & wxCUSTBUT_BUTTON) && (m_down > 0))
             {
@@ -188,7 +190,7 @@ void wxCustomButton::OnMouseEvents(wxMouseEvent& event)
 
         m_eventType = wxEVT_RIGHT_UP;
 
-        if (wxRect(wxPoint(0,0), GetSize()).Inside(event.GetPosition()))
+        if (wxRect(wxPoint(0,0), GetSize()).Contains(event.GetPosition()))
         {
             if ((m_button_style & wxCUSTBUT_BUTTON) && (m_down > 0))
             {
@@ -283,6 +285,15 @@ void wxCustomButton::SendEvent()
         eventOut.SetEventObject(this);
         GetEventHandler()->ProcessEvent(eventOut);
     }
+    else if (((m_button_style & wxCUSTBUT_BUTTON) && (m_eventType == wxEVT_RIGHT_UP)) ||
+             ((m_button_style & wxCUSTBUT_TOGGLE) && (m_eventType == wxEVT_RIGHT_UP)))
+    {
+        wxContextMenuEvent eventOut(wxEVT_CONTEXT_MENU, GetId());
+        eventOut.SetInt(0);
+        eventOut.SetExtraLong(m_eventType);
+        eventOut.SetEventObject(this);
+        GetEventHandler()->ProcessEvent(eventOut);
+    }
     else
     {
         wxCommandEvent eventOut(wxEVT_COMMAND_BUTTON_CLICKED, GetId());
@@ -372,8 +383,6 @@ void wxCustomButton::Redraw()
 
 void wxCustomButton::Paint( wxDC &dc )
 {
-    dc.BeginDrawing();
-
     int w, h;
     GetSize(&w,&h);
 
@@ -412,7 +421,7 @@ void wxCustomButton::Paint( wxDC &dc )
         foreColour = wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT);
     }
 
-    wxBrush brush(backColour, wxSOLID);
+    wxBrush brush(backColour, wxBRUSHSTYLE_SOLID);
     dc.SetBackground(brush);
     dc.SetBrush(brush);
     dc.SetPen(*wxTRANSPARENT_PEN);
@@ -452,7 +461,6 @@ void wxCustomButton::Paint( wxDC &dc )
     dc.SetBackground(wxNullBrush);
     dc.SetBrush(wxNullBrush);
     dc.SetPen(wxNullPen);
-    dc.EndDrawing();
 }
 
 void wxCustomButton::OnSize( wxSizeEvent &event )
@@ -465,18 +473,21 @@ void wxCustomButton::SetMargins(const wxSize &margin, bool fit)
 {
     m_labelMargin = margin;
     m_bitmapMargin = margin;
+    m_fit = fit;
     CalcLayout(true);
     if (fit) SetSize(DoGetBestSize());
 }
 void wxCustomButton::SetLabelMargin(const wxSize &margin, bool fit)
 {
     m_labelMargin = margin;
+    m_fit = fit;
     CalcLayout(true);
     if (fit) SetSize(DoGetBestSize());
 }
 void wxCustomButton::SetBitmapMargin(const wxSize &margin, bool fit)
 {
     m_bitmapMargin = margin;
+    m_fit = fit;
     CalcLayout(true);
     if (fit) SetSize(DoGetBestSize());
 }
