diff --git a/CMakeLists.txt b/CMakeLists.txt
index ae559428..74cc9c58 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -33,13 +33,28 @@
 # USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 # OF SUCH DAMAGE.
 
-cmake_minimum_required(VERSION 2.8.11)
+cmake_minimum_required(VERSION 2.8.11...3.21)
 
-set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+if(DEFINED CMAKE_MODULE_PATH)
+  list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+else()
+  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+endif()
 
 project(libssh2 C)
 set(PROJECT_URL "https://www.libssh2.org/")
 set(PROJECT_DESCRIPTION "The SSH library")
+include(flags OPTIONAL)
+if(DEFINED XP_NAMESPACE)
+  set(XP_MODULE_PATH ${CMAKE_MODULE_PATH})
+  set(XP_OPT_INSTALL EXCLUDE_FROM_ALL)
+  set(nameSpace ${XP_NAMESPACE}::)
+else()
+  set(nameSpace Libssh2::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME})
+endif()
 
 if (CMAKE_VERSION VERSION_LESS "3.1")
   if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
diff --git a/docs/CMakeLists.txt b/docs/CMakeLists.txt
index 6abf0e49..5002089d 100644
--- a/docs/CMakeLists.txt
+++ b/docs/CMakeLists.txt
@@ -207,4 +207,4 @@ set(MAN_PAGES
   libssh2_version.3)
 
 include(GNUInstallDirs)
-install(FILES ${MAN_PAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
+install(FILES ${MAN_PAGES} ${XP_OPT_INSTALL} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2eaf4cc2..4586671a 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -60,7 +60,11 @@ endif()
 
 if(CRYPTO_BACKEND STREQUAL "OpenSSL" OR NOT CRYPTO_BACKEND)
 
-  find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  if(COMMAND xpFindPkg)
+    xpFindPkg(PKGS openssl)
+  else()
+    find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  endif()
 
   if(OPENSSL_FOUND)
     set(CRYPTO_BACKEND "OpenSSL")
@@ -223,6 +227,7 @@ target_include_directories(libssh2
   PRIVATE "${PROJECT_SOURCE_DIR}/include/" ${PRIVATE_INCLUDE_DIRECTORIES}
   PUBLIC
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}>
     $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>)
 
 ## Options
@@ -239,9 +244,13 @@ option(ENABLE_ZLIB_COMPRESSION "Use zlib for compression")
 add_feature_info(Compression ENABLE_ZLIB_COMPRESSION
   "using zlib for compression")
 if(ENABLE_ZLIB_COMPRESSION)
-  find_package(ZLIB REQUIRED)
+  if(COMMAND xpFindPkg)
+    xpFindPkg(PKGS zlib)
+  else()
+    find_package(ZLIB REQUIRED)
+    target_include_directories(libssh2 PRIVATE ${ZLIB_INCLUDE_DIRS})
+  endif()
 
-  target_include_directories(libssh2 PRIVATE ${ZLIB_INCLUDE_DIRS})
   list(APPEND LIBRARIES ${ZLIB_LIBRARIES})
   list(APPEND PC_REQUIRES_PRIVATE zlib)
   if(ZLIB_FOUND)
@@ -372,7 +381,7 @@ install(FILES
   ${PROJECT_SOURCE_DIR}/include/libssh2.h
   ${PROJECT_SOURCE_DIR}/include/libssh2_publickey.h
   ${PROJECT_SOURCE_DIR}/include/libssh2_sftp.h
-  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
 
 install(TARGETS libssh2
   EXPORT Libssh2Config
@@ -391,12 +400,12 @@ set(RUNTIME_DEPENDENCIES ${_RUNTIME_DEPENDENCIES} CACHE INTERNAL
 
 ## During package installation, install Libssh2Config.cmake
 install(EXPORT Libssh2Config
-  NAMESPACE Libssh2::
-  DESTINATION lib/cmake/libssh2)
+  NAMESPACE ${nameSpace}
+  DESTINATION ${XP_INSTALL_CMAKEDIR})
 
 ## During build, register directly from build tree
 # create Libssh2Config.cmake
-export(TARGETS libssh2 NAMESPACE Libssh2:: FILE Libssh2Config.cmake)
+export(TARGETS libssh2 NAMESPACE ${nameSpace} FILE Libssh2Config.cmake)
 export(PACKAGE Libssh2) # register it
 
 ## Export a .pc file for client projects not using CMaek
@@ -409,6 +418,7 @@ endif()
 configure_file(libssh2.pc.in libssh2.pc @ONLY)
 install(
   FILES ${CMAKE_CURRENT_BINARY_DIR}/libssh2.pc
+  ${XP_OPT_INSTALL}
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
 ## Versioning
@@ -424,4 +434,4 @@ write_basic_package_version_file(
   COMPATIBILITY SameMajorVersion)
 install(
   FILES ${CMAKE_CURRENT_BINARY_DIR}/Libssh2ConfigVersion.cmake
-  DESTINATION lib/cmake/libssh2)
+  DESTINATION ${XP_INSTALL_CMAKEDIR})
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index c8c5253d..ffbd835b 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -36,7 +36,6 @@
 include(CheckIncludeFiles)
 include(CheckFunctionExists)
 include(CheckSymbolExists)
-include(BundleUtilities)
 include(CopyRuntimeDependencies)
 include(SocketLibraries)
 
@@ -72,7 +71,11 @@ endif()
 
 if(CRYPTO_BACKEND STREQUAL "OpenSSL" OR NOT CRYPTO_BACKEND)
 
-  find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  if(COMMAND xpFindPkg)
+    xpFindPkg(PKGS openssl)
+  else()
+    find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  endif()
 
   if(OPENSSL_FOUND)
     set(CRYPTO_BACKEND "OpenSSL")
@@ -124,8 +127,8 @@ if(CRYPTO_BACKEND STREQUAL "OpenSSL")
     list(APPEND TESTS
       public_key_auth_succeeds_with_correct_rsa_openssh_key
     )
-    if(OPENSSL_VERSION VERSION_GREATER "1.1.0")
-      list(APPEND TESTS
+    if(OPENSSL_VERSION VERSION_GREATER "1.1.0" AND FALSE)
+      list(APPEND TESTS # source code does not exist
         public_key_auth_succeeds_with_correct_ed25519_key
         public_key_auth_succeeds_with_correct_encrypted_ed25519_key
         public_key_auth_succeeds_with_correct_ed25519_key_from_mem
