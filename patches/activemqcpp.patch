diff --git a/activemq-cpp/CMakeLists.txt b/activemq-cpp/CMakeLists.txt
new file mode 100644
index 00000000..acb9e738
--- /dev/null
+++ b/activemq-cpp/CMakeLists.txt
@@ -0,0 +1,20 @@
+cmake_minimum_required(VERSION 3.20)
+project(activemq-cpp)
+include(flags OPTIONAL)
+include(GNUInstallDirs)
+if(COMMAND xpFindPkg)
+  xpFindPkg(PKGS apr openssl)
+else()
+  find_package(APR REQUIRED)
+  find_package(OpenSSL)
+endif()
+if(UNIX)
+  include(configure.cmake)
+endif()
+include(CheckCXXCompilerFlag)
+check_cxx_compiler_flag("-Wno-deprecated-declarations" has_noDeprecatedDeclarations)
+if(has_noDeprecatedDeclarations)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
+endif()
+add_subdirectory(src/main)
+add_subdirectory(src/examples)
diff --git a/activemq-cpp/config.h.cmake.in b/activemq-cpp/config.h.cmake.in
new file mode 100644
index 00000000..b8ee1abe
--- /dev/null
+++ b/activemq-cpp/config.h.cmake.in
@@ -0,0 +1,236 @@
+/* config.h.cmake.in.  Copied, modified from source targ.gz config.h.in.  */
+
+/* Define if building universal (internal helper macro) */
+#@DEFINE_AC_APPLE_UNIVERSAL_BUILD@ AC_APPLE_UNIVERSAL_BUILD
+
+/* Define if compiler provides atomic builtins */
+#@DEFINE_HAVE_ATOMIC_BUILTINS@ HAVE_ATOMIC_BUILTINS
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#@DEFINE_HAVE_DLFCN_H@ HAVE_DLFCN_H
+
+/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#@DEFINE_HAVE_DOPRNT@ HAVE_DOPRNT
+
+/* Define to 1 if you have the <errno.h> header file. */
+#@DEFINE_HAVE_ERRNO_H@ HAVE_ERRNO_H
+
+/* Define to 1 if you have the `ftime' function. */
+#@DEFINE_HAVE_FTIME@ HAVE_FTIME
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#@DEFINE_HAVE_GETTIMEOFDAY@ HAVE_GETTIMEOFDAY
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#@DEFINE_HAVE_INTTYPES_H@ HAVE_INTTYPES_H
+
+/* Define to 1 if you have the `ioctl' function. */
+#@DEFINE_HAVE_IOCTL@ HAVE_IOCTL
+
+/* Define to 1 if you have the <limits.h> header file. */
+#@DEFINE_HAVE_LIMITS_H@ HAVE_LIMITS_H
+
+/* Define to 1 if you have the <memory.h> header file. */
+#@DEFINE_HAVE_MEMORY_H@ HAVE_MEMORY_H
+
+/* Define to 1 if you have the <objbase.h> header file. */
+#@DEFINE_HAVE_OBJBASE_H@ HAVE_OBJBASE_H
+
+/* Define that we have SSL capability */
+#@DEFINE_HAVE_OPENSSL@ HAVE_OPENSSL
+
+/* Define to 1 if you have the `pthread_attr_setguardsize' function. */
+#@DEFINE_HAVE_PTHREAD_ATTR_SETGUARDSIZE@ HAVE_PTHREAD_ATTR_SETGUARDSIZE
+
+/* Define to 1 if you have the <pthread.h> header file. */
+#@DEFINE_HAVE_PTHREAD_H@ HAVE_PTHREAD_H
+
+/* Define to 1 if you have the `pthread_key_delete' function. */
+#@DEFINE_HAVE_PTHREAD_KEY_DELETE@ HAVE_PTHREAD_KEY_DELETE
+
+/* Define if recursive pthread mutexes are available */
+#@DEFINE_HAVE_PTHREAD_MUTEX_RECURSIVE@ HAVE_PTHREAD_MUTEX_RECURSIVE
+
+/* Define if pthread rwlocks are available */
+#@DEFINE_HAVE_PTHREAD_RWLOCKS@ HAVE_PTHREAD_RWLOCKS
+
+/* Define to 1 if you have the `pthread_rwlock_init' function. */
+#@DEFINE_HAVE_PTHREAD_RWLOCK_INIT@ HAVE_PTHREAD_RWLOCK_INIT
+
+/* Define to 1 if you have the `pthread_timedjoin_np' function. */
+#@DEFINE_HAVE_PTHREAD_TIMEDJOIN_NP@ HAVE_PTHREAD_TIMEDJOIN_NP
+
+/* Define to 1 if you have the `pthread_tryjoin_np' function. */
+#@DEFINE_HAVE_PTHREAD_TRYJOIN_NP@ HAVE_PTHREAD_TRYJOIN_NP
+
+/* Define to 1 if you have the `pthread_yield' function. */
+#@DEFINE_HAVE_PTHREAD_YIELD@ HAVE_PTHREAD_YIELD
+
+/* Define to 1 if you have the `random' function. */
+#@DEFINE_HAVE_RANDOM@ HAVE_RANDOM
+
+/* Define to 1 if you have the <repcdce.h> header file. */
+#@DEFINE_HAVE_REPCDCE_H@ HAVE_REPCDCE_H
+
+/* Define to 1 if you have the <sched.h> header file. */
+#@DEFINE_HAVE_SCHED_H@ HAVE_SCHED_H
+
+/* Define to 1 if you have the `sched_yield' function. */
+#@DEFINE_HAVE_SCHED_YIELD@ HAVE_SCHED_YIELD
+
+/* Define to 1 if you have the `select' function. */
+#@DEFINE_HAVE_SELECT@ HAVE_SELECT
+
+/* Define to 1 if you have the <semaphore.h> header file. */
+#@DEFINE_HAVE_SEMAPHORE_H@ HAVE_SEMAPHORE_H
+
+/* Define to 1 if you have the <signal.h> header file. */
+#@DEFINE_HAVE_SIGNAL_H@ HAVE_SIGNAL_H
+
+/* Define to 1 if you have the `srandom' function. */
+#@DEFINE_HAVE_SRANDOM@ HAVE_SRANDOM
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#@DEFINE_HAVE_STDINT_H@ HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#@DEFINE_HAVE_STDLIB_H@ HAVE_STDLIB_H
+
+/* Define to 1 if you have the <strings.h> header file. */
+#@DEFINE_HAVE_STRINGS_H@ HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#@DEFINE_HAVE_STRING_H@ HAVE_STRING_H
+
+/* define if you have struct addrinfo */
+#@DEFINE_HAVE_STRUCT_ADDRINFO@ HAVE_STRUCT_ADDRINFO
+
+/* Define to 1 if you have the <sys/filio.h> header file. */
+#@DEFINE_HAVE_SYS_FILIO_H@ HAVE_SYS_FILIO_H
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#@DEFINE_HAVE_SYS_IOCTL_H@ HAVE_SYS_IOCTL_H
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#@DEFINE_HAVE_SYS_RESOURCE_H@ HAVE_SYS_RESOURCE_H
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#@DEFINE_HAVE_SYS_SELECT_H@ HAVE_SYS_SELECT_H
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#@DEFINE_HAVE_SYS_STAT_H@ HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/sysctl.h> header file. */
+#@DEFINE_HAVE_SYS_SYSCTL_H@ HAVE_SYS_SYSCTL_H
+
+/* Define to 1 if you have the <sys/timeb.h> header file. */
+#@DEFINE_HAVE_SYS_TIMEB_H@ HAVE_SYS_TIMEB_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#@DEFINE_HAVE_SYS_TIME_H@ HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#@DEFINE_HAVE_SYS_TYPES_H@ HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the <sys/wait.h> header file. */
+#@DEFINE_HAVE_SYS_WAIT_H@ HAVE_SYS_WAIT_H
+
+/* Define to 1 if you have the `time' function. */
+#@DEFINE_HAVE_TIME@ HAVE_TIME
+
+/* Define to 1 if you have the <time.h> header file. */
+#@DEFINE_HAVE_TIME_H@ HAVE_TIME_H
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#@DEFINE_HAVE_UNISTD_H@ HAVE_UNISTD_H
+
+/* define if you have -fvisibility options */
+#@DEFINE_HAVE_VISIBILITY_OPTIONS@ HAVE_VISIBILITY_OPTIONS
+
+/* Define to 1 if you have the `vprintf' function. */
+#@DEFINE_HAVE_VPRINTF@ HAVE_VPRINTF
+
+/* Define if compiler provides wchar_t */
+#@DEFINE_HAVE_WCHAR_T@ HAVE_WCHAR_T
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR "@LT_OBJDIR@"
+
+/* Name of package */
+#cmakedefine PACKAGE "@PACKAGE@"
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT "@PACKAGE_BUGREPORT@"
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME "@PACKAGE_NAME@"
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING "@PACKAGE_STRING@"
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME "@PACKAGE_TARNAME@"
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL "@PACKAGE_URL@"
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION "@PACKAGE_VERSION@"
+
+/* Define if pthread_attr_getdetachstate() has one arg */
+#@DEFINE_PTHREAD_ATTR_GETDETACHSTATE_TAKES_ONE_ARG@ PTHREAD_ATTR_GETDETACHSTATE_TAKES_ONE_ARG
+
+/* Define if pthread_getspecific() has two args */
+#@DEFINE_PTHREAD_GETSPECIFIC_TAKES_TWO_ARGS@ PTHREAD_GETSPECIFIC_TAKES_TWO_ARGS
+
+/* Define if sigwait takes one arg */
+#@DEFINE_SIGWAIT_TAKES_ONE_ARG@ SIGWAIT_TAKES_ONE_ARG
+
+/* The size of `char', as computed by sizeof. */
+@SIZEOF_CHAR_CODE@
+
+/* The size of `double', as computed by sizeof. */
+@SIZEOF_DOUBLE_CODE@
+
+/* The size of `float', as computed by sizeof. */
+@SIZEOF_FLOAT_CODE@
+
+/* The size of `int', as computed by sizeof. */
+@SIZEOF_INT_CODE@
+
+/* The size of `long', as computed by sizeof. */
+@SIZEOF_LONG_CODE@
+
+/* The size of `long long', as computed by sizeof. */
+@SIZEOF_LONG_LONG_CODE@
+
+/* The size of `short', as computed by sizeof. */
+@SIZEOF_SHORT_CODE@
+
+/* The size of `wchar_t', as computed by sizeof. */
+@SIZEOF_WCHAR_T_CODE@
+
+/* Define to 1 if you have the ANSI C header files. */
+#@DEFINE_STDC_HEADERS@ STDC_HEADERS
+
+/* Version number of package */
+#cmakedefine VERSION "@VERSION@"
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#@DEFINE_WORDS_BIGENDIAN@ WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#@DEFINE_const@ const
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t @size_t@
diff --git a/activemq-cpp/configure.cmake b/activemq-cpp/configure.cmake
new file mode 100644
index 00000000..8657ec12
--- /dev/null
+++ b/activemq-cpp/configure.cmake
@@ -0,0 +1,399 @@
+include(CheckCXXCompilerFlag)
+include(CheckCSourceCompiles)
+include(CheckFunctionExists)
+include(CheckIncludeFile)
+include(CheckLibraryExists)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+include(CMakePushCheckState)
+include(TestBigEndian)
+########################################
+function(set_define var)
+  if(${ARGC} GREATER 1 AND ${var})
+    set(DEFINE_${var} cmakedefine01 PARENT_SCOPE)
+  else()
+    set(DEFINE_${var} cmakedefine PARENT_SCOPE)
+  endif()
+  if(${var})
+    set(AMQ_TEST_DEFINES "${AMQ_TEST_DEFINES} -D${var}" PARENT_SCOPE)
+    set(CMAKE_REQUIRED_DEFINITIONS ${AMQ_TEST_DEFINES} PARENT_SCOPE)
+  endif(${var})
+endfunction()
+##########
+macro(check_include_file_concat incfile var)
+  check_include_file("${incfile}" ${var})
+  set_define(${var} 1)
+  if(${var})
+    set(AMQ_INCLUDES ${AMQ_INCLUDES} ${incfile})
+  endif(${var})
+endmacro()
+##########
+macro(check_exists_define01 func var)
+  if(UNIX)
+    check_function_exists("${func}" ${var})
+  else()
+    check_symbol_exists("${func}" "${AMQ_INCLUDES}" ${var})
+  endif()
+  set_define(${var} 1)
+endmacro()
+##########
+macro(check_library_exists_concat lib symbol var)
+  check_library_exists("${lib};${AMQ_SYSTEM_LIBS}" ${symbol} "${CMAKE_LIBRARY_PATH}" ${var})
+  set_define(${var} 1)
+  if(${var})
+    set(AMQ_SYSTEM_LIBS ${lib} ${AMQ_SYSTEM_LIBS})
+    set(CMAKE_REQUIRED_LIBRARIES ${AMQ_SYSTEM_LIBS})
+  endif(${var})
+endmacro()
+########################################
+check_include_file_concat(windows.h HAVE_WINDOWS_H)
+if(HAVE_WINDOWS_H)
+  set(WIN32_LEAN_AND_MEAN TRUE) # Define to avoid automatic inclusion of winsock.h
+endif()
+set_define(WIN32_LEAN_AND_MEAN)
+check_include_file_concat(dlfcn.h HAVE_DLFCN_H)
+check_include_file_concat(errno.h HAVE_ERRNO_H)
+check_include_file_concat(inttypes.h HAVE_INTTYPES_H)
+check_include_file_concat(limits.h HAVE_LIMITS_H)
+check_include_file_concat(memory.h HAVE_MEMORY_H)
+check_include_file_concat(objbase.h HAVE_OBJBASE_H)
+check_include_file_concat(pthread.h HAVE_PTHREAD_H)
+check_include_file_concat(repcdce.h HAVE_REPCDCE_H)
+check_include_file_concat(sched.h HAVE_SCHED_H)
+check_include_file_concat(semaphore.h HAVE_SEMAPHORE_H)
+check_include_file_concat(signal.h HAVE_SIGNAL_H)
+check_include_file_concat(stdint.h HAVE_STDINT_H)
+check_include_file_concat(stdlib.h HAVE_STDLIB_H)
+check_include_file_concat(strings.h HAVE_STRINGS_H)
+check_include_file_concat(string.h HAVE_STRING_H)
+check_include_file_concat(sys/filio.h HAVE_SYS_FILIO_H)
+check_include_file_concat(sys/ioctl.h HAVE_SYS_IOCTL_H)
+check_include_file_concat(sys/resource.h HAVE_SYS_RESOURCE_H)
+check_include_file_concat(sys/select.h HAVE_SYS_SELECT_H)
+check_include_file_concat(sys/stat.h HAVE_SYS_STAT_H)
+check_include_file_concat(sys/sysctl.h HAVE_SYS_SYSCTL_H)
+check_include_file_concat(sys/timeb.h HAVE_SYS_TIMEB_H)
+check_include_file_concat(sys/time.h HAVE_SYS_TIME_H)
+check_include_file_concat(sys/types.h HAVE_SYS_TYPES_H)
+check_include_file_concat(sys/wait.h HAVE_SYS_WAIT_H)
+check_include_file_concat(time.h HAVE_TIME_H)
+check_include_file_concat(unistd.h HAVE_UNISTD_H)
+check_include_file_concat(stdio.h HAVE_STDIO_H)
+check_include_file_concat(sys/socket.h HAVE_SYS_SOCKET_H)
+check_include_file_concat(netdb.h HAVE_NETDB_H)
+##########
+check_library_exists_concat(pthread pthread_yield HAVE_LIBPTHREAD)
+##########
+check_exists_define01(ftime HAVE_FTIME)
+check_exists_define01(gettimeofday HAVE_GETTIMEOFDAY)
+check_exists_define01(ioctl HAVE_IOCTL)
+check_exists_define01(pthread_attr_setguardsize HAVE_PTHREAD_ATTR_SETGUARDSIZE)
+check_exists_define01(pthread_key_delete HAVE_PTHREAD_KEY_DELETE)
+check_exists_define01(pthread_rwlock_init HAVE_PTHREAD_RWLOCK_INIT)
+check_exists_define01(pthread_timedjoin_np HAVE_PTHREAD_TIMEDJOIN_NP)
+check_exists_define01(pthread_tryjoin_np HAVE_PTHREAD_TRYJOIN_NP)
+check_exists_define01(pthread_yield HAVE_PTHREAD_YIELD)
+check_exists_define01(random HAVE_RANDOM)
+check_exists_define01(sched_yield HAVE_SCHED_YIELD) #TODO: configure doesn't find
+check_exists_define01(select HAVE_SELECT)
+check_exists_define01(srandom HAVE_SRANDOM)
+check_exists_define01(time HAVE_TIME)
+check_exists_define01(vprintf HAVE_VPRINTF)
+if(NOT HAVE_VPRINTF)
+  check_exists_define01(_doprnt HAVE_DOPRNT)
+else()
+  set_define(HAVE_DOPRNT 1)
+endif()
+##########
+cmake_push_check_state(RESET)
+set(CMAKE_EXTRA_INCLUDE_FILES ${AMQ_INCLUDES})
+check_type_size(char SIZEOF_CHAR)
+check_type_size(double SIZEOF_DOUBLE)
+check_type_size(float SIZEOF_FLOAT)
+check_type_size(int SIZEOF_INT)
+check_type_size(long SIZEOF_LONG)
+check_type_size("long long" SIZEOF_LONG_LONG)
+check_type_size(short SIZEOF_SHORT)
+check_type_size(wchar_t SIZEOF_WCHAR_T) # sets HAVE_SIZEOF_WCHAR_T
+set(HAVE_WCHAR_T ${HAVE_SIZEOF_WCHAR_T})
+set_define(HAVE_WCHAR_T 1)
+check_type_size(size_t SIZEOF_SIZE_T) # sets HAVE_SIZEOF_SIZE_T
+if(NOT HAVE_SIZEOF_SIZE_T)
+  set(size_t "unsigned int") # Define to `unsigned int' if <sys/types.h> does not define.
+endif()
+set(CMAKE_EXTRA_INCLUDE_FILES)
+cmake_pop_check_state()
+########################################
+set(HAVE_OPENSSL ${OPENSSL_FOUND})
+set_define(HAVE_OPENSSL 1)
+########################################
+# Define if building universal (internal helper macro)
+set(AC_APPLE_UNIVERSAL_BUILD) #TODO: determine on Apple
+set_define(AC_APPLE_UNIVERSAL_BUILD)
+####################
+# Define if compiler provides atomic builtins
+check_c_source_compiles("
+int main()
+{
+  unsigned long val = 1010, tmp, *mem = &val;
+  if (__sync_fetch_and_add(&val, 1010) != 1010 || val != 2020)
+    return 1;
+  tmp = val;
+  if (__sync_fetch_and_sub(mem, 1010) != tmp || val != 1010)
+    return 1;
+  if (__sync_sub_and_fetch(&val, 1010) != 0 || val != 0)
+    return 1;
+  tmp = 3030;
+  if (__sync_val_compare_and_swap(mem, 0, tmp) != 0 || val != tmp)
+    return 1;
+  if (__sync_lock_test_and_set(&val, 4040) != 3030)
+    return 1;
+  mem = &tmp;
+  if (__sync_val_compare_and_swap(&mem, &tmp, &val) != &tmp)
+    return 1;
+  __sync_synchronize();
+  if (mem != &val)
+    return 1;
+  return 0;
+}
+" HAVE_ATOMIC_BUILTINS
+  )
+set_define(HAVE_ATOMIC_BUILTINS 1)
+####################
+# Define if recursive pthread mutexes are available
+check_c_source_compiles("
+#include <sys/types.h>
+#include <pthread.h>
+#include <stdlib.h>
+int main()
+{
+  pthread_mutexattr_t attr;
+  pthread_mutex_t m;
+  exit ( pthread_mutexattr_init(&attr) ||
+         pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE) ||
+         pthread_mutex_init(&m, &attr) );
+}
+" HAVE_PTHREAD_MUTEX_RECURSIVE
+  )
+set_define(HAVE_PTHREAD_MUTEX_RECURSIVE 1)
+####################
+# Define if pthread rwlocks are available
+check_c_source_compiles("
+#include <sys/types.h>
+#include <pthread.h>
+int main()
+{
+  pthread_rwlock_t *rwlock;
+  ;
+  return 0;
+}
+" HAVE_PTHREAD_RWLOCKS
+  )
+set_define(HAVE_PTHREAD_RWLOCKS 1)
+####################
+# define if you have struct addrinfo
+check_c_source_compiles("
+#ifdef HAVE_STDIO_H
+# include <stdio.h>
+#endif
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+# include <sys/socket.h>
+#endif
+#ifdef HAVE_NETDB_H
+# include <netdb.h>
+#endif
+int main()
+{
+  do {
+    struct addrinfo a;
+    (void) a.ai_flags;
+  } while(0)
+  ;
+  return 0;
+}
+" HAVE_STRUCT_ADDRINFO
+  )
+set_define(HAVE_STRUCT_ADDRINFO)
+####################
+# define if you have -fvisibility options
+check_cxx_compiler_flag("-fvisibility=hidden -fvisibility-inlines-hidden" HAVE_VISIBILITY_OPTIONS)
+set_define(HAVE_VISIBILITY_OPTIONS)
+####################
+# Define to the sub-directory in which libtool stores uninstalled libraries.
+execute_process(COMMAND libtool --version
+  OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE hasLibtool
+  )
+if(hasLibtool EQUAL 0) # 0 == success
+  set(LT_OBJDIR .libs/)
+endif()
+####################
+# Name of package
+set(PACKAGE ${PROJECT_NAME})
+# Version number of package
+file(STRINGS configure.ac MAJOR REGEX "^ACTIVEMQ_MAJOR_VERSION=([0-9]+)")
+file(STRINGS configure.ac MINOR REGEX "^ACTIVEMQ_MINOR_VERSION=([0-9]+)")
+file(STRINGS configure.ac PATCH REGEX "^ACTIVEMQ_PATCH_VERSION=([0-9]+)")
+string(REGEX MATCH "([0-9]+)" MAJOR ${MAJOR})
+string(REGEX MATCH "([0-9]+)" MINOR ${MINOR})
+string(REGEX MATCH "([0-9]+)" PATCH ${PATCH})
+set(VERSION ${MAJOR}.${MINOR}.${PATCH})
+# Define to the address where bug reports for this package should be sent.
+set(PACKAGE_BUGREPORT "dev@activemq.apache.org")
+# Define to the full name of this package.
+set(PACKAGE_NAME ${PACKAGE})
+# Define to the full name and version of this package.
+set(PACKAGE_STRING "${PACKAGE} ${VERSION}")
+# Define to the one symbol short name of this package.
+set(PACKAGE_TARNAME ${PACKAGE})
+# Define to the home page for this package.
+set(PACKAGE_URL http://activemq.apache.org/cms/)
+# Define to the version of this package.
+set(PACKAGE_VERSION ${VERSION})
+####################
+# Define if pthread_attr_getdetachstate() has one arg
+check_c_source_compiles("
+#include <pthread.h>
+int main()
+{
+  pthread_attr_t *attr;
+  pthread_attr_getdetachstate(attr);
+  ;
+  return 0;
+}
+" PTHREAD_ATTR_GETDETACHSTATE_TAKES_ONE_ARG
+  )
+set_define(PTHREAD_ATTR_GETDETACHSTATE_TAKES_ONE_ARG 1)
+####################
+# Define if pthread_getspecific() has two args
+check_c_source_compiles("
+#include <pthread.h>
+int main()
+{
+  pthread_key_t key;
+  void *tmp;
+  pthread_getspecific(key,&tmp);
+  ;
+  return 0;
+}
+" PTHREAD_GETSPECIFIC_TAKES_TWO_ARGS
+  )
+set_define(PTHREAD_GETSPECIFIC_TAKES_TWO_ARGS 1)
+####################
+# Define if sigwait takes one arg
+check_c_source_compiles("
+#if defined(__NETBSD__) || defined(DARWIN)
+  /* When using the unproven-pthreads package, we need to pull in this
+   * header to get a prototype for sigwait().  Else things will fail later
+   * on.  XXX Should probably be fixed in the unproven-pthreads package.
+   * Darwin is declaring sigwait() in the wrong place as well.
+   */
+   #include <pthread.h>
+#endif
+#include <signal.h>
+int main()
+{
+  sigset_t set;
+  sigwait(&set);
+  ;
+  return 0;
+}
+" SIGWAIT_TAKES_ONE_ARG
+  )
+set_define(SIGWAIT_TAKES_ONE_ARG 1)
+####################
+# Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+# significant byte first (like Motorola and SPARC, unlike Intel).
+test_big_endian(WORDS_BIGENDIAN)
+set_define(WORDS_BIGENDIAN 1)
+########################################
+# Define to 1 if you have the ANSI C header files.
+check_c_source_compiles("
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+#include <float.h>
+int main()
+{
+  ;
+  return 0;
+}
+" STDC_HEADERS
+  )
+set_define(STDC_HEADERS 1)
+########################################
+# Define to empty if `const' does not conform to ANSI C.
+check_c_source_compiles("
+int main()
+{
+#ifndef __cplusplus
+  /* Ultrix mips cc rejects this sort of thing.  */
+  typedef int charset[2];
+  const charset cs = { 0, 0 };
+  /* SunOS 4.1.1 cc rejects this.  */
+  char const *const *pcpcc;
+  char **ppc;
+  /* NEC SVR4.0.2 mips cc rejects this.  */
+  struct point {int x, y;};
+  static struct point const zero = {0,0};
+  /* AIX XL C 1.02.0.0 rejects this.
+     It does not let you subtract one const X* pointer from another in
+     an arm of an if-expression whose if-part is not a constant
+     expression */
+  const char *g = \"string\";
+  pcpcc = &g + (g ? g-g : 0);
+  /* HPUX 7.0 cc rejects these. */
+  ++pcpcc;
+  ppc = (char**) pcpcc;
+  pcpcc = (char const *const *) ppc;
+  { /* SCO 3.2v4 cc rejects this sort of thing.  */
+    char tx;
+    char *t = &tx;
+    char const *s = 0 ? (char *) 0 : (char const *) 0;
+
+    *t++ = 0;
+    if (s) return 0;
+  }
+  { /* Someone thinks the Sun supposedly-ANSI compiler will reject this.  */
+    int x[] = {25, 17};
+    const int *foo = &x[0];
+    ++foo;
+  }
+  { /* Sun SC1.0 ANSI compiler rejects this -- but not the above. */
+    typedef const int *iptr;
+    iptr p = 0;
+    ++p;
+  }
+  { /* AIX XL C 1.02.0.0 rejects this sort of thing, saying
+       \"k.c\", line 2.27: 1506-025 (S) Operand must be a modifiable lvalue. */
+    struct s { int j; const int *ap[3]; } bx;
+    struct s *b = &bx; b->j = 5;
+  }
+  { /* ULTRIX-32 V3.1 (Rev 9) vcc rejects this */
+    const int foo = 10;
+    if (!foo) return 0;
+  }
+  return !cs[0] && !zero.x;
+#endif
+  ;
+  return 0;
+}
+" ANSI_CONST
+  )
+if(NOT ANSI_CONST)
+  set(const empty)
+endif()
+set_define(const)
+########################################
+configure_file(${CMAKE_SOURCE_DIR}/config.h.cmake.in .)
+configure_file(${CMAKE_BINARY_DIR}/config.h.cmake.in ${CMAKE_BINARY_DIR}/config.h)
+include_directories(${CMAKE_BINARY_DIR})
+add_definitions(-DHAVE_CONFIG_H)
+################################################################################
+set(CMAKE_REQUIRED_LIBRARIES)
+set(CMAKE_REQUIRED_DEFINITIONS)
diff --git a/activemq-cpp/src/examples/CMakeLists.txt b/activemq-cpp/src/examples/CMakeLists.txt
new file mode 100644
index 00000000..7a229f29
--- /dev/null
+++ b/activemq-cpp/src/examples/CMakeLists.txt
@@ -0,0 +1,83 @@
+## Example executables
+set(example_exes
+  example
+  simple_async_consumer
+  simple_producer
+  chat
+  cmstemplate_sender
+  cmstemplate_receiver
+  advisory_producer
+  advisory_consumer
+  tempdest_advisory_consumer
+  tempdest_advisory_producer
+  cmstemplate_stress
+  stress_test
+  )
+## Main Example
+set(example_srcs
+  main.cpp
+  )
+## Simple Async Consumer
+set(simple_async_consumer_srcs
+  consumers/SimpleAsyncConsumer.cpp
+  )
+## Simple Producer
+set(simple_producer_srcs
+  producers/SimpleProducer.cpp
+  )
+## Chat Sample
+set(chat_srcs
+  topics/chat/Chat.cpp
+  )
+## CMSTemplate Message send Sample
+set(cmstemplate_sender_srcs
+  cmstemplate/CMSTemplateSender.cpp
+  )
+## CMSTemplate Message receive Sample
+set(cmstemplate_receiver_srcs
+  cmstemplate/CMSTemplateReceiver.cpp
+  )
+## Advisory Producer Example
+set(advisory_producer_srcs
+  advisories/AdvisoryProducer.cpp
+  advisories/AdvisoryProducerMain.cpp
+  )
+## Advisory Consumer Example
+set(advisory_consumer_srcs
+  advisories/AdvisoryConsumer.cpp
+  advisories/AdvisoryConsumerMain.cpp
+  )
+## Temp Destination Advisory Consumer Example
+set(tempdest_advisory_consumer_srcs
+  advisories/TempDestinationAdvisoryConsumer.cpp
+  advisories/TempDestinationAdvisoryConsumerMain.cpp
+  )
+## Temp Destination Advisory Producer Example
+set(tempdest_advisory_producer_srcs
+  advisories/TempDestinationAdvisoryProducerMain.cpp
+  )
+## CMS Template Stress Test Example
+set(cmstemplate_stress_srcs
+  cmstemplate-stress/TestSenderAndReceiver.cpp
+  cmstemplate-stress/Sender.cpp
+  cmstemplate-stress/Receiver.cpp
+  cmstemplate-stress/MessagingTask.cpp
+  cmstemplate-stress/ConnectionFactoryMgr.cpp
+  cmstemplate-stress/CMSTestMultipleSendersReceivers.cpp
+  cmstemplate-stress/CmsMessageCreator.cpp
+  )
+## Stress Test Example
+set(stress_test_srcs
+  stress-test/TestSenderAndReceiver.cpp
+  stress-test/Sender.cpp
+  stress-test/Receiver.cpp
+  stress-test/MessagingTask.cpp
+  stress-test/ConnectionFactoryMgr.cpp
+  stress-test/CmsStress.cpp
+  stress-test/BrokerMonitor.cpp
+  stress-test/CmsMessageCreator.cpp
+  )
+foreach(exe ${example_exes})
+  add_executable(${exe} ${${exe}_srcs})
+  target_link_libraries(${exe} activemqcpp)
+endforeach()
diff --git a/activemq-cpp/src/main/CMakeLists.txt b/activemq-cpp/src/main/CMakeLists.txt
new file mode 100644
index 00000000..df7f8053
--- /dev/null
+++ b/activemq-cpp/src/main/CMakeLists.txt
@@ -0,0 +1,1710 @@
+set(lib_name activemqcpp)
+#######################################
+# library sources
+########################
+# activemq/cmsutil
+set(activemq_cmsutil_srcs
+  activemq/cmsutil/CachedConsumer.cpp
+  activemq/cmsutil/CachedConsumer.h
+  activemq/cmsutil/CachedProducer.cpp
+  activemq/cmsutil/CachedProducer.h
+  activemq/cmsutil/CmsAccessor.cpp
+  activemq/cmsutil/CmsAccessor.h
+  activemq/cmsutil/CmsDestinationAccessor.cpp
+  activemq/cmsutil/CmsDestinationAccessor.h
+  activemq/cmsutil/CmsTemplate.cpp
+  activemq/cmsutil/CmsTemplate.h
+  activemq/cmsutil/DestinationResolver.cpp
+  activemq/cmsutil/DestinationResolver.h
+  activemq/cmsutil/DynamicDestinationResolver.cpp
+  activemq/cmsutil/DynamicDestinationResolver.h
+  activemq/cmsutil/MessageCreator.cpp
+  activemq/cmsutil/MessageCreator.h
+  activemq/cmsutil/PooledSession.cpp
+  activemq/cmsutil/PooledSession.h
+  activemq/cmsutil/ProducerCallback.cpp
+  activemq/cmsutil/ProducerCallback.h
+  activemq/cmsutil/ResourceLifecycleManager.cpp
+  activemq/cmsutil/ResourceLifecycleManager.h
+  activemq/cmsutil/SessionCallback.cpp
+  activemq/cmsutil/SessionCallback.h
+  activemq/cmsutil/SessionPool.cpp
+  activemq/cmsutil/SessionPool.h
+  )
+source_group(activemq\\cmsutil FILES ${activemq_cmsutil_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_cmsutil_srcs})
+##########
+# activemq/commands
+set(activemq_commands_srcs
+  activemq/commands/ActiveMQBlobMessage.cpp
+  activemq/commands/ActiveMQBlobMessage.h
+  activemq/commands/ActiveMQBytesMessage.cpp
+  activemq/commands/ActiveMQBytesMessage.h
+  activemq/commands/ActiveMQDestination.cpp
+  activemq/commands/ActiveMQDestination.h
+  activemq/commands/ActiveMQMapMessage.cpp
+  activemq/commands/ActiveMQMapMessage.h
+  activemq/commands/ActiveMQMessage.cpp
+  activemq/commands/ActiveMQMessage.h
+  activemq/commands/ActiveMQMessageTemplate.h
+  activemq/commands/ActiveMQObjectMessage.cpp
+  activemq/commands/ActiveMQObjectMessage.h
+  activemq/commands/ActiveMQQueue.cpp
+  activemq/commands/ActiveMQQueue.h
+  activemq/commands/ActiveMQStreamMessage.cpp
+  activemq/commands/ActiveMQStreamMessage.h
+  activemq/commands/ActiveMQTempDestination.cpp
+  activemq/commands/ActiveMQTempDestination.h
+  activemq/commands/ActiveMQTempQueue.cpp
+  activemq/commands/ActiveMQTempQueue.h
+  activemq/commands/ActiveMQTempTopic.cpp
+  activemq/commands/ActiveMQTempTopic.h
+  activemq/commands/ActiveMQTextMessage.cpp
+  activemq/commands/ActiveMQTextMessage.h
+  activemq/commands/ActiveMQTopic.cpp
+  activemq/commands/ActiveMQTopic.h
+  activemq/commands/BaseCommand.h
+  activemq/commands/BaseDataStructure.h
+  activemq/commands/BooleanExpression.h
+  activemq/commands/BrokerError.cpp
+  activemq/commands/BrokerError.h
+  activemq/commands/BrokerId.cpp
+  activemq/commands/BrokerId.h
+  activemq/commands/BrokerInfo.cpp
+  activemq/commands/BrokerInfo.h
+  activemq/commands/Command.h
+  activemq/commands/ConnectionControl.cpp
+  activemq/commands/ConnectionControl.h
+  activemq/commands/ConnectionError.cpp
+  activemq/commands/ConnectionError.h
+  activemq/commands/ConnectionId.cpp
+  activemq/commands/ConnectionId.h
+  activemq/commands/ConnectionInfo.cpp
+  activemq/commands/ConnectionInfo.h
+  activemq/commands/ConsumerControl.cpp
+  activemq/commands/ConsumerControl.h
+  activemq/commands/ConsumerId.cpp
+  activemq/commands/ConsumerId.h
+  activemq/commands/ConsumerInfo.cpp
+  activemq/commands/ConsumerInfo.h
+  activemq/commands/ControlCommand.cpp
+  activemq/commands/ControlCommand.h
+  activemq/commands/DataArrayResponse.cpp
+  activemq/commands/DataArrayResponse.h
+  activemq/commands/DataResponse.cpp
+  activemq/commands/DataResponse.h
+  activemq/commands/DataStructure.h
+  activemq/commands/DestinationInfo.cpp
+  activemq/commands/DestinationInfo.h
+  activemq/commands/DiscoveryEvent.cpp
+  activemq/commands/DiscoveryEvent.h
+  activemq/commands/ExceptionResponse.cpp
+  activemq/commands/ExceptionResponse.h
+  activemq/commands/FlushCommand.cpp
+  activemq/commands/FlushCommand.h
+  activemq/commands/IntegerResponse.cpp
+  activemq/commands/IntegerResponse.h
+  activemq/commands/JournalQueueAck.cpp
+  activemq/commands/JournalQueueAck.h
+  activemq/commands/JournalTopicAck.cpp
+  activemq/commands/JournalTopicAck.h
+  activemq/commands/JournalTrace.cpp
+  activemq/commands/JournalTrace.h
+  activemq/commands/JournalTransaction.cpp
+  activemq/commands/JournalTransaction.h
+  activemq/commands/KeepAliveInfo.cpp
+  activemq/commands/KeepAliveInfo.h
+  activemq/commands/LastPartialCommand.cpp
+  activemq/commands/LastPartialCommand.h
+  activemq/commands/LocalTransactionId.cpp
+  activemq/commands/LocalTransactionId.h
+  activemq/commands/MessageAck.cpp
+  activemq/commands/MessageAck.h
+  activemq/commands/Message.cpp
+  activemq/commands/MessageDispatch.cpp
+  activemq/commands/MessageDispatch.h
+  activemq/commands/MessageDispatchNotification.cpp
+  activemq/commands/MessageDispatchNotification.h
+  activemq/commands/Message.h
+  activemq/commands/MessageId.cpp
+  activemq/commands/MessageId.h
+  activemq/commands/MessagePull.cpp
+  activemq/commands/MessagePull.h
+  activemq/commands/NetworkBridgeFilter.cpp
+  activemq/commands/NetworkBridgeFilter.h
+  activemq/commands/PartialCommand.cpp
+  activemq/commands/PartialCommand.h
+  activemq/commands/ProducerAck.cpp
+  activemq/commands/ProducerAck.h
+  activemq/commands/ProducerId.cpp
+  activemq/commands/ProducerId.h
+  activemq/commands/ProducerInfo.cpp
+  activemq/commands/ProducerInfo.h
+  activemq/commands/RemoveInfo.cpp
+  activemq/commands/RemoveInfo.h
+  activemq/commands/RemoveSubscriptionInfo.cpp
+  activemq/commands/RemoveSubscriptionInfo.h
+  activemq/commands/ReplayCommand.cpp
+  activemq/commands/ReplayCommand.h
+  activemq/commands/Response.cpp
+  activemq/commands/Response.h
+  activemq/commands/SessionId.cpp
+  activemq/commands/SessionId.h
+  activemq/commands/SessionInfo.cpp
+  activemq/commands/SessionInfo.h
+  activemq/commands/ShutdownInfo.cpp
+  activemq/commands/ShutdownInfo.h
+  activemq/commands/srcmakefile.mk
+  activemq/commands/SubscriptionInfo.cpp
+  activemq/commands/SubscriptionInfo.h
+  activemq/commands/TransactionId.cpp
+  activemq/commands/TransactionId.h
+  activemq/commands/TransactionInfo.cpp
+  activemq/commands/TransactionInfo.h
+  activemq/commands/WireFormatInfo.cpp
+  activemq/commands/WireFormatInfo.h
+  activemq/commands/XATransactionId.cpp
+  activemq/commands/XATransactionId.h
+  )
+source_group(activemq\\commands FILES ${activemq_commands_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_commands_srcs})
+##########
+# activemq/core
+set(activemq_core_srcs
+  activemq/core/ActiveMQAckHandler.cpp
+  activemq/core/ActiveMQAckHandler.h
+  activemq/core/ActiveMQConnection.cpp
+  activemq/core/ActiveMQConnectionFactory.cpp
+  activemq/core/ActiveMQConnectionFactory.h
+  activemq/core/ActiveMQConnection.h
+  activemq/core/ActiveMQConnectionMetaData.cpp
+  activemq/core/ActiveMQConnectionMetaData.cpp.in
+  activemq/core/ActiveMQConnectionMetaData.h
+  activemq/core/ActiveMQConstants.cpp
+  activemq/core/ActiveMQConstants.h
+  activemq/core/ActiveMQConsumer.cpp
+  activemq/core/ActiveMQConsumer.h
+  activemq/core/ActiveMQDestinationEvent.cpp
+  activemq/core/ActiveMQDestinationEvent.h
+  activemq/core/ActiveMQDestinationSource.cpp
+  activemq/core/ActiveMQDestinationSource.h
+  activemq/core/ActiveMQMessageAudit.cpp
+  activemq/core/ActiveMQMessageAudit.h
+  activemq/core/ActiveMQProducer.cpp
+  activemq/core/ActiveMQProducer.h
+  activemq/core/ActiveMQQueueBrowser.cpp
+  activemq/core/ActiveMQQueueBrowser.h
+  activemq/core/ActiveMQSession.cpp
+  activemq/core/ActiveMQSessionExecutor.cpp
+  activemq/core/ActiveMQSessionExecutor.h
+  activemq/core/ActiveMQSession.h
+  activemq/core/ActiveMQTransactionContext.cpp
+  activemq/core/ActiveMQTransactionContext.h
+  activemq/core/ActiveMQXAConnection.cpp
+  activemq/core/ActiveMQXAConnectionFactory.cpp
+  activemq/core/ActiveMQXAConnectionFactory.h
+  activemq/core/ActiveMQXAConnection.h
+  activemq/core/ActiveMQXASession.cpp
+  activemq/core/ActiveMQXASession.h
+  activemq/core/AdvisoryConsumer.cpp
+  activemq/core/AdvisoryConsumer.h
+  activemq/core/ConnectionAudit.cpp
+  activemq/core/ConnectionAudit.h
+  activemq/core/DispatchData.cpp
+  activemq/core/DispatchData.h
+  activemq/core/Dispatcher.cpp
+  activemq/core/Dispatcher.h
+  activemq/core/FifoMessageDispatchChannel.cpp
+  activemq/core/FifoMessageDispatchChannel.h
+  activemq/core/MessageDispatchChannel.cpp
+  activemq/core/MessageDispatchChannel.h
+  activemq/core/PrefetchPolicy.cpp
+  activemq/core/PrefetchPolicy.h
+  activemq/core/RedeliveryPolicy.cpp
+  activemq/core/RedeliveryPolicy.h
+  activemq/core/SimplePriorityMessageDispatchChannel.cpp
+  activemq/core/SimplePriorityMessageDispatchChannel.h
+  activemq/core/Synchronization.cpp
+  activemq/core/Synchronization.h
+  )
+source_group(activemq\\core FILES ${activemq_core_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_core_srcs})
+##########
+set(activemq_core_kernels_srcs
+  activemq/core/kernels/ActiveMQConsumerKernel.cpp
+  activemq/core/kernels/ActiveMQConsumerKernel.h
+  activemq/core/kernels/ActiveMQProducerKernel.cpp
+  activemq/core/kernels/ActiveMQProducerKernel.h
+  activemq/core/kernels/ActiveMQSessionKernel.cpp
+  activemq/core/kernels/ActiveMQSessionKernel.h
+  activemq/core/kernels/ActiveMQXASessionKernel.cpp
+  activemq/core/kernels/ActiveMQXASessionKernel.h
+  )
+source_group(activemq\\core\\kernels FILES ${activemq_core_kernels_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_core_kernels_srcs})
+##########
+set(activemq_core_policies_srcs
+  activemq/core/policies/DefaultPrefetchPolicy.cpp
+  activemq/core/policies/DefaultPrefetchPolicy.h
+  activemq/core/policies/DefaultRedeliveryPolicy.cpp
+  activemq/core/policies/DefaultRedeliveryPolicy.h
+  )
+source_group(activemq\\core\\policies FILES ${activemq_core_policies_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_core_policies_srcs})
+##########
+# activemq/exceptions
+set(activemq_exceptions_srcs
+  activemq/exceptions/ActiveMQException.cpp
+  activemq/exceptions/ActiveMQException.h
+  activemq/exceptions/BrokerException.cpp
+  activemq/exceptions/BrokerException.h
+  activemq/exceptions/ConnectionFailedException.cpp
+  activemq/exceptions/ConnectionFailedException.h
+  activemq/exceptions/ExceptionDefines.h
+  )
+source_group(activemq\\exceptions FILES ${activemq_exceptions_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_exceptions_srcs})
+##########
+# activemq/io
+set(activemq_io_srcs
+  activemq/io/LoggingInputStream.cpp
+  activemq/io/LoggingInputStream.h
+  activemq/io/LoggingOutputStream.cpp
+  activemq/io/LoggingOutputStream.h
+  )
+source_group(activemq\\io FILES ${activemq_io_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_io_srcs})
+##########
+# activemq/library
+set(activemq_library_srcs
+  activemq/library/ActiveMQCPP.cpp
+  activemq/library/ActiveMQCPP.h
+  )
+source_group(activemq\\library FILES ${activemq_library_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_library_srcs})
+##########
+# activemq/state
+set(activemq_state_srcs
+  activemq/state/CommandVisitorAdapter.cpp
+  activemq/state/CommandVisitorAdapter.h
+  activemq/state/CommandVisitor.cpp
+  activemq/state/CommandVisitor.h
+  activemq/state/ConnectionState.cpp
+  activemq/state/ConnectionState.h
+  activemq/state/ConnectionStateTracker.cpp
+  activemq/state/ConnectionStateTracker.h
+  activemq/state/ConsumerState.cpp
+  activemq/state/ConsumerState.h
+  activemq/state/ProducerState.cpp
+  activemq/state/ProducerState.h
+  activemq/state/SessionState.cpp
+  activemq/state/SessionState.h
+  activemq/state/Tracked.cpp
+  activemq/state/Tracked.h
+  activemq/state/TransactionState.cpp
+  activemq/state/TransactionState.h
+  )
+source_group(activemq\\state FILES ${activemq_state_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_state_srcs})
+##########
+# activemq/threads
+set(activemq_threads_srcs
+  activemq/threads/CompositeTask.cpp
+  activemq/threads/CompositeTask.h
+  activemq/threads/CompositeTaskRunner.cpp
+  activemq/threads/CompositeTaskRunner.h
+  activemq/threads/DedicatedTaskRunner.cpp
+  activemq/threads/DedicatedTaskRunner.h
+  activemq/threads/Scheduler.cpp
+  activemq/threads/Scheduler.h
+  activemq/threads/SchedulerTimerTask.cpp
+  activemq/threads/SchedulerTimerTask.h
+  activemq/threads/Task.cpp
+  activemq/threads/Task.h
+  activemq/threads/TaskRunner.cpp
+  activemq/threads/TaskRunner.h
+  )
+source_group(activemq\\threads FILES ${activemq_threads_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_threads_srcs})
+##########
+# activemq/transport
+set(activemq_transport_srcs
+  activemq/transport/AbstractTransportFactory.cpp
+  activemq/transport/AbstractTransportFactory.h
+  activemq/transport/CompositeTransport.cpp
+  activemq/transport/CompositeTransport.h
+  activemq/transport/DefaultTransportListener.cpp
+  activemq/transport/DefaultTransportListener.h
+  activemq/transport/FutureResponse.cpp
+  activemq/transport/FutureResponse.h
+  activemq/transport/IOTransport.cpp
+  activemq/transport/IOTransport.h
+  activemq/transport/ResponseCallback.cpp
+  activemq/transport/ResponseCallback.h
+  activemq/transport/Transport.cpp
+  activemq/transport/TransportFactory.h
+  activemq/transport/TransportFilter.cpp
+  activemq/transport/TransportFilter.h
+  activemq/transport/Transport.h
+  activemq/transport/TransportListener.h
+  activemq/transport/TransportRegistry.cpp
+  activemq/transport/TransportRegistry.h
+  )
+source_group(activemq\\transport FILES ${activemq_transport_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_srcs})
+##########
+set(activemq_transport_correlator_srcs
+  activemq/transport/correlator/ResponseCorrelator.cpp
+  activemq/transport/correlator/ResponseCorrelator.h
+  )
+source_group(activemq\\transport\\correlator FILES ${activemq_transport_correlator_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_correlator_srcs})
+##########
+set(activemq_transport_failover_srcs
+  activemq/transport/failover/BackupTransport.cpp
+  activemq/transport/failover/BackupTransport.h
+  activemq/transport/failover/BackupTransportPool.cpp
+  activemq/transport/failover/BackupTransportPool.h
+  activemq/transport/failover/CloseTransportsTask.cpp
+  activemq/transport/failover/CloseTransportsTask.h
+  activemq/transport/failover/FailoverTransport.cpp
+  activemq/transport/failover/FailoverTransportFactory.cpp
+  activemq/transport/failover/FailoverTransportFactory.h
+  activemq/transport/failover/FailoverTransport.h
+  activemq/transport/failover/FailoverTransportListener.cpp
+  activemq/transport/failover/FailoverTransportListener.h
+  activemq/transport/failover/URIPool.cpp
+  activemq/transport/failover/URIPool.h
+  )
+source_group(activemq\\transport\\failover FILES ${activemq_transport_failover_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_failover_srcs})
+##########
+set(activemq_transport_inactivity_srcs
+  activemq/transport/inactivity/InactivityMonitor.cpp
+  activemq/transport/inactivity/InactivityMonitor.h
+  activemq/transport/inactivity/ReadChecker.cpp
+  activemq/transport/inactivity/ReadChecker.h
+  activemq/transport/inactivity/WriteChecker.cpp
+  activemq/transport/inactivity/WriteChecker.h
+  )
+source_group(activemq\\transport\\inactivity FILES ${activemq_transport_inactivity_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_inactivity_srcs})
+##########
+set(activemq_transport_logging_srcs
+  activemq/transport/logging/LoggingTransport.cpp
+  activemq/transport/logging/LoggingTransport.h
+  )
+source_group(activemq\\transport\\logging FILES ${activemq_transport_logging_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_logging_srcs})
+##########
+set(activemq_transport_mock_srcs
+  activemq/transport/mock/InternalCommandListener.cpp
+  activemq/transport/mock/InternalCommandListener.h
+  activemq/transport/mock/MockTransport.cpp
+  activemq/transport/mock/MockTransportFactory.cpp
+  activemq/transport/mock/MockTransportFactory.h
+  activemq/transport/mock/MockTransport.h
+  activemq/transport/mock/ResponseBuilder.cpp
+  activemq/transport/mock/ResponseBuilder.h
+  )
+source_group(activemq\\transport\\mock FILES ${activemq_transport_mock_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_mock_srcs})
+##########
+set(activemq_transport_tcp_srcs
+  activemq/transport/tcp/SslTransport.cpp
+  activemq/transport/tcp/SslTransportFactory.cpp
+  activemq/transport/tcp/SslTransportFactory.h
+  activemq/transport/tcp/SslTransport.h
+  activemq/transport/tcp/TcpTransport.cpp
+  activemq/transport/tcp/TcpTransportFactory.cpp
+  activemq/transport/tcp/TcpTransportFactory.h
+  activemq/transport/tcp/TcpTransport.h
+  )
+source_group(activemq\\transport\\tcp FILES ${activemq_transport_tcp_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_transport_tcp_srcs})
+##########
+# activemq/util
+set(activemq_util_srcs
+  activemq/util/ActiveMQMessageTransformation.cpp
+  activemq/util/ActiveMQMessageTransformation.h
+  activemq/util/ActiveMQProperties.cpp
+  activemq/util/ActiveMQProperties.h
+  activemq/util/AdvisorySupport.cpp
+  activemq/util/AdvisorySupport.h
+  activemq/util/CMSExceptionSupport.cpp
+  activemq/util/CMSExceptionSupport.h
+  activemq/util/CompositeData.cpp
+  activemq/util/CompositeData.h
+  activemq/util/Config.h
+  activemq/util/IdGenerator.cpp
+  activemq/util/IdGenerator.h
+  activemq/util/LongSequenceGenerator.cpp
+  activemq/util/LongSequenceGenerator.h
+  activemq/util/MarshallingSupport.cpp
+  activemq/util/MarshallingSupport.h
+  activemq/util/MemoryUsage.cpp
+  activemq/util/MemoryUsage.h
+  activemq/util/PrimitiveList.cpp
+  activemq/util/PrimitiveList.h
+  activemq/util/PrimitiveMap.cpp
+  activemq/util/PrimitiveMap.h
+  activemq/util/PrimitiveValueConverter.cpp
+  activemq/util/PrimitiveValueConverter.h
+  activemq/util/PrimitiveValueNode.cpp
+  activemq/util/PrimitiveValueNode.h
+  activemq/util/Service.cpp
+  activemq/util/Service.h
+  activemq/util/ServiceListener.cpp
+  activemq/util/ServiceListener.h
+  activemq/util/ServiceStopper.cpp
+  activemq/util/ServiceStopper.h
+  activemq/util/ServiceSupport.cpp
+  activemq/util/ServiceSupport.h
+  activemq/util/Suspendable.cpp
+  activemq/util/Suspendable.h
+  activemq/util/URISupport.cpp
+  activemq/util/URISupport.h
+  activemq/util/Usage.cpp
+  activemq/util/Usage.h
+  )
+source_group(activemq\\util FILES ${activemq_util_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_util_srcs})
+##########
+# activemq/wireformat
+set(activemq_wireformat_srcs
+  activemq/wireformat/MarshalAware.cpp
+  activemq/wireformat/MarshalAware.h
+  activemq/wireformat/WireFormat.cpp
+  activemq/wireformat/WireFormatFactory.cpp
+  activemq/wireformat/WireFormatFactory.h
+  activemq/wireformat/WireFormat.h
+  activemq/wireformat/WireFormatNegotiator.cpp
+  activemq/wireformat/WireFormatNegotiator.h
+  activemq/wireformat/WireFormatRegistry.cpp
+  activemq/wireformat/WireFormatRegistry.h
+  )
+source_group(activemq\\wireformat FILES ${activemq_wireformat_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_srcs})
+##########
+set(activemq_wireformat_openwire_srcs
+  activemq/wireformat/openwire/OpenWireFormat.cpp
+  activemq/wireformat/openwire/OpenWireFormatFactory.cpp
+  activemq/wireformat/openwire/OpenWireFormatFactory.h
+  activemq/wireformat/openwire/OpenWireFormat.h
+  activemq/wireformat/openwire/OpenWireFormatNegotiator.cpp
+  activemq/wireformat/openwire/OpenWireFormatNegotiator.h
+  activemq/wireformat/openwire/OpenWireResponseBuilder.cpp
+  activemq/wireformat/openwire/OpenWireResponseBuilder.h
+  )
+source_group(activemq\\wireformat\\openwire FILES ${activemq_wireformat_openwire_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_openwire_srcs})
+##########
+set(activemq_wireformat_openwire_marshal_srcs
+  activemq/wireformat/openwire/marshal/BaseDataStreamMarshaller.cpp
+  activemq/wireformat/openwire/marshal/BaseDataStreamMarshaller.h
+  activemq/wireformat/openwire/marshal/DataStreamMarshaller.cpp
+  activemq/wireformat/openwire/marshal/DataStreamMarshaller.h
+  activemq/wireformat/openwire/marshal/PrimitiveTypesMarshaller.cpp
+  activemq/wireformat/openwire/marshal/PrimitiveTypesMarshaller.h
+  )
+source_group(activemq\\wireformat\\openwire\\marshal FILES ${activemq_wireformat_openwire_marshal_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_openwire_marshal_srcs})
+##########
+set(activemq_wireformat_openwire_marshal_generated_srcs
+  activemq/wireformat/openwire/marshal/generated/ActiveMQBlobMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQBlobMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQBytesMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQBytesMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQDestinationMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQDestinationMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQMapMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQMapMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQObjectMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQObjectMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQQueueMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQQueueMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQStreamMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQStreamMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempDestinationMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempDestinationMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempQueueMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempQueueMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempTopicMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTempTopicMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTextMessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTextMessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTopicMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ActiveMQTopicMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/BaseCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/BaseCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/BrokerIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/BrokerIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/BrokerInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/BrokerInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConnectionControlMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConnectionControlMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConnectionErrorMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConnectionErrorMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConnectionIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConnectionIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConnectionInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConnectionInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConsumerControlMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConsumerControlMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConsumerIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConsumerIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ConsumerInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ConsumerInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ControlCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ControlCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/DataArrayResponseMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/DataArrayResponseMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/DataResponseMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/DataResponseMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/DestinationInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/DestinationInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/DiscoveryEventMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/DiscoveryEventMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ExceptionResponseMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ExceptionResponseMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/FlushCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/FlushCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/IntegerResponseMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/IntegerResponseMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/JournalQueueAckMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/JournalQueueAckMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/JournalTopicAckMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/JournalTopicAckMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/JournalTraceMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/JournalTraceMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/JournalTransactionMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/JournalTransactionMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/KeepAliveInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/KeepAliveInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/LastPartialCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/LastPartialCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/LocalTransactionIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/LocalTransactionIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MarshallerFactory.cpp
+  activemq/wireformat/openwire/marshal/generated/MarshallerFactory.h
+  activemq/wireformat/openwire/marshal/generated/MessageAckMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessageAckMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MessageDispatchMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessageDispatchMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MessageDispatchNotificationMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessageDispatchNotificationMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MessageIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessageIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MessageMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessageMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/MessagePullMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/MessagePullMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/NetworkBridgeFilterMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/NetworkBridgeFilterMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/PartialCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/PartialCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ProducerAckMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ProducerAckMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ProducerIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ProducerIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ProducerInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ProducerInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/RemoveInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/RemoveInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/RemoveSubscriptionInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/RemoveSubscriptionInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ReplayCommandMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ReplayCommandMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ResponseMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ResponseMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/SessionIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/SessionIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/SessionInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/SessionInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/ShutdownInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/ShutdownInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/SubscriptionInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/SubscriptionInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/TransactionIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/TransactionIdMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/TransactionInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/TransactionInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/WireFormatInfoMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/WireFormatInfoMarshaller.h
+  activemq/wireformat/openwire/marshal/generated/XATransactionIdMarshaller.cpp
+  activemq/wireformat/openwire/marshal/generated/XATransactionIdMarshaller.h
+  )
+source_group(activemq\\wireformat\\openwire\\marshal\\generated FILES ${activemq_wireformat_openwire_marshal_generated_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_openwire_marshal_generated_srcs})
+##########
+set(activemq_wireformat_openwire_utils_srcs
+  activemq/wireformat/openwire/utils/BooleanStream.cpp
+  activemq/wireformat/openwire/utils/BooleanStream.h
+  activemq/wireformat/openwire/utils/HexTable.cpp
+  activemq/wireformat/openwire/utils/HexTable.h
+  activemq/wireformat/openwire/utils/MessagePropertyInterceptor.cpp
+  activemq/wireformat/openwire/utils/MessagePropertyInterceptor.h
+  )
+source_group(activemq\\wireformat\\openwire\\utils FILES ${activemq_wireformat_openwire_utils_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_openwire_utils_srcs})
+##########
+set(activemq_wireformat_stomp_srcs
+  activemq/wireformat/stomp/StompCommandConstants.cpp
+  activemq/wireformat/stomp/StompCommandConstants.h
+  activemq/wireformat/stomp/StompFrame.cpp
+  activemq/wireformat/stomp/StompFrame.h
+  activemq/wireformat/stomp/StompHelper.cpp
+  activemq/wireformat/stomp/StompHelper.h
+  activemq/wireformat/stomp/StompWireFormat.cpp
+  activemq/wireformat/stomp/StompWireFormatFactory.cpp
+  activemq/wireformat/stomp/StompWireFormatFactory.h
+  activemq/wireformat/stomp/StompWireFormat.h
+  )
+source_group(activemq\\wireformat\\stomp FILES ${activemq_wireformat_stomp_srcs})
+list(APPEND ${lib_name}_libsrcs ${activemq_wireformat_stomp_srcs})
+##########
+# cms
+set(cms_srcs
+  cms/AsyncCallback.cpp
+  cms/AsyncCallback.h
+  cms/BytesMessage.cpp
+  cms/BytesMessage.h
+  cms/Closeable.cpp
+  cms/Closeable.h
+  cms/CMSException.cpp
+  cms/CMSException.h
+  cms/CMSProperties.cpp
+  cms/CMSProperties.h
+  cms/CMSSecurityException.cpp
+  cms/CMSSecurityException.h
+  cms/Config.h
+  cms/Connection.cpp
+  cms/ConnectionFactory.cpp
+  cms/ConnectionFactory.h
+  cms/Connection.h
+  cms/ConnectionMetaData.cpp
+  cms/ConnectionMetaData.h
+  cms/DeliveryMode.cpp
+  cms/DeliveryMode.h
+  cms/Destination.cpp
+  cms/DestinationEvent.cpp
+  cms/DestinationEvent.h
+  cms/Destination.h
+  cms/DestinationListener.cpp
+  cms/DestinationListener.h
+  cms/DestinationSource.cpp
+  cms/DestinationSource.h
+  cms/EnhancedConnection.cpp
+  cms/EnhancedConnection.h
+  cms/ExceptionListener.cpp
+  cms/ExceptionListener.h
+  cms/IllegalStateException.cpp
+  cms/IllegalStateException.h
+  cms/InvalidClientIdException.cpp
+  cms/InvalidClientIdException.h
+  cms/InvalidDestinationException.cpp
+  cms/InvalidDestinationException.h
+  cms/InvalidSelectorException.cpp
+  cms/InvalidSelectorException.h
+  cms/MapMessage.cpp
+  cms/MapMessage.h
+  cms/MessageAvailableListener.cpp
+  cms/MessageAvailableListener.h
+  cms/MessageConsumer.cpp
+  cms/MessageConsumer.h
+  cms/Message.cpp
+  cms/MessageEnumeration.cpp
+  cms/MessageEnumeration.h
+  cms/MessageEOFException.cpp
+  cms/MessageEOFException.h
+  cms/MessageFormatException.cpp
+  cms/MessageFormatException.h
+  cms/Message.h
+  cms/MessageListener.cpp
+  cms/MessageListener.h
+  cms/MessageNotReadableException.cpp
+  cms/MessageNotReadableException.h
+  cms/MessageNotWriteableException.cpp
+  cms/MessageNotWriteableException.h
+  cms/MessageProducer.cpp
+  cms/MessageProducer.h
+  cms/MessageTransformer.cpp
+  cms/MessageTransformer.h
+  cms/ObjectMessage.cpp
+  cms/ObjectMessage.h
+  cms/QueueBrowser.cpp
+  cms/QueueBrowser.h
+  cms/Queue.cpp
+  cms/Queue.h
+  cms/ResourceAllocationException.cpp
+  cms/ResourceAllocationException.h
+  cms/Session.cpp
+  cms/Session.h
+  cms/Startable.cpp
+  cms/Startable.h
+  cms/Stoppable.cpp
+  cms/Stoppable.h
+  cms/StreamMessage.cpp
+  cms/StreamMessage.h
+  cms/TemporaryQueue.cpp
+  cms/TemporaryQueue.h
+  cms/TemporaryTopic.cpp
+  cms/TemporaryTopic.h
+  cms/TextMessage.cpp
+  cms/TextMessage.h
+  cms/Topic.cpp
+  cms/Topic.h
+  cms/TransactionInProgressException.cpp
+  cms/TransactionInProgressException.h
+  cms/TransactionRolledBackException.cpp
+  cms/TransactionRolledBackException.h
+  cms/UnsupportedOperationException.cpp
+  cms/UnsupportedOperationException.h
+  cms/XAConnection.cpp
+  cms/XAConnectionFactory.cpp
+  cms/XAConnectionFactory.h
+  cms/XAConnection.h
+  cms/XAException.cpp
+  cms/XAException.h
+  cms/XAResource.cpp
+  cms/XAResource.h
+  cms/XASession.cpp
+  cms/XASession.h
+  cms/Xid.cpp
+  cms/Xid.h
+  )
+source_group(cms FILES ${cms_srcs})
+list(APPEND ${lib_name}_libsrcs ${cms_srcs})
+##########
+# decaf/internal
+set(decaf_internal_srcs
+  decaf/internal/AprPool.cpp
+  decaf/internal/AprPool.h
+  decaf/internal/DecafRuntime.cpp
+  decaf/internal/DecafRuntime.h
+  )
+source_group(decaf\\internal FILES ${decaf_internal_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_srcs})
+##########
+set(decaf_internal_io_srcs
+  decaf/internal/io/StandardErrorOutputStream.cpp
+  decaf/internal/io/StandardErrorOutputStream.h
+  decaf/internal/io/StandardInputStream.cpp
+  decaf/internal/io/StandardInputStream.h
+  decaf/internal/io/StandardOutputStream.cpp
+  decaf/internal/io/StandardOutputStream.h
+  )
+source_group(decaf\\internal\\io FILES ${decaf_internal_io_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_io_srcs})
+##########
+set(decaf_internal_net_srcs
+  decaf/internal/net/DefaultServerSocketFactory.cpp
+  decaf/internal/net/DefaultServerSocketFactory.h
+  decaf/internal/net/DefaultSocketFactory.cpp
+  decaf/internal/net/DefaultSocketFactory.h
+  decaf/internal/net/Network.cpp
+  decaf/internal/net/Network.h
+  decaf/internal/net/SocketFileDescriptor.cpp
+  decaf/internal/net/SocketFileDescriptor.h
+  decaf/internal/net/URIEncoderDecoder.cpp
+  decaf/internal/net/URIEncoderDecoder.h
+  decaf/internal/net/URIHelper.cpp
+  decaf/internal/net/URIHelper.h
+  decaf/internal/net/URIType.cpp
+  decaf/internal/net/URIType.h
+  decaf/internal/net/URLStreamHandlerManager.cpp
+  decaf/internal/net/URLStreamHandlerManager.h
+  decaf/internal/net/URLType.cpp
+  decaf/internal/net/URLType.h
+  decaf/internal/net/URLUtils.cpp
+  decaf/internal/net/URLUtils.h
+  )
+source_group(decaf\\internal\\net FILES ${decaf_internal_net_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_srcs})
+##########
+set(decaf_internal_net_file_srcs
+  decaf/internal/net/file/FileHandler.cpp
+  decaf/internal/net/file/FileHandler.h
+  )
+source_group(decaf\\internal\\net\\file FILES ${decaf_internal_net_file_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_file_srcs})
+##########
+set(decaf_internal_net_http_srcs
+  decaf/internal/net/http/HttpHandler.cpp
+  decaf/internal/net/http/HttpHandler.h
+  )
+source_group(decaf\\internal\\net\\http FILES ${decaf_internal_net_http_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_http_srcs})
+##########
+set(decaf_internal_net_https_srcs
+  decaf/internal/net/https/HttpsHandler.cpp
+  decaf/internal/net/https/HttpsHandler.h
+  )
+source_group(decaf\\internal\\net\\https FILES ${decaf_internal_net_https_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_https_srcs})
+##########
+set(decaf_internal_net_ssl_srcs
+  decaf/internal/net/ssl/DefaultSSLContext.cpp
+  decaf/internal/net/ssl/DefaultSSLContext.h
+  decaf/internal/net/ssl/DefaultSSLServerSocketFactory.cpp
+  decaf/internal/net/ssl/DefaultSSLServerSocketFactory.h
+  decaf/internal/net/ssl/DefaultSSLSocketFactory.cpp
+  decaf/internal/net/ssl/DefaultSSLSocketFactory.h
+  )
+source_group(decaf\\internal\\net\\ssl FILES ${decaf_internal_net_ssl_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_ssl_srcs})
+##########
+set(decaf_internal_net_ssl_openssl_srcs
+  decaf/internal/net/ssl/openssl/OpenSSLContextSpi.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLContextSpi.h
+  decaf/internal/net/ssl/openssl/OpenSSLParameters.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLParameters.h
+  decaf/internal/net/ssl/openssl/OpenSSLServerSocket.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLServerSocketFactory.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLServerSocketFactory.h
+  decaf/internal/net/ssl/openssl/OpenSSLServerSocket.h
+  decaf/internal/net/ssl/openssl/OpenSSLSocket.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLSocketException.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLSocketException.h
+  decaf/internal/net/ssl/openssl/OpenSSLSocketFactory.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLSocketFactory.h
+  decaf/internal/net/ssl/openssl/OpenSSLSocket.h
+  decaf/internal/net/ssl/openssl/OpenSSLSocketInputStream.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLSocketInputStream.h
+  decaf/internal/net/ssl/openssl/OpenSSLSocketOutputStream.cpp
+  decaf/internal/net/ssl/openssl/OpenSSLSocketOutputStream.h
+  )
+source_group(decaf\\internal\\net\\ssl\\openssl FILES ${decaf_internal_net_ssl_openssl_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_ssl_openssl_srcs})
+##########
+set(decaf_internal_net_tcp_srcs
+  decaf/internal/net/tcp/TcpSocket.cpp
+  decaf/internal/net/tcp/TcpSocket.h
+  decaf/internal/net/tcp/TcpSocketInputStream.cpp
+  decaf/internal/net/tcp/TcpSocketInputStream.h
+  decaf/internal/net/tcp/TcpSocketOutputStream.cpp
+  decaf/internal/net/tcp/TcpSocketOutputStream.h
+  )
+source_group(decaf\\internal\\net\\tcp FILES ${decaf_internal_net_tcp_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_net_tcp_srcs})
+##########
+set(decaf_internal_nio_srcs
+  decaf/internal/nio/BufferFactory.cpp
+  decaf/internal/nio/BufferFactory.h
+  decaf/internal/nio/ByteArrayBuffer.cpp
+  decaf/internal/nio/ByteArrayBuffer.h
+  decaf/internal/nio/CharArrayBuffer.cpp
+  decaf/internal/nio/CharArrayBuffer.h
+  decaf/internal/nio/DoubleArrayBuffer.cpp
+  decaf/internal/nio/DoubleArrayBuffer.h
+  decaf/internal/nio/FloatArrayBuffer.cpp
+  decaf/internal/nio/FloatArrayBuffer.h
+  decaf/internal/nio/IntArrayBuffer.cpp
+  decaf/internal/nio/IntArrayBuffer.h
+  decaf/internal/nio/LongArrayBuffer.cpp
+  decaf/internal/nio/LongArrayBuffer.h
+  decaf/internal/nio/ShortArrayBuffer.cpp
+  decaf/internal/nio/ShortArrayBuffer.h
+  )
+source_group(decaf\\internal\\nio FILES ${decaf_internal_nio_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_nio_srcs})
+##########
+set(decaf_internal_security_srcs
+  decaf/internal/security/Engine.cpp
+  decaf/internal/security/Engine.h
+  decaf/internal/security/SecurityRuntime.cpp
+  decaf/internal/security/SecurityRuntime.h
+  decaf/internal/security/ServiceRegistry.cpp
+  decaf/internal/security/ServiceRegistry.h
+  )
+source_group(decaf\\internal\\security FILES ${decaf_internal_security_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_security_srcs})
+##########
+set(decaf_internal_security_provider_srcs
+  decaf/internal/security/provider/DefaultMessageDigestProviderService.cpp
+  decaf/internal/security/provider/DefaultMessageDigestProviderService.h
+  decaf/internal/security/provider/DefaultProvider.cpp
+  decaf/internal/security/provider/DefaultProvider.h
+  decaf/internal/security/provider/DefaultSecureRandomProviderService.cpp
+  decaf/internal/security/provider/DefaultSecureRandomProviderService.h
+  )
+source_group(decaf\\internal\\security\\provider FILES ${decaf_internal_security_provider_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_security_provider_srcs})
+##########
+set(decaf_internal_security_provider_crypto_srcs
+  decaf/internal/security/provider/crypto/MD4MessageDigestSpi.cpp
+  decaf/internal/security/provider/crypto/MD4MessageDigestSpi.h
+  decaf/internal/security/provider/crypto/MD5MessageDigestSpi.cpp
+  decaf/internal/security/provider/crypto/MD5MessageDigestSpi.h
+  decaf/internal/security/provider/crypto/SHA1MessageDigestSpi.cpp
+  decaf/internal/security/provider/crypto/SHA1MessageDigestSpi.h
+  )
+source_group(decaf\\internal\\security\\provider\\crypto FILES ${decaf_internal_security_provider_crypto_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_security_provider_crypto_srcs})
+##########
+set(decaf_internal_security_unix_srcs
+  decaf/internal/security/unix/SecureRandomImpl.cpp
+  decaf/internal/security/unix/SecureRandomImpl.h
+  )
+source_group(decaf\\internal\\security\\unix FILES ${decaf_internal_security_unix_srcs})
+if(UNIX)
+  list(APPEND ${lib_name}_libsrcs ${decaf_internal_security_unix_srcs})
+endif()
+##########
+set(decaf_internal_security_windows_srcs
+  decaf/internal/security/windows/SecureRandomImpl.cpp
+  decaf/internal/security/windows/SecureRandomImpl.h
+  )
+source_group(decaf\\internal\\security\\windows FILES ${decaf_internal_security_windows_srcs})
+if(WIN32)
+  list(APPEND ${lib_name}_libsrcs ${decaf_internal_security_windows_srcs})
+endif()
+##########
+set(decaf_internal_util_srcs
+  decaf/internal/util/ByteArrayAdapter.cpp
+  decaf/internal/util/ByteArrayAdapter.h
+  decaf/internal/util/GenericResource.cpp
+  decaf/internal/util/GenericResource.h
+  decaf/internal/util/HexStringParser.cpp
+  decaf/internal/util/HexStringParser.h
+  decaf/internal/util/Resource.cpp
+  decaf/internal/util/Resource.h
+  decaf/internal/util/ResourceLifecycleManager.cpp
+  decaf/internal/util/ResourceLifecycleManager.h
+  decaf/internal/util/StringUtils.cpp
+  decaf/internal/util/StringUtils.h
+  decaf/internal/util/TimerTaskHeap.cpp
+  decaf/internal/util/TimerTaskHeap.h
+  )
+source_group(decaf\\internal\\util FILES ${decaf_internal_util_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_util_srcs})
+##########
+set(decaf_internal_util_concurrent_srcs
+  decaf/internal/util/concurrent/Atomics.h
+  decaf/internal/util/concurrent/ExecutorsSupport.cpp
+  decaf/internal/util/concurrent/ExecutorsSupport.h
+  decaf/internal/util/concurrent/PlatformThread.h
+  decaf/internal/util/concurrent/SynchronizableImpl.cpp
+  decaf/internal/util/concurrent/SynchronizableImpl.h
+  decaf/internal/util/concurrent/Threading.cpp
+  decaf/internal/util/concurrent/Threading.h
+  decaf/internal/util/concurrent/ThreadingTypes.h
+  decaf/internal/util/concurrent/ThreadLocalImpl.cpp
+  decaf/internal/util/concurrent/ThreadLocalImpl.h
+  decaf/internal/util/concurrent/Transferer.h
+  decaf/internal/util/concurrent/TransferQueue.h
+  decaf/internal/util/concurrent/TransferStack.h
+  )
+source_group(decaf\\internal\\util\\concurrent FILES ${decaf_internal_util_concurrent_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_util_concurrent_srcs})
+##########
+set(decaf_internal_util_concurrent_unix_srcs
+  decaf/internal/util/concurrent/unix/Atomics.cpp
+  decaf/internal/util/concurrent/unix/PlatformDefs.h
+  decaf/internal/util/concurrent/unix/PlatformThread.cpp
+  )
+source_group(decaf\\internal\\util\\concurrent\\unix FILES ${decaf_internal_util_concurrent_unix_srcs})
+if(UNIX)
+  list(APPEND ${lib_name}_libsrcs ${decaf_internal_util_concurrent_unix_srcs})
+endif()
+##########
+set(decaf_internal_util_concurrent_windows_srcs
+  decaf/internal/util/concurrent/windows/Atomics.cpp
+  decaf/internal/util/concurrent/windows/PlatformDefs.h
+  decaf/internal/util/concurrent/windows/PlatformThread.cpp
+  )
+source_group(decaf\\internal\\util\\concurrent\\windows FILES ${decaf_internal_util_concurrent_windows_srcs})
+if(WIN32)
+  list(APPEND ${lib_name}_libsrcs ${decaf_internal_util_concurrent_windows_srcs})
+endif()
+##########
+set(decaf_internal_util_zip_srcs
+  decaf/internal/util/zip/adler32.c
+  decaf/internal/util/zip/crc32.c
+  decaf/internal/util/zip/crc32.h
+  decaf/internal/util/zip/deflate.c
+  decaf/internal/util/zip/deflate.h
+  decaf/internal/util/zip/gzclose.c
+  decaf/internal/util/zip/gzguts.h
+  decaf/internal/util/zip/gzlib.c
+  decaf/internal/util/zip/gzread.c
+  decaf/internal/util/zip/gzwrite.c
+  decaf/internal/util/zip/infback.c
+  decaf/internal/util/zip/inffast.c
+  decaf/internal/util/zip/inffast.h
+  decaf/internal/util/zip/inffixed.h
+  decaf/internal/util/zip/inflate.c
+  decaf/internal/util/zip/inflate.h
+  decaf/internal/util/zip/inftrees.c
+  decaf/internal/util/zip/inftrees.h
+  decaf/internal/util/zip/trees.c
+  decaf/internal/util/zip/trees.h
+  decaf/internal/util/zip/uncompr.c
+  decaf/internal/util/zip/zconf.h
+  decaf/internal/util/zip/zlib.h
+  decaf/internal/util/zip/zutil.c
+  decaf/internal/util/zip/zutil.h
+  )
+source_group(decaf\\internal\\util\\zip FILES ${decaf_internal_util_zip_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_internal_util_zip_srcs})
+##########
+# decaf/io
+set(decaf_io_srcs
+  decaf/io/BlockingByteArrayInputStream.cpp
+  decaf/io/BlockingByteArrayInputStream.h
+  decaf/io/BufferedInputStream.cpp
+  decaf/io/BufferedInputStream.h
+  decaf/io/BufferedOutputStream.cpp
+  decaf/io/BufferedOutputStream.h
+  decaf/io/ByteArrayInputStream.cpp
+  decaf/io/ByteArrayInputStream.h
+  decaf/io/ByteArrayOutputStream.cpp
+  decaf/io/ByteArrayOutputStream.h
+  decaf/io/Closeable.cpp
+  decaf/io/Closeable.h
+  decaf/io/DataInput.cpp
+  decaf/io/DataInput.h
+  decaf/io/DataInputStream.cpp
+  decaf/io/DataInputStream.h
+  decaf/io/DataOutput.cpp
+  decaf/io/DataOutput.h
+  decaf/io/DataOutputStream.cpp
+  decaf/io/DataOutputStream.h
+  decaf/io/EOFException.cpp
+  decaf/io/EOFException.h
+  decaf/io/FileDescriptor.cpp
+  decaf/io/FileDescriptor.h
+  decaf/io/FilterInputStream.cpp
+  decaf/io/FilterInputStream.h
+  decaf/io/FilterOutputStream.cpp
+  decaf/io/FilterOutputStream.h
+  decaf/io/Flushable.cpp
+  decaf/io/Flushable.h
+  decaf/io/InputStream.cpp
+  decaf/io/InputStream.h
+  decaf/io/InputStreamReader.cpp
+  decaf/io/InputStreamReader.h
+  decaf/io/InterruptedIOException.cpp
+  decaf/io/InterruptedIOException.h
+  decaf/io/IOException.cpp
+  decaf/io/IOException.h
+  decaf/io/OutputStream.cpp
+  decaf/io/OutputStream.h
+  decaf/io/OutputStreamWriter.cpp
+  decaf/io/OutputStreamWriter.h
+  decaf/io/PushbackInputStream.cpp
+  decaf/io/PushbackInputStream.h
+  decaf/io/Reader.cpp
+  decaf/io/Reader.h
+  decaf/io/UnsupportedEncodingException.cpp
+  decaf/io/UnsupportedEncodingException.h
+  decaf/io/UTFDataFormatException.cpp
+  decaf/io/UTFDataFormatException.h
+  decaf/io/Writer.cpp
+  decaf/io/Writer.h
+  )
+source_group(decaf\\io FILES ${decaf_io_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_io_srcs})
+##########
+# decaf/lang
+set(decaf_lang_srcs
+  decaf/lang/AbstractStringBuilder.cpp
+  decaf/lang/AbstractStringBuilder.h
+  decaf/lang/Appendable.cpp
+  decaf/lang/Appendable.h
+  decaf/lang/ArrayPointer.h
+  decaf/lang/Boolean.cpp
+  decaf/lang/Boolean.h
+  decaf/lang/Byte.cpp
+  decaf/lang/Byte.h
+  decaf/lang/Character.cpp
+  decaf/lang/Character.h
+  decaf/lang/CharSequence.cpp
+  decaf/lang/CharSequence.h
+  decaf/lang/Comparable.cpp
+  decaf/lang/Comparable.h
+  decaf/lang/Double.cpp
+  decaf/lang/Double.h
+  decaf/lang/Exception.cpp
+  decaf/lang/Exception.h
+  decaf/lang/Float.cpp
+  decaf/lang/Float.h
+  decaf/lang/Integer.cpp
+  decaf/lang/Integer.h
+  decaf/lang/Iterable.cpp
+  decaf/lang/Iterable.h
+  decaf/lang/Long.cpp
+  decaf/lang/Long.h
+  decaf/lang/Math.cpp
+  decaf/lang/Math.h
+  decaf/lang/Number.cpp
+  decaf/lang/Number.h
+  decaf/lang/Pointer.h
+  decaf/lang/Readable.cpp
+  decaf/lang/Readable.h
+  decaf/lang/Runnable.cpp
+  decaf/lang/Runnable.h
+  decaf/lang/Runtime.cpp
+  decaf/lang/Runtime.h
+  decaf/lang/Short.cpp
+  decaf/lang/Short.h
+  decaf/lang/StringBuffer.cpp
+  decaf/lang/StringBuffer.h
+  decaf/lang/StringBuilder.cpp
+  decaf/lang/StringBuilder.h
+  decaf/lang/String.cpp
+  decaf/lang/String.h
+  decaf/lang/System.cpp
+  decaf/lang/System.h
+  decaf/lang/Thread.cpp
+  decaf/lang/ThreadGroup.cpp
+  decaf/lang/ThreadGroup.h
+  decaf/lang/Thread.h
+  decaf/lang/ThreadLocal.cpp
+  decaf/lang/ThreadLocal.h
+  decaf/lang/Throwable.cpp
+  decaf/lang/Throwable.h
+  decaf/lang/Types.cpp
+  decaf/lang/Types.h
+  )
+source_group(decaf\\lang FILES ${decaf_lang_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_lang_srcs})
+##########
+set(decaf_lang_exceptions_srcs
+  decaf/lang/exceptions/ArrayIndexOutOfBoundsException.cpp
+  decaf/lang/exceptions/ArrayIndexOutOfBoundsException.h
+  decaf/lang/exceptions/ClassCastException.cpp
+  decaf/lang/exceptions/ClassCastException.h
+  decaf/lang/exceptions/CloneNotSupportedException.cpp
+  decaf/lang/exceptions/CloneNotSupportedException.h
+  decaf/lang/exceptions/ExceptionDefines.h
+  decaf/lang/exceptions/IllegalArgumentException.cpp
+  decaf/lang/exceptions/IllegalArgumentException.h
+  decaf/lang/exceptions/IllegalMonitorStateException.cpp
+  decaf/lang/exceptions/IllegalMonitorStateException.h
+  decaf/lang/exceptions/IllegalStateException.cpp
+  decaf/lang/exceptions/IllegalStateException.h
+  decaf/lang/exceptions/IllegalThreadStateException.cpp
+  decaf/lang/exceptions/IllegalThreadStateException.h
+  decaf/lang/exceptions/IndexOutOfBoundsException.cpp
+  decaf/lang/exceptions/IndexOutOfBoundsException.h
+  decaf/lang/exceptions/InterruptedException.cpp
+  decaf/lang/exceptions/InterruptedException.h
+  decaf/lang/exceptions/InvalidStateException.cpp
+  decaf/lang/exceptions/InvalidStateException.h
+  decaf/lang/exceptions/NegativeArraySizeException.cpp
+  decaf/lang/exceptions/NegativeArraySizeException.h
+  decaf/lang/exceptions/NullPointerException.cpp
+  decaf/lang/exceptions/NullPointerException.h
+  decaf/lang/exceptions/NumberFormatException.cpp
+  decaf/lang/exceptions/NumberFormatException.h
+  decaf/lang/exceptions/OutOfMemoryError.cpp
+  decaf/lang/exceptions/OutOfMemoryError.h
+  decaf/lang/exceptions/RuntimeException.cpp
+  decaf/lang/exceptions/RuntimeException.h
+  decaf/lang/exceptions/SecurityException.cpp
+  decaf/lang/exceptions/SecurityException.h
+  decaf/lang/exceptions/StringIndexOutOfBoundsException.cpp
+  decaf/lang/exceptions/StringIndexOutOfBoundsException.h
+  decaf/lang/exceptions/UnsupportedOperationException.cpp
+  decaf/lang/exceptions/UnsupportedOperationException.h
+  )
+source_group(decaf\\lang\\exceptions FILES ${decaf_lang_exceptions_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_lang_exceptions_srcs})
+##########
+# decaf/net
+set(decaf_net_srcs
+  decaf/net/BindException.cpp
+  decaf/net/BindException.h
+  decaf/net/ConnectException.cpp
+  decaf/net/ConnectException.h
+  decaf/net/ContentHandlerFactory.cpp
+  decaf/net/ContentHandlerFactory.h
+  decaf/net/DatagramPacket.cpp
+  decaf/net/DatagramPacket.h
+  decaf/net/FileNameMap.cpp
+  decaf/net/FileNameMap.h
+  decaf/net/HttpRetryException.cpp
+  decaf/net/HttpRetryException.h
+  decaf/net/HttpURLConnection.cpp
+  decaf/net/HttpURLConnection.h
+  decaf/net/Inet4Address.cpp
+  decaf/net/Inet4Address.h
+  decaf/net/Inet6Address.cpp
+  decaf/net/Inet6Address.h
+  decaf/net/InetAddress.cpp
+  decaf/net/InetAddress.h
+  decaf/net/InetSocketAddress.cpp
+  decaf/net/InetSocketAddress.h
+  decaf/net/MalformedURLException.cpp
+  decaf/net/MalformedURLException.h
+  decaf/net/NoRouteToHostException.cpp
+  decaf/net/NoRouteToHostException.h
+  decaf/net/PortUnreachableException.cpp
+  decaf/net/PortUnreachableException.h
+  decaf/net/ProtocolException.cpp
+  decaf/net/ProtocolException.h
+  decaf/net/Proxy.cpp
+  decaf/net/Proxy.h
+  decaf/net/ServerSocket.cpp
+  decaf/net/ServerSocketFactory.cpp
+  decaf/net/ServerSocketFactory.h
+  decaf/net/ServerSocket.h
+  decaf/net/SocketAddress.cpp
+  decaf/net/SocketAddress.h
+  decaf/net/Socket.cpp
+  decaf/net/SocketError.cpp
+  decaf/net/SocketError.h
+  decaf/net/SocketException.cpp
+  decaf/net/SocketException.h
+  decaf/net/SocketFactory.cpp
+  decaf/net/SocketFactory.h
+  decaf/net/Socket.h
+  decaf/net/SocketImpl.cpp
+  decaf/net/SocketImplFactory.cpp
+  decaf/net/SocketImplFactory.h
+  decaf/net/SocketImpl.h
+  decaf/net/SocketOptions.cpp
+  decaf/net/SocketOptions.h
+  decaf/net/SocketTimeoutException.cpp
+  decaf/net/SocketTimeoutException.h
+  decaf/net/UnknownHostException.cpp
+  decaf/net/UnknownHostException.h
+  decaf/net/UnknownServiceException.cpp
+  decaf/net/UnknownServiceException.h
+  decaf/net/URI.cpp
+  decaf/net/URI.h
+  decaf/net/URISyntaxException.cpp
+  decaf/net/URISyntaxException.h
+  decaf/net/URLConnection.cpp
+  decaf/net/URLConnection.h
+  decaf/net/URL.cpp
+  decaf/net/URLDecoder.cpp
+  decaf/net/URLDecoder.h
+  decaf/net/URLEncoder.cpp
+  decaf/net/URLEncoder.h
+  decaf/net/URL.h
+  decaf/net/URLStreamHandler.cpp
+  decaf/net/URLStreamHandlerFactory.cpp
+  decaf/net/URLStreamHandlerFactory.h
+  decaf/net/URLStreamHandler.h
+  )
+source_group(decaf\\net FILES ${decaf_net_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_net_srcs})
+##########
+set(decaf_net_ssl_srcs
+  decaf/net/ssl/SSLContext.cpp
+  decaf/net/ssl/SSLContext.h
+  decaf/net/ssl/SSLContextSpi.cpp
+  decaf/net/ssl/SSLContextSpi.h
+  decaf/net/ssl/SSLParameters.cpp
+  decaf/net/ssl/SSLParameters.h
+  decaf/net/ssl/SSLServerSocket.cpp
+  decaf/net/ssl/SSLServerSocketFactory.cpp
+  decaf/net/ssl/SSLServerSocketFactory.h
+  decaf/net/ssl/SSLServerSocket.h
+  decaf/net/ssl/SSLSocket.cpp
+  decaf/net/ssl/SSLSocketFactory.cpp
+  decaf/net/ssl/SSLSocketFactory.h
+  decaf/net/ssl/SSLSocket.h
+  )
+source_group(decaf\\net\\ssl FILES ${decaf_net_ssl_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_net_ssl_srcs})
+##########
+# decaf/nio
+set(decaf_nio_srcs
+  decaf/nio/Buffer.cpp
+  decaf/nio/Buffer.h
+  decaf/nio/BufferOverflowException.cpp
+  decaf/nio/BufferOverflowException.h
+  decaf/nio/BufferUnderflowException.cpp
+  decaf/nio/BufferUnderflowException.h
+  decaf/nio/ByteBuffer.cpp
+  decaf/nio/ByteBuffer.h
+  decaf/nio/CharBuffer.cpp
+  decaf/nio/CharBuffer.h
+  decaf/nio/DoubleBuffer.cpp
+  decaf/nio/DoubleBuffer.h
+  decaf/nio/FloatBuffer.cpp
+  decaf/nio/FloatBuffer.h
+  decaf/nio/IntBuffer.cpp
+  decaf/nio/IntBuffer.h
+  decaf/nio/InvalidMarkException.cpp
+  decaf/nio/InvalidMarkException.h
+  decaf/nio/LongBuffer.cpp
+  decaf/nio/LongBuffer.h
+  decaf/nio/ReadOnlyBufferException.cpp
+  decaf/nio/ReadOnlyBufferException.h
+  decaf/nio/ShortBuffer.cpp
+  decaf/nio/ShortBuffer.h
+  )
+source_group(decaf\\nio FILES ${decaf_nio_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_nio_srcs})
+##########
+# decaf/security
+set(decaf_security_srcs
+  decaf/security/DigestException.cpp
+  decaf/security/DigestException.h
+  decaf/security/GeneralSecurityException.cpp
+  decaf/security/GeneralSecurityException.h
+  decaf/security/InvalidKeyException.cpp
+  decaf/security/InvalidKeyException.h
+  decaf/security/Key.cpp
+  decaf/security/KeyException.cpp
+  decaf/security/KeyException.h
+  decaf/security/Key.h
+  decaf/security/KeyManagementException.cpp
+  decaf/security/KeyManagementException.h
+  decaf/security/MessageDigest.cpp
+  decaf/security/MessageDigest.h
+  decaf/security/MessageDigestSpi.cpp
+  decaf/security/MessageDigestSpi.h
+  decaf/security/NoSuchAlgorithmException.cpp
+  decaf/security/NoSuchAlgorithmException.h
+  decaf/security/NoSuchProviderException.cpp
+  decaf/security/NoSuchProviderException.h
+  decaf/security/Principal.cpp
+  decaf/security/Principal.h
+  decaf/security/Provider.cpp
+  decaf/security/ProviderException.cpp
+  decaf/security/ProviderException.h
+  decaf/security/Provider.h
+  decaf/security/ProviderService.cpp
+  decaf/security/ProviderService.h
+  decaf/security/PublicKey.cpp
+  decaf/security/PublicKey.h
+  decaf/security/SecureRandom.cpp
+  decaf/security/SecureRandom.h
+  decaf/security/SecureRandomSpi.cpp
+  decaf/security/SecureRandomSpi.h
+  decaf/security/Security.cpp
+  decaf/security/Security.h
+  decaf/security/SecuritySpi.cpp
+  decaf/security/SecuritySpi.h
+  decaf/security/SignatureException.cpp
+  decaf/security/SignatureException.h
+  )
+source_group(decaf\\security FILES ${decaf_security_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_security_srcs})
+##########
+set(decaf_security_auth_x500_srcs
+  decaf/security/auth/x500/X500Principal.cpp
+  decaf/security/auth/x500/X500Principal.h
+  )
+source_group(decaf\\security\\auth\\x500 FILES ${decaf_security_auth_x500_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_security_auth_x500_srcs})
+##########
+set(decaf_security_cert_srcs
+  decaf/security/cert/Certificate.cpp
+  decaf/security/cert/CertificateEncodingException.cpp
+  decaf/security/cert/CertificateEncodingException.h
+  decaf/security/cert/CertificateException.cpp
+  decaf/security/cert/CertificateException.h
+  decaf/security/cert/CertificateExpiredException.cpp
+  decaf/security/cert/CertificateExpiredException.h
+  decaf/security/cert/Certificate.h
+  decaf/security/cert/CertificateNotYetValidException.cpp
+  decaf/security/cert/CertificateNotYetValidException.h
+  decaf/security/cert/CertificateParsingException.cpp
+  decaf/security/cert/CertificateParsingException.h
+  decaf/security/cert/X509Certificate.cpp
+  decaf/security/cert/X509Certificate.h
+  )
+source_group(decaf\\security\\cert FILES ${decaf_security_cert_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_security_cert_srcs})
+##########
+# decaf/util
+set(decaf_util_srcs
+  decaf/util/AbstractCollection.cpp
+  decaf/util/AbstractCollection.h
+  decaf/util/AbstractList.cpp
+  decaf/util/AbstractList.h
+  decaf/util/AbstractMap.cpp
+  decaf/util/AbstractMap.h
+  decaf/util/AbstractQueue.cpp
+  decaf/util/AbstractQueue.h
+  decaf/util/AbstractSequentialList.cpp
+  decaf/util/AbstractSequentialList.h
+  decaf/util/AbstractSet.cpp
+  decaf/util/AbstractSet.h
+  decaf/util/ArrayList.cpp
+  decaf/util/ArrayList.h
+  decaf/util/Arrays.cpp
+  decaf/util/Arrays.h
+  decaf/util/BitSet.cpp
+  decaf/util/BitSet.h
+  decaf/util/Collection.cpp
+  decaf/util/Collection.h
+  decaf/util/Collections.cpp
+  decaf/util/Collections.h
+  decaf/util/Comparator.cpp
+  decaf/util/Comparator.h
+  decaf/util/ConcurrentModificationException.cpp
+  decaf/util/ConcurrentModificationException.h
+  decaf/util/Config.h
+  decaf/util/Date.cpp
+  decaf/util/Date.h
+  decaf/util/Deque.cpp
+  decaf/util/Deque.h
+  decaf/util/HashCode.cpp
+  decaf/util/HashCode.h
+  decaf/util/HashMap.cpp
+  decaf/util/HashMap.h
+  decaf/util/HashSet.cpp
+  decaf/util/HashSet.h
+  decaf/util/Iterator.cpp
+  decaf/util/Iterator.h
+  decaf/util/LinkedHashMap.cpp
+  decaf/util/LinkedHashMap.h
+  decaf/util/LinkedHashSet.cpp
+  decaf/util/LinkedHashSet.h
+  decaf/util/LinkedList.cpp
+  decaf/util/LinkedList.h
+  decaf/util/List.cpp
+  decaf/util/List.h
+  decaf/util/ListIterator.cpp
+  decaf/util/ListIterator.h
+  decaf/util/LRUCache.cpp
+  decaf/util/LRUCache.h
+  decaf/util/Map.cpp
+  decaf/util/MapEntry.cpp
+  decaf/util/MapEntry.h
+  decaf/util/Map.h
+  decaf/util/NoSuchElementException.cpp
+  decaf/util/NoSuchElementException.h
+  decaf/util/PriorityQueue.cpp
+  decaf/util/PriorityQueue.h
+  decaf/util/Properties.cpp
+  decaf/util/Properties.h
+  decaf/util/Queue.cpp
+  decaf/util/Queue.h
+  decaf/util/Random.cpp
+  decaf/util/Random.h
+  decaf/util/Set.cpp
+  decaf/util/Set.h
+  decaf/util/StlList.cpp
+  decaf/util/StlList.h
+  decaf/util/StlMap.cpp
+  decaf/util/StlMap.h
+  decaf/util/StlQueue.cpp
+  decaf/util/StlQueue.h
+  decaf/util/StlSet.cpp
+  decaf/util/StlSet.h
+  decaf/util/StringTokenizer.cpp
+  decaf/util/StringTokenizer.h
+  decaf/util/Timer.cpp
+  decaf/util/Timer.h
+  decaf/util/TimerTask.cpp
+  decaf/util/TimerTask.h
+  decaf/util/UUID.cpp
+  decaf/util/UUID.h
+  )
+source_group(decaf\\util FILES ${decaf_util_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_srcs})
+##########
+set(decaf_util_comparators_srcs
+  decaf/util/comparators/Equals.cpp
+  decaf/util/comparators/Equals.h
+  decaf/util/comparators/Less.cpp
+  decaf/util/comparators/Less.h
+  )
+source_group(decaf\\util\\comparators FILES ${decaf_util_comparators_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_comparators_srcs})
+##########
+set(decaf_util_concurrent_srcs
+  decaf/util/concurrent/AbstractExecutorService.cpp
+  decaf/util/concurrent/AbstractExecutorService.h
+  decaf/util/concurrent/BlockingQueue.cpp
+  decaf/util/concurrent/BlockingQueue.h
+  decaf/util/concurrent/BrokenBarrierException.cpp
+  decaf/util/concurrent/BrokenBarrierException.h
+  decaf/util/concurrent/Callable.cpp
+  decaf/util/concurrent/Callable.h
+  decaf/util/concurrent/CancellationException.cpp
+  decaf/util/concurrent/CancellationException.h
+  decaf/util/concurrent/Concurrent.h
+  decaf/util/concurrent/ConcurrentHashMap.cpp
+  decaf/util/concurrent/ConcurrentHashMap.h
+  decaf/util/concurrent/ConcurrentMap.cpp
+  decaf/util/concurrent/ConcurrentMap.h
+  decaf/util/concurrent/ConcurrentStlMap.cpp
+  decaf/util/concurrent/ConcurrentStlMap.h
+  decaf/util/concurrent/CopyOnWriteArrayList.cpp
+  decaf/util/concurrent/CopyOnWriteArrayList.h
+  decaf/util/concurrent/CopyOnWriteArraySet.cpp
+  decaf/util/concurrent/CopyOnWriteArraySet.h
+  decaf/util/concurrent/CountDownLatch.cpp
+  decaf/util/concurrent/CountDownLatch.h
+  decaf/util/concurrent/Delayed.cpp
+  decaf/util/concurrent/Delayed.h
+  decaf/util/concurrent/ExecutionException.cpp
+  decaf/util/concurrent/ExecutionException.h
+  decaf/util/concurrent/Executor.cpp
+  decaf/util/concurrent/Executor.h
+  decaf/util/concurrent/Executors.cpp
+  decaf/util/concurrent/ExecutorService.cpp
+  decaf/util/concurrent/ExecutorService.h
+  decaf/util/concurrent/Executors.h
+  decaf/util/concurrent/Future.cpp
+  decaf/util/concurrent/Future.h
+  decaf/util/concurrent/FutureTask.cpp
+  decaf/util/concurrent/FutureTask.h
+  decaf/util/concurrent/LinkedBlockingQueue.cpp
+  decaf/util/concurrent/LinkedBlockingQueue.h
+  decaf/util/concurrent/Lock.cpp
+  decaf/util/concurrent/Lock.h
+  decaf/util/concurrent/Mutex.cpp
+  decaf/util/concurrent/Mutex.h
+  decaf/util/concurrent/RejectedExecutionException.cpp
+  decaf/util/concurrent/RejectedExecutionException.h
+  decaf/util/concurrent/RejectedExecutionHandler.cpp
+  decaf/util/concurrent/RejectedExecutionHandler.h
+  decaf/util/concurrent/RunnableFuture.cpp
+  decaf/util/concurrent/RunnableFuture.h
+  decaf/util/concurrent/Semaphore.cpp
+  decaf/util/concurrent/Semaphore.h
+  decaf/util/concurrent/Synchronizable.cpp
+  decaf/util/concurrent/Synchronizable.h
+  decaf/util/concurrent/SynchronousQueue.cpp
+  decaf/util/concurrent/SynchronousQueue.h
+  decaf/util/concurrent/ThreadFactory.cpp
+  decaf/util/concurrent/ThreadFactory.h
+  decaf/util/concurrent/ThreadPoolExecutor.cpp
+  decaf/util/concurrent/ThreadPoolExecutor.h
+  decaf/util/concurrent/TimeoutException.cpp
+  decaf/util/concurrent/TimeoutException.h
+  decaf/util/concurrent/TimeUnit.cpp
+  decaf/util/concurrent/TimeUnit.h
+  )
+source_group(decaf\\util\\concurrent FILES ${decaf_util_concurrent_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_concurrent_srcs})
+##########
+set(decaf_util_concurrent_atomic_srcs
+  decaf/util/concurrent/atomic/AtomicBoolean.cpp
+  decaf/util/concurrent/atomic/AtomicBoolean.h
+  decaf/util/concurrent/atomic/AtomicInteger.cpp
+  decaf/util/concurrent/atomic/AtomicInteger.h
+  decaf/util/concurrent/atomic/AtomicRefCounter.cpp
+  decaf/util/concurrent/atomic/AtomicRefCounter.h
+  decaf/util/concurrent/atomic/AtomicReference.cpp
+  decaf/util/concurrent/atomic/AtomicReference.h
+  )
+source_group(decaf\\util\\concurrent\\atomic FILES ${decaf_util_concurrent_atomic_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_concurrent_atomic_srcs})
+##########
+set(decaf_util_concurrent_locks_srcs
+  decaf/util/concurrent/locks/AbstractOwnableSynchronizer.cpp
+  decaf/util/concurrent/locks/AbstractOwnableSynchronizer.h
+  decaf/util/concurrent/locks/AbstractQueuedSynchronizer.cpp
+  decaf/util/concurrent/locks/AbstractQueuedSynchronizer.h
+  decaf/util/concurrent/locks/Condition.cpp
+  decaf/util/concurrent/locks/Condition.h
+  decaf/util/concurrent/locks/Lock.cpp
+  decaf/util/concurrent/locks/Lock.h
+  decaf/util/concurrent/locks/LockSupport.cpp
+  decaf/util/concurrent/locks/LockSupport.h
+  decaf/util/concurrent/locks/ReadWriteLock.cpp
+  decaf/util/concurrent/locks/ReadWriteLock.h
+  decaf/util/concurrent/locks/ReentrantLock.cpp
+  decaf/util/concurrent/locks/ReentrantLock.h
+  decaf/util/concurrent/locks/ReentrantReadWriteLock.cpp
+  decaf/util/concurrent/locks/ReentrantReadWriteLock.h
+  )
+source_group(decaf\\util\\concurrent\\locks FILES ${decaf_util_concurrent_locks_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_concurrent_locks_srcs})
+##########
+set(decaf_util_logging_srcs
+  decaf/util/logging/ConsoleHandler.cpp
+  decaf/util/logging/ConsoleHandler.h
+  decaf/util/logging/ErrorManager.cpp
+  decaf/util/logging/ErrorManager.h
+  decaf/util/logging/Filter.h
+  decaf/util/logging/Formatter.cpp
+  decaf/util/logging/Formatter.h
+  decaf/util/logging/Handler.cpp
+  decaf/util/logging/Handler.h
+  decaf/util/logging/Level.cpp
+  decaf/util/logging/Level.h
+  decaf/util/logging/LoggerCommon.h
+  decaf/util/logging/Logger.cpp
+  decaf/util/logging/LoggerDefines.h
+  decaf/util/logging/Logger.h
+  decaf/util/logging/LoggerHierarchy.cpp
+  decaf/util/logging/LoggerHierarchy.h
+  decaf/util/logging/LogManager.cpp
+  decaf/util/logging/LogManager.h
+  decaf/util/logging/LogRecord.cpp
+  decaf/util/logging/LogRecord.h
+  decaf/util/logging/LogWriter.cpp
+  decaf/util/logging/LogWriter.h
+  decaf/util/logging/MarkBlockLogger.h
+  decaf/util/logging/PropertiesChangeListener.h
+  decaf/util/logging/SimpleFormatter.cpp
+  decaf/util/logging/SimpleFormatter.h
+  decaf/util/logging/SimpleLogger.cpp
+  decaf/util/logging/SimpleLogger.h
+  decaf/util/logging/StreamHandler.cpp
+  decaf/util/logging/StreamHandler.h
+  decaf/util/logging/XMLFormatter.cpp
+  decaf/util/logging/XMLFormatter.h
+  )
+source_group(decaf\\util\\logging FILES ${decaf_util_logging_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_logging_srcs})
+##########
+set(decaf_util_zip_srcs
+  decaf/util/zip/Adler32.cpp
+  decaf/util/zip/Adler32.h
+  decaf/util/zip/CheckedInputStream.cpp
+  decaf/util/zip/CheckedInputStream.h
+  decaf/util/zip/CheckedOutputStream.cpp
+  decaf/util/zip/CheckedOutputStream.h
+  decaf/util/zip/Checksum.cpp
+  decaf/util/zip/Checksum.h
+  decaf/util/zip/CRC32.cpp
+  decaf/util/zip/CRC32.h
+  decaf/util/zip/DataFormatException.cpp
+  decaf/util/zip/DataFormatException.h
+  decaf/util/zip/Deflater.cpp
+  decaf/util/zip/Deflater.h
+  decaf/util/zip/DeflaterOutputStream.cpp
+  decaf/util/zip/DeflaterOutputStream.h
+  decaf/util/zip/Inflater.cpp
+  decaf/util/zip/Inflater.h
+  decaf/util/zip/InflaterInputStream.cpp
+  decaf/util/zip/InflaterInputStream.h
+  decaf/util/zip/ZipException.cpp
+  decaf/util/zip/ZipException.h
+  )
+source_group(decaf\\util\\zip FILES ${decaf_util_zip_srcs})
+list(APPEND ${lib_name}_libsrcs ${decaf_util_zip_srcs})
+#######################################
+# library
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_link_libraries(${lib_name} PUBLIC ${APR_LIBRARIES} ${OPENSSL_LIBRARIES})
+target_include_directories(${lib_name} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${lib_name}>
+  )
+if(TARGET xpro::crypto)
+  get_target_property(defs xpro::crypto INTERFACE_COMPILE_DEFINITIONS)
+  string(REPLACE "OPENSSL_API_COMPAT=0x10100000L" "OPENSSL_API_COMPAT=0x00908000L" newDefs "${defs}")
+  set_target_properties(xpro::crypto PROPERTIES INTERFACE_COMPILE_DEFINITIONS "${newDefs}")
+endif()
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${lib_name}
+  FILES_MATCHING PATTERN "*.h"
+  )
+set(targetsFile ${lib_name}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  )
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
