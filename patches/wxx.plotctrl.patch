diff --git a/art/ledgreen.xpm b/art/ledgreen.xpm
index fba2bda..453f51b 100644
--- a/art/ledgreen.xpm
+++ b/art/ledgreen.xpm
@@ -1,5 +1,5 @@
 /* XPM */
-static char * ledgreen_xpm[] = {
+static const char * ledgreen_xpm[] = {
 "15 15 99 2",
 "  	c None",
 ". 	c #012B00",
diff --git a/art/ledgrey.xpm b/art/ledgrey.xpm
index f0c3c2c..42469fc 100644
--- a/art/ledgrey.xpm
+++ b/art/ledgrey.xpm
@@ -1,5 +1,5 @@
 /* XPM */
-static char *ledgrey_xpm[]={
+static const char *ledgrey_xpm[]={
 "15 15 75 2",
 "Qt c None",
 ".# c #000000",
diff --git a/build/CMakeLists.txt b/build/CMakeLists.txt
new file mode 100644
index 0000000..3a88ded
--- /dev/null
+++ b/build/CMakeLists.txt
@@ -0,0 +1,64 @@
+set(lib_name plotctrl)
+#######################################
+set(plot_srcs
+  ../src/fourier.c
+  ../src/fparser.cpp
+  ../src/fpoptimizer.cc
+  ../src/lm_lsqr.cpp
+  ../src/plotctrl.cpp
+  ../src/plotcurv.cpp
+  ../src/plotdata.cpp
+  ../src/plotdraw.cpp
+  ../src/plotfunc.cpp
+  ../src/plotmark.cpp
+  ../src/plotprnt.cpp
+  )
+list(APPEND ${lib_name}_libsrcs ${plot_srcs})
+########################
+set(plot_hdrs
+  ../include/wx/plotctrl/fourier.h
+  ../include/wx/plotctrl/fparser.h
+  ../include/wx/plotctrl/lm_lsqr.h
+  ../include/wx/plotctrl/plotctrl.h
+  ../include/wx/plotctrl/plotcurv.h
+  ../include/wx/plotctrl/plotdata.h
+  ../include/wx/plotctrl/plotdefs.h
+  ../include/wx/plotctrl/plotdraw.h
+  ../include/wx/plotctrl/plotfunc.h
+  ../include/wx/plotctrl/plotmark.h
+  ../include/wx/plotctrl/plotprnt.h
+  )
+list(APPEND ${lib_name}_libsrcs ${plot_hdrs})
+#######################################
+if(DEFINED WX_SOURCE)
+  message(STATUS "WX_SOURCE: ${WX_SOURCE}") # passed-in via externpro
+endif()
+#######################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
+  PRIVATE
+  # wxplotctrl plotdraw.cpp needs to include wx/gtk/dcclient.h when building against gtk2
+  ${WX_SOURCE}/include # TODO should be removed when building against gtk2 becomes obsolete
+  )
+target_link_libraries(${lib_name} PUBLIC things)
+list(TRANSFORM WXX_OUTPUT_NAME REPLACE "@TARGET@" "${lib_name}")
+set_target_properties(${lib_name} PROPERTIES OUTPUT_NAME ${WXX_OUTPUT_NAME})
+#######################################
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(FILES ${plot_hdrs} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/wx/${lib_name})
+#######################################
+set(samples_plotctrl_srcs
+  ../samples/plotctrl/wxplotctrl.cpp
+  ../samples/plotctrl/wxplotctrl.rc
+  )
+foreach(sample
+  samples_plotctrl
+  )
+  add_executable(${sample} WIN32 ${${sample}_srcs})
+  target_link_libraries(${sample} PRIVATE ${lib_name})
+endforeach()
diff --git a/include/wx/plotctrl/plotctrl.h b/include/wx/plotctrl/plotctrl.h
index 26f3afb..30a701d 100644
--- a/include/wx/plotctrl/plotctrl.h
+++ b/include/wx/plotctrl/plotctrl.h
@@ -22,6 +22,7 @@
 #include "wx/plotctrl/plotmark.h"
 #include "wx/plotctrl/plotfunc.h"
 #include "wx/things/range.h"
+#include "wx/window.h"
 
 class WXDLLEXPORT wxDC;
 class WXDLLEXPORT wxNotifyEvent;
diff --git a/include/wx/plotctrl/plotcurv.h b/include/wx/plotctrl/plotcurv.h
index 6b8c9d5..73ca1a1 100644
--- a/include/wx/plotctrl/plotcurv.h
+++ b/include/wx/plotctrl/plotcurv.h
@@ -43,7 +43,7 @@ extern double LinearInterpolateX( double x0, double y0,
 //----------------------------------------------------------------------------
 
 // defines wxArrayDouble for use as necessary
-WX_DEFINE_USER_EXPORTED_ARRAY_DOUBLE(double, wxArrayDouble, class WXDLLIMPEXP_PLOTCTRL);
+//WX_DEFINE_USER_EXPORTED_ARRAY_DOUBLE(double, wxArrayDouble, class WXDLLIMPEXP_PLOTCTRL);
 
 // wxNullPlotBounds = wxRect2DDouble(0,0,0,0)
 WXDLLIMPEXP_DATA_PLOTCTRL(extern const wxRect2DDouble) wxNullPlotBounds;
@@ -102,7 +102,11 @@ public:
     wxArrayGenericPen m_pens;
     static wxArrayGenericPen sm_defaultPens;
 
+#if wxUSE_STD_CONTAINERS
+    wxArrayString       m_optionNames;
+#else
     wxSortedArrayString m_optionNames;
+#endif
     wxArrayString       m_optionValues;
 };
 
diff --git a/include/wx/plotctrl/plotdefs.h b/include/wx/plotctrl/plotdefs.h
index a794fec..c571a46 100644
--- a/include/wx/plotctrl/plotdefs.h
+++ b/include/wx/plotctrl/plotdefs.h
@@ -14,6 +14,7 @@
 
 #include "wx/defs.h"
 #include "wx/geometry.h"
+#include "wx/wxcrtvararg.h"
 
 // ----------------------------------------------------------------------------
 // DLLIMPEXP macros
diff --git a/include/wx/plotctrl/plotdraw.h b/include/wx/plotctrl/plotdraw.h
index 70d410e..6c3d748 100644
--- a/include/wx/plotctrl/plotdraw.h
+++ b/include/wx/plotctrl/plotdraw.h
@@ -20,6 +20,8 @@
 #include "wx/things/genergdi.h"
 #include "wx/things/range.h"
 
+#include <wx/font.h>
+
 class WXDLLEXPORT wxDC;
 
 class WXDLLIMPEXP_THINGS wxRangeIntSelection;
diff --git a/samples/plotctrl/wxplotctrl.cpp b/samples/plotctrl/wxplotctrl.cpp
index 18497c7..62b9523 100644
--- a/samples/plotctrl/wxplotctrl.cpp
+++ b/samples/plotctrl/wxplotctrl.cpp
@@ -240,7 +240,7 @@ void wxPlotCtrlFrame::OnMenu(wxCommandEvent& event)
                                     wxT(""),
                                     wxT(""),
                                     wxT("All files (*)|*"),
-                                    wxOPEN | wxFILE_MUST_EXIST);
+                                    wxFD_OPEN | wxFD_FILE_MUST_EXIST);
 
             if (fileDialog.ShowModal() == wxID_OK)
             {
diff --git a/samples/plotctrl/wxplotctrl.rc b/samples/plotctrl/wxplotctrl.rc
index 306a634..774fbfb 100644
--- a/samples/plotctrl/wxplotctrl.rc
+++ b/samples/plotctrl/wxplotctrl.rc
@@ -2,5 +2,5 @@
 
 #define wxUSE_NO_MANIFEST 0
 
-#include "wx/msw/wx.rc"
+//#include "wx/msw/wx.rc"
 
diff --git a/src/fourier.c b/src/fourier.c
index 8b72bb4..63a8fa0 100644
--- a/src/fourier.c
+++ b/src/fourier.c
@@ -67,7 +67,8 @@ unsigned NumberOfBitsNeeded ( unsigned PowerOfTwo )
             return i;
     }
 
-    return 0;
+    // unreachable code...
+    // return 0;
 }
 
 unsigned ReverseBits ( unsigned index, unsigned NumBits )
diff --git a/src/plotctrl.cpp b/src/plotctrl.cpp
index a8beb1c..7586fce 100644
--- a/src/plotctrl.cpp
+++ b/src/plotctrl.cpp
@@ -32,6 +32,7 @@
     #include "wx/textctrl.h"
 #endif // WX_PRECOMP
 
+#include "wx/dcclient.h"
 #include "wx/splitter.h"
 #include "wx/math.h"
 #include "wx/image.h"
@@ -298,7 +299,7 @@ void wxPlotCtrlArea::OnPaint( wxPaintEvent &WXUNUSED(event) )
     if (m_bitmap.Ok())
         dc.DrawBitmap(m_bitmap, 0, 0, false);
 
-    if (m_owner->GetCrossHairCursor() && m_owner->GetPlotAreaRect().Inside(m_mousePt))
+    if (m_owner->GetCrossHairCursor() && m_owner->GetPlotAreaRect().Contains(m_mousePt))
         m_owner->DrawCrosshairCursor( &dc, m_mousePt );
 
     m_owner->DrawMouseMarker(&dc, m_owner->GetAreaMouseMarker(), m_mouseRect);
@@ -576,8 +577,13 @@ bool wxPlotCtrl::Create( wxWindow *parent, wxWindowID win_id,
     {
         m_axisFontSize.x = 6;
         m_axisFontSize.y = 12;
+#if wxCHECK_VERSION(2,9,0) // concatenating mismatched strings
+        wxFAIL_MSG("Can't determine the font size for the axis! I'll guess.\n"
+                   "The display might be corrupted, however you may continue.");
+#else
         wxFAIL_MSG(wxT("Can't determine the font size for the axis! I'll guess.\n"
                        "The display might be corrupted, however you may continue."));
+#endif
     }
 
     m_xAxisDrawer->SetTickFont(axisFont);
@@ -643,7 +649,7 @@ void wxPlotCtrl::DrawActiveBitmap( wxDC* dc )
         int top  = m_yAxisScrollbar->GetRect().GetBottom();
         wxRect rect(left, top, size.x - left, size.y - top);
         // clear background
-        dc->SetBrush(wxBrush(GetBackgroundColour(), wxSOLID));
+        dc->SetBrush(wxBrush(GetBackgroundColour(), wxBRUSHSTYLE_SOLID));
         dc->SetPen(*wxTRANSPARENT_PEN);
         dc->DrawRectangle(rect);
         // center the bitmap
@@ -691,7 +697,7 @@ void wxPlotCtrl::SetPlotWinMouseCursor(int cursorid)
 {
     if (cursorid == m_mouse_cursorid) return;
     m_mouse_cursorid = cursorid;
-    SetCursor(wxCursor(cursorid));
+    SetCursor(wxCursor(static_cast<wxStockCursor>(cursorid)));
 }
 
 void wxPlotCtrl::OnMouse( wxMouseEvent &event )
@@ -705,9 +711,9 @@ void wxPlotCtrl::OnMouse( wxMouseEvent &event )
     wxSize size(GetClientSize());
     wxPoint mousePt(event.GetPosition());
 
-    if ((m_show_title  && m_titleRect.Inside(mousePt)) ||
-        (m_show_xlabel && m_xLabelRect.Inside(mousePt)) ||
-        (m_show_ylabel && m_yLabelRect.Inside(mousePt)))
+    if ((m_show_title  && m_titleRect.Contains(mousePt)) ||
+        (m_show_xlabel && m_xLabelRect.Contains(mousePt)) ||
+        (m_show_ylabel && m_yLabelRect.Contains(mousePt)))
     {
         SetPlotWinMouseCursor(wxCURSOR_IBEAM);
     }
@@ -716,11 +722,11 @@ void wxPlotCtrl::OnMouse( wxMouseEvent &event )
 
     if (event.ButtonDClick(1) && !IsTextCtrlShown())
     {
-        if (m_show_title && m_titleRect.Inside(mousePt))
+        if (m_show_title && m_titleRect.Contains(mousePt))
             ShowTextCtrl(wxPLOTCTRL_EDIT_TITLE, true);
-        else if (m_show_xlabel && m_xLabelRect.Inside(mousePt))
+        else if (m_show_xlabel && m_xLabelRect.Contains(mousePt))
             ShowTextCtrl(wxPLOTCTRL_EDIT_XAXIS, true);
-        else if (m_show_ylabel && m_yLabelRect.Inside(mousePt))
+        else if (m_show_ylabel && m_yLabelRect.Contains(mousePt))
             ShowTextCtrl(wxPLOTCTRL_EDIT_YAXIS, true);
     }
 }
@@ -2274,7 +2280,7 @@ void wxPlotCtrl::SetAreaMouseCursor(int cursorid)
     else if (cursorid == CURSOR_GRAB)
         m_area->SetCursor(s_grabCursor);
     else
-        m_area->SetCursor(wxCursor(cursorid));
+        m_area->SetCursor(wxCursor(static_cast<wxStockCursor>(cursorid)));
 }
 
 void wxPlotCtrl::OnSize( wxSizeEvent& )
@@ -2514,8 +2520,8 @@ void wxPlotCtrl::DrawAreaWindow( wxDC *dc, const wxRect &rect )
 
     dc->SetClippingRegion(refreshRect);
 
-    dc->SetBrush( wxBrush(GetBackgroundColour(), wxSOLID) );
-    dc->SetPen( wxPen(GetBorderColour(), m_area_border_width, wxSOLID) );
+    dc->SetBrush( wxBrush(GetBackgroundColour(), wxBRUSHSTYLE_SOLID) );
+    dc->SetPen( wxPen(GetBorderColour(), m_area_border_width, wxPENSTYLE_SOLID) );
     dc->DrawRectangle(clientRect);
 
     DrawTickMarks( dc, refreshRect );
@@ -2552,7 +2558,7 @@ void wxPlotCtrl::DrawAreaWindow( wxDC *dc, const wxRect &rect )
 
     // refresh border
     dc->SetBrush( *wxTRANSPARENT_BRUSH );
-    dc->SetPen( wxPen(GetBorderColour(), m_area_border_width, wxSOLID) );
+    dc->SetPen( wxPen(GetBorderColour(), m_area_border_width, wxPENSTYLE_SOLID) );
     dc->DrawRectangle(clientRect);
 
     dc->SetPen( wxNullPen );
@@ -2566,10 +2572,14 @@ void wxPlotCtrl::DrawMouseMarker( wxDC *dc, int type, const wxRect &rect )
     if ((rect.width == 0) || (rect.height == 0))
         return;
 
+#if wxCHECK_VERSION(2,9,0)
+    wxRasterOperationMode logical_fn = dc->GetLogicalFunction();
+#else
     int logical_fn = dc->GetLogicalFunction();
+#endif
     dc->SetLogicalFunction( wxINVERT );
     dc->SetBrush( *wxTRANSPARENT_BRUSH );
-    dc->SetPen(*wxThePenList->FindOrCreatePen(*wxBLACK, 1, wxDOT));
+    dc->SetPen(*wxThePenList->FindOrCreatePen(*wxBLACK, 1, wxPENSTYLE_DOT));
 
     switch (type)
     {
@@ -2614,7 +2624,11 @@ void wxPlotCtrl::DrawCrosshairCursor( wxDC *dc, const wxPoint &pos )
     wxCHECK_RET(dc, wxT("invalid window"));
 
     dc->SetPen(*wxBLACK_PEN);
+#if wxCHECK_VERSION(2,9,0)
+    wxRasterOperationMode logical_fn = dc->GetLogicalFunction();
+#else
     int logical_fn = dc->GetLogicalFunction();
+#endif
     dc->SetLogicalFunction( wxINVERT );
 
     dc->CrossHair(pos.x, pos.y);
@@ -2746,7 +2760,7 @@ void wxPlotCtrl::DrawCurveCursor( wxDC *dc )
 void wxPlotCtrl::DrawTickMarks( wxDC *dc, const wxRect& rect )
 {
     wxRect clientRect(GetPlotAreaRect());
-    dc->SetPen( wxPen(GetGridColour(), 1, wxSOLID) );
+    dc->SetPen( wxPen(GetGridColour(), 1, wxPENSTYLE_SOLID) );
 
     int xtick_length = GetDrawGrid() ? clientRect.height : 10;
     int ytick_length = GetDrawGrid() ? clientRect.width  : 10;
@@ -3330,7 +3344,7 @@ void wxPlotCtrl::ProcessAreaEVT_MOUSE_EVENTS( wxMouseEvent &event )
         // Move the origin
         if (m_area_mouse_func == wxPLOTCTRL_MOUSE_PAN)
         {
-            if (!m_areaClientRect.Inside(event.GetPosition()))
+            if (!m_areaClientRect.Contains(event.GetPosition()))
             {
                 StartMouseTimer(ID_AREA_TIMER);
             }
@@ -3514,12 +3528,12 @@ void wxPlotCtrl::OnChar(wxKeyEvent &event)
     switch (event.GetKeyCode())
     {
         // cursor keys moves the plot origin around
-        case WXK_LEFT  : SetOrigin(m_viewRect.GetLeft() - m_viewRect.m_width/10.0, m_viewRect.GetTop()); return;
-        case WXK_RIGHT : SetOrigin(m_viewRect.GetLeft() + m_viewRect.m_width/10.0, m_viewRect.GetTop()); return;
-        case WXK_UP    : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() + m_viewRect.m_height/10.0); return;
-        case WXK_DOWN  : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() - m_viewRect.m_height/10.0); return;
-        case WXK_PRIOR : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() + m_viewRect.m_height/2.0); return;
-        case WXK_NEXT  : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() - m_viewRect.m_height/2.0); return;
+        case WXK_LEFT      : SetOrigin(m_viewRect.GetLeft() - m_viewRect.m_width/10.0, m_viewRect.GetTop()); return;
+        case WXK_RIGHT     : SetOrigin(m_viewRect.GetLeft() + m_viewRect.m_width/10.0, m_viewRect.GetTop()); return;
+        case WXK_UP        : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() + m_viewRect.m_height/10.0); return;
+        case WXK_DOWN      : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() - m_viewRect.m_height/10.0); return;
+        case WXK_PAGEUP    : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() + m_viewRect.m_height/2.0); return;
+        case WXK_PAGEDOWN  : SetOrigin(m_viewRect.GetLeft(), m_viewRect.GetTop() - m_viewRect.m_height/2.0); return;
 
         // Center the plot on the cursor point, or 0,0
         case WXK_HOME :
diff --git a/src/plotcurv.cpp b/src/plotcurv.cpp
index 9f72820..790e6df 100644
--- a/src/plotcurv.cpp
+++ b/src/plotcurv.cpp
@@ -107,9 +107,9 @@ void InitPlotCurveDefaultPens()
     if (!s_init_default_pens)
     {
         s_init_default_pens = true;
-        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(  0, 0,   0), 1, wxSOLID ));
-        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(  0, 0, 255), 1, wxSOLID ));
-        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(255, 0,   0), 1, wxSOLID ));
+        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(  0, 0,   0), 1, wxPENSTYLE_SOLID ));
+        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(  0, 0, 255), 1, wxPENSTYLE_SOLID ));
+        wxPlotCurveRefData::sm_defaultPens.Add(wxGenericPen( wxGenericColour(255, 0,   0), 1, wxPENSTYLE_SOLID ));
     }
 }
 
@@ -236,7 +236,17 @@ int wxPlotCurve::SetOption(const wxString& name, const wxString& value, bool upd
     int n = M_PLOTCURVEDATA->m_optionNames.Index(name);
     if (n == wxNOT_FOUND)
     {
+#if wxUSE_STD_CONTAINERS
+        // following suggestion from wxWidgets "Container Classes" documentatation:
+        // http://docs.wxwidgets.org/3.0/overview_container.html#overview_container_std
+        // avoid use of wxSortedArrayString by using a normal array and called its
+        // Sort() method when needed
+        M_PLOTCURVEDATA->m_optionNames.Add(name);
+        M_PLOTCURVEDATA->m_optionNames.Sort();
+        n = M_PLOTCURVEDATA->m_optionNames.Index(name);
+#else
         n = M_PLOTCURVEDATA->m_optionNames.Add(name);
+#endif
         M_PLOTCURVEDATA->m_optionValues.Insert(value, n);
     }
     else if (update)
diff --git a/src/plotdata.cpp b/src/plotdata.cpp
index f452eed..37a4e86 100644
--- a/src/plotdata.cpp
+++ b/src/plotdata.cpp
@@ -774,9 +774,15 @@ bool wxPlotData::LoadFile( const wxString &filename, int x_col, int y_col, int o
                 while (select_cols && !stop_load )
                 {
                     wxString colStr = wxGetTextFromUser(
+#if wxCHECK_VERSION(2,9,0) // concatenating mismatched strings
+                        wxString::Format("Data file: '%s'\n%d columns found.\n"
+                                         "Enter x and y cols separated by a space starting from 1.\n"
+                                         "If x = y then x values are 0,1,2... and y is given col.", filename.c_str(), n),
+#else
                         wxString::Format(wxT("Data file: '%s'\n%d columns found.\n"
                                              "Enter x and y cols separated by a space starting from 1.\n"
                                              "If x = y then x values are 0,1,2... and y is given col."), filename.c_str(), n),
+#endif
                                              wxT("Enter two columns of data file to use"));
 
                     if (colStr.IsEmpty())
@@ -805,8 +811,9 @@ bool wxPlotData::LoadFile( const wxString &filename, int x_col, int y_col, int o
                             }
                             else
                             {
+                              //static_cast<int>(*)'s added by SC@SDL on 10/8/07 for Solaris wxplotctrl build:
                                 int ret = wxMessageBox(
-                                    wxString::Format(wxT("Invalid data columns '%d %d', limited to 1 to %d"), xcol+1, ycol+1, n),
+                                    wxString::Format(wxT("Invalid data columns '%d %d', limited to 1 to %d"), static_cast<int>(xcol+1), static_cast<int>(ycol+1), n),
                                     wxT("Invalid data columns"), wxOK|wxCANCEL|wxICON_ERROR);
                                 if (ret == wxCANCEL)
                                     stop_load = true;
@@ -836,11 +843,19 @@ bool wxPlotData::LoadFile( const wxString &filename, int x_col, int y_col, int o
                 }
 
                 wxMessageBox(
+#if wxCHECK_VERSION(2,9,0) // concatenating mismatched strings
+                    wxString::Format("Loading cols (%d,%d) aborted after %d points\n\n"
+                                     "First 100 characters of offending line number: %d\n"
+                                     "\"%s\"\n\n"
+                                     "# for comments, blank lines Ok, comma, tab, space for separators\n"
+                                     "7   4\n33  2.5e-2\n...\n",
+#else
                     wxString::Format(wxT("Loading cols (%d,%d) aborted after %d points\n\n"
                                          "First 100 characters of offending line number: %d\n"
                                          "\"%s\"\n\n"
                                          "# for comments, blank lines Ok, comma, tab, space for separators\n"
                                          "7   4\n33  2.5e-2\n...\n"),
+#endif
                                          x_col, y_col, points, line_number, wxstr.Left(100).c_str()),
                                          wxT("Error loading ")+filename, wxOK|wxICON_ERROR);
                 stop_load = true;
@@ -2906,8 +2921,8 @@ void wxPlotData::SetSymbol( wxPlotSymbol_Type type, wxPlotPen_Type colour_type,
     }
 }
 
-wxBitmap wxPlotData::CreateSymbol( wxPlotSymbol_Type type, wxPlotPen_Type colour_type, int width, int height,
-                                   const wxPen *pen, const wxBrush *brush)
+wxBitmap wxPlotData::CreateSymbol( wxPlotSymbol_Type type, wxPlotPen_Type WXUNUSED(colour_type), int width, int height,
+                                   const wxPen *WXUNUSED(pen), const wxBrush *WXUNUSED(brush))
 {
     wxBitmap b(width, height);
 
diff --git a/src/plotdraw.cpp b/src/plotdraw.cpp
index 1cf748c..7f320aa 100644
--- a/src/plotdraw.cpp
+++ b/src/plotdraw.cpp
@@ -23,6 +23,7 @@
     #include "wx/dcmemory.h"
 #endif // WX_PRECOMP
 
+#include "wx/dcclient.h"
 #include "wx/math.h"
 
 #include "wx/plotctrl/plotdraw.h"
@@ -54,11 +55,32 @@
 // Consts
 //-----------------------------------------------------------------------------
 
+#ifdef __WXGTK3__
+#undef wxPLOTCTRL_FAST_GRAPHICS
+#define wxPLOTCTRL_FAST_GRAPHICS 0
+#endif
+
 #if defined(__WXGTK__) && wxPLOTCTRL_FAST_GRAPHICS
 
 extern "C" {
     #include <gdk/gdk.h>
 }
+#if wxCHECK_VERSION(2,9,0)
+    #include <wx/gtk/dcclient.h>
+    #define INITIALIZE_FAST_GRAPHICS \
+        double dc_scale_x = 1, dc_scale_y = 1; \
+        dc->GetUserScale( &dc_scale_x, &dc_scale_y ); \
+        wxPoint dc_origin = dc->GetDeviceOrigin(); \
+        wxDCImpl *dcImpl = dc->GetImpl(); \
+        wxWindowDCImpl *winDC = wxDynamicCast(dcImpl, wxWindowDCImpl); \
+        GdkWindow *window = NULL; \
+        GdkGC     *pen = NULL; \
+        if (winDC && (dc_scale_x == 1.0) && (dc_scale_y == 1.0) && (dc_origin == wxPoint(0,0))) \
+        { \
+            window = winDC->m_gdkwindow; \
+            pen = winDC->m_penGC; \
+        }
+#else
     #define INITIALIZE_FAST_GRAPHICS \
         double dc_scale_x = 1, dc_scale_y = 1; \
         dc->GetUserScale( &dc_scale_x, &dc_scale_y ); \
@@ -71,6 +93,7 @@ extern "C" {
             window = winDC->m_window; \
             pen = winDC->m_penGC; \
         }
+#endif
 
     // inline void wxPLOTCTRL_DRAW_LINE(wxDC *dc, GdkWindow *win, GdkGC *pen, int x0, int y0, int x1, int y1)
     #define wxPLOTCTRL_DRAW_LINE(dc, win, pen, x0, y0, x1, y1) \
@@ -486,8 +509,8 @@ wxPlotDrawerAxisBase::wxPlotDrawerAxisBase(wxPlotCtrl* owner)
     m_tickColour  = wxGenericColour(0,0,0);
     m_labelColour = wxGenericColour(0,0,0);
 
-    m_tickPen         = wxGenericPen(m_tickColour, wxSOLID);
-    m_backgroundBrush = wxGenericBrush(wxGenericColour(255,255,255), wxSOLID);
+    m_tickPen         = wxGenericPen(m_tickColour, wxPENSTYLE_SOLID);
+    m_backgroundBrush = wxGenericBrush(wxGenericColour(255,255,255), wxBRUSHSTYLE_SOLID);
 }
 
 //-----------------------------------------------------------------------------
@@ -495,7 +518,7 @@ wxPlotDrawerAxisBase::wxPlotDrawerAxisBase(wxPlotCtrl* owner)
 //-----------------------------------------------------------------------------
 IMPLEMENT_ABSTRACT_CLASS(wxPlotDrawerArea, wxPlotDrawerBase)
 
-void wxPlotDrawerArea::Draw(wxDC *dc, bool refresh)
+void wxPlotDrawerArea::Draw(wxDC *WXUNUSED(dc), bool WXUNUSED(refresh))
 {
 }
 
