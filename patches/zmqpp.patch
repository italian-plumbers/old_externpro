diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0e2cc7a..d5e7cff 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,9 +11,10 @@
 #
 
 
-cmake_minimum_required(VERSION 2.8.12)
+cmake_minimum_required(VERSION 2.8.12...3.21)
 project(zmqpp)
 enable_testing()
+include(flags OPTIONAL)
 
 # prepare C++11
 set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
@@ -49,6 +50,15 @@ set( ZMQPP_BUILD_CLIENT   false   CACHE BOOL "Build the ZMQPP client" )
 set( ZMQPP_BUILD_TESTS    false   CACHE BOOL "Build the ZMQPP tests" )
 
 
+if(DEFINED XP_NAMESPACE)
+  set(nSpace ${XP_NAMESPACE}::)
+  set(nameSpace NAMESPACE ${nSpace})
+endif()
+if(COMMAND xpFindPkg)
+  xpFindPkg(PKGS libzmq)
+  get_target_property(ZEROMQ_INCLUDE_DIR ${nSpace}libzmq-static INTERFACE_INCLUDE_DIRECTORIES)
+  set(ZMQPP_LIBZMQ_CMAKE true)
+else()
 # Since the current CMake build of ZMQ does not work for generating a dynamic libzmq,
 # give a chance for users to update which ZMQ library to link to
 
@@ -59,6 +69,7 @@ set( ZMQPP_LIBZMQ_NAME_SHARED  "zmq"        CACHE STRING "The ZMQ library to lin
 # Paths to set to look for zmq
 set( ZEROMQ_LIB_DIR       ""      CACHE PATH "The library directory for libzmq" )
 set( ZEROMQ_INCLUDE_DIR   ""      CACHE PATH "The include directory for ZMQ" )
+endif()
 
 # Build flags
 set( IS_TRAVIS_CI_BUILD   true    CACHE BOOL "Defines TRAVIS_CI_BUILD - Should the tests avoid running cases where memory is scarce." )
@@ -109,6 +120,7 @@ set( LIBZMQPP_SOURCES
 if (ZMQPP_BUILD_STATIC)
   add_library( zmqpp-static STATIC ${LIBZMQPP_SOURCES})
   target_compile_definitions(zmqpp-static PUBLIC ZMQ_STATIC ZMQPP_STATIC_DEFINE)
+  target_include_directories(zmqpp-static PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
   if (NOT ZMQPP_LIBZMQ_CMAKE)
     find_library(ZEROMQ_LIBRARY_STATIC ${ZMQPP_LIBZMQ_NAME_STATIC} PATHS ${ZEROMQ_LIB_DIR})
     if (NOT ZEROMQ_LIBRARY_STATIC)
@@ -119,7 +131,7 @@ if (ZMQPP_BUILD_STATIC)
   else()
     # libzmq-static is the name of the target from
     # libzmq's CMake
-    target_link_libraries(zmqpp-static libzmq-static)
+    target_link_libraries(zmqpp-static ${nSpace}libzmq-static)
   endif()
   list( APPEND INSTALL_TARGET_LIST zmqpp-static)
   set( LIB_TO_LINK_TO_EXAMPLES zmqpp-static )
@@ -128,13 +140,14 @@ endif() # ZMQPP_BUILD_STATIC
 # Shared lib
 if (ZMQPP_BUILD_SHARED)
   add_library( zmqpp SHARED ${LIBZMQPP_SOURCES})
+  target_include_directories(zmqpp PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
   if (NOT ZMQPP_LIBZMQ_CMAKE)
     find_library(ZEROMQ_LIBRARY_SHARED ${ZMQPP_LIBZMQ_NAME_SHARED} PATHS ${ZEROMQ_LIB_DIR})
     target_link_libraries( zmqpp ${ZEROMQ_LIBRARY_SHARED} )
   else()
     # libzmq is the name of the target from
     # libzmq's CMake
-    target_link_libraries(zmqpp libzmq)
+    target_link_libraries(zmqpp ${nSpace}libzmq)
   endif()
   list( APPEND INSTALL_TARGET_LIST zmqpp)
   set( LIB_TO_LINK_TO_EXAMPLES zmqpp )
@@ -232,16 +245,23 @@ if( ZMQPP_BUILD_TESTS )
 endif()
 
 
+include(GNUInstallDirs)
 # Install
 # -------
 install(TARGETS ${INSTALL_TARGET_LIST}
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+        EXPORT ${PROJECT_NAME}-targets
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${PROJECT_NAME}-targets ${nameSpace} DESTINATION ${XP_INSTALL_CMAKEDIR})
 
-install(DIRECTORY src/zmqpp DESTINATION include/
+install(DIRECTORY src/zmqpp DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
         FILES_MATCHING PATTERN "*.hpp")
 
 install(FILES
         "${CMAKE_CURRENT_BINARY_DIR}/zmqpp_export.h"
-        DESTINATION "include")
+        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
diff --git a/src/zmqpp/socket.cpp b/src/zmqpp/socket.cpp
index 5cb98fd..928792f 100644
--- a/src/zmqpp/socket.cpp
+++ b/src/zmqpp/socket.cpp
@@ -640,6 +640,7 @@ void socket::set(socket_option const option, char const* value, size_t const len
 #if (ZMQ_VERSION_MAJOR > 4 || ZMQ_VERSION_MAJOR == 4 && ZMQ_VERSION_MINOR >= 2)
 	case socket_option::gssapi_principal:
 	case socket_option::gssapi_service_principal:
+	case socket_option::metadata:
 	case socket_option::socks_proxy:
 	case socket_option::xpub_welcome_message:
 #endif
@@ -868,6 +869,7 @@ void socket::get(socket_option const option, std::string& value) const
 #if (ZMQ_VERSION_MAJOR > 4 || ZMQ_VERSION_MAJOR == 4 && ZMQ_VERSION_MINOR >= 2)
 	case socket_option::gssapi_principal:
 	case socket_option::gssapi_service_principal:
+	case socket_option::metadata:
 	case socket_option::socks_proxy:
 #endif
 		if(0 != zmq_getsockopt(_socket, static_cast<int>(option), buffer.data(), &size))
diff --git a/src/zmqpp/socket_options.hpp b/src/zmqpp/socket_options.hpp
index e46cbde..1920514 100644
--- a/src/zmqpp/socket_options.hpp
+++ b/src/zmqpp/socket_options.hpp
@@ -116,6 +116,7 @@ ZMQPP_COMPARABLE_ENUM socket_option {
 	heartbeat_timeout         = ZMQ_HEARTBEAT_TIMEOUT, /*< ZMPT heartbeat timeout - set only */
 	heartbeat_ttl             = ZMQ_HEARTBEAT_TTL, /*< ZMPT heartbeat interval - set only */
 	invert_matching           = ZMQ_INVERT_MATCHING, /*< ZMPT invert state for PUB/SUB message filters */
+	metadata                  = ZMQ_METADATA, /*< socket metadata key-value pairs */
 	multicast_max_tpdu        = ZMQ_MULTICAST_MAXTPDU, /*< Max size for multicast messages */
 	socks_proxy               = ZMQ_SOCKS_PROXY, /*< SOCKS5 proxy address for routing tcp connections */
 	stream_notify             = ZMQ_STREAM_NOTIFY, /*< Event state on connect/disconnection of peers */
