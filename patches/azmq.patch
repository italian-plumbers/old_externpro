diff --git a/CMakeLists.txt b/CMakeLists.txt
index 42ace9a..e22b437 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,8 @@
-cmake_minimum_required(VERSION 2.8)
+cmake_minimum_required(VERSION 3.12)
 project(azmq)
 
 include(AzmqCPack.cmake)
+include(flags OPTIONAL)
 
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
@@ -37,10 +38,16 @@ if(USE_LIBCXX)
     set(ADDITIONAL_LIBS "pthread")
 endif()
 
-set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/config")
-
-find_package(Boost 1.48 COMPONENTS system date_time thread chrono random REQUIRED)
-find_package(ZeroMQ 4.0 REQUIRED)
+if(COMMAND xpFindPkg)
+    set(XP_MODULE_PATH ${CMAKE_MODULE_PATH})
+    xpFindPkg(PKGS boost libzmq)
+    set(Boost_LIBRARIES Boost::system Boost::thread)
+    set(ZeroMQ_LIBRARIES xpro::libzmq-static)
+else()
+    set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/config")
+    find_package(Boost 1.48 COMPONENTS system date_time thread chrono random REQUIRED)
+    find_package(ZeroMQ 4.0 REQUIRED)
+endif()
 
 set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
 find_package(Threads REQUIRED)
@@ -64,5 +71,18 @@ if(NOT AZMQ_NO_TESTS)
     add_subdirectory(doc)
 endif()
 
+include(GNUInstallDirs)
+add_library(${PROJECT_NAME} INTERFACE)
+target_include_directories(${PROJECT_NAME} INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+target_link_libraries(${PROJECT_NAME} INTERFACE ${Boost_LIBRARIES} ${ZeroMQ_LIBRARIES})
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}-targets)
+if(DEFINED XP_NAMESPACE)
+    set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${PROJECT_NAME}-targets ${nameSpace} DESTINATION ${XP_INSTALL_CMAKEDIR})
+
 install(DIRECTORY ${PROJECT_SOURCE_DIR}/azmq
-        DESTINATION include)
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
diff --git a/azmq/detail/socket_ops.hpp b/azmq/detail/socket_ops.hpp
index 5259abe..0dfa28a 100644
--- a/azmq/detail/socket_ops.hpp
+++ b/azmq/detail/socket_ops.hpp
@@ -78,9 +78,15 @@ namespace detail {
 
         static socket_type create_socket(context_ops::context_type context,
                                          int type,
-                                         boost::system::error_code & ec) {
+                                         boost::system::error_code & ec,
+                                         zmq_router_skt_peer_connect_notification_fn* pCnfn = nullptr,
+                                         void* pCnfnHint = nullptr) {
             BOOST_ASSERT_MSG(context, "Invalid context");
-            auto res = zmq_socket(context.get(), type);
+            void* res = nullptr;
+            if (type == ZMQ_ROUTER && pCnfn)
+              res = zmq_new_router_socket(context.get(), pCnfn, pCnfnHint);
+            else
+              res = zmq_socket(context.get(), type);
             if (!res) {
                 ec = make_error_code();
                 return socket_type();
diff --git a/azmq/detail/socket_service.hpp b/azmq/detail/socket_service.hpp
index 8250ee0..d816834 100644
--- a/azmq/detail/socket_service.hpp
+++ b/azmq/detail/socket_service.hpp
@@ -97,9 +97,11 @@ namespace detail {
                          context_type & ctx,
                          int type,
                          bool optimize_single_threaded,
-                         boost::system::error_code & ec) {
+                         boost::system::error_code & ec,
+                         zmq_router_skt_peer_connect_notification_fn* pCnfn = nullptr,
+                         void* pCnfnHint = nullptr) {
                 BOOST_ASSERT_MSG(!socket_, "socket already open");
-                socket_ = socket_ops::create_socket(ctx, type, ec);
+                socket_ = socket_ops::create_socket(ctx, type, ec, pCnfn, pCnfnHint);
                 if (ec) return;
 
                 sd_ = socket_ops::get_stream_descriptor(ios, socket_, ec);
@@ -227,12 +229,14 @@ namespace detail {
         boost::system::error_code do_open(implementation_type & impl,
                                           int type,
                                           bool optimize_single_threaded,
-                                          boost::system::error_code & ec) {
+                                          boost::system::error_code & ec,
+                                          zmq_router_skt_peer_connect_notification_fn* pCnfn = nullptr,
+                                          void* pCnfnHint = nullptr) {
             BOOST_ASSERT_MSG(impl, "impl");
 #ifdef AZMQ_DETAIL_USE_IO_SERVICE
-            impl->do_open(get_io_service(), ctx_, type, optimize_single_threaded, ec);
+            impl->do_open(get_io_service(), ctx_, type, optimize_single_threaded, ec, pCnfn, pCnfnHint);
 #else
-            impl->do_open(get_io_context(), ctx_, type, optimize_single_threaded, ec);
+            impl->do_open(get_io_context(), ctx_, type, optimize_single_threaded, ec, pCnfn, pCnfnHint);
 #endif
             if (ec)
                 impl.reset();
diff --git a/azmq/socket.hpp b/azmq/socket.hpp
index 533c1ef..aeae925 100644
--- a/azmq/socket.hpp
+++ b/azmq/socket.hpp
@@ -105,10 +105,12 @@ public:
      */
     explicit socket(boost::asio::io_service& ios,
                     int type,
-                    bool optimize_single_threaded = false)
+                    bool optimize_single_threaded = false,
+                    zmq_router_skt_peer_connect_notification_fn* pCnfn = nullptr,
+                    void* pCnfnHint = nullptr)
             : azmq::detail::basic_io_object<detail::socket_service>(ios) {
         boost::system::error_code ec;
-        if (get_service().do_open(get_implementation(), type, optimize_single_threaded, ec))
+        if (get_service().do_open(get_implementation(), type, optimize_single_threaded, ec, pCnfn, pCnfnHint))
             throw boost::system::system_error(ec);
     }
 
@@ -711,6 +713,39 @@ namespace detail {
             return *this;
         }
     };
+
+    template<>
+    class specialized_socket<ZMQ_ROUTER>: public socket
+    {
+        typedef socket Base;
+
+    public:
+        specialized_socket(boost::asio::io_service & ios,
+                           bool optimize_single_threaded = false)
+            : Base(ios, ZMQ_ROUTER, optimize_single_threaded)
+        {
+            // Note that we expect these to get sliced to socket, so DO NOT add any data members
+            static_assert(sizeof(*this) == sizeof(socket), "Specialized socket must not have any specific data members");
+        }
+        specialized_socket(boost::asio::io_service & ios,
+                           zmq_router_skt_peer_connect_notification_fn* pCnfn,
+                           void* pCnfnHint)
+            : Base(ios, ZMQ_ROUTER, /*optimize_single_threaded=*/false, pCnfn, pCnfnHint)
+        {
+            // Note that we expect these to get sliced to socket, so DO NOT add any data members
+            static_assert(sizeof(*this) == sizeof(socket), "Specialized socket must not have any specific data members");
+        }
+
+        specialized_socket(specialized_socket&& op)
+            : Base(std::move(op))
+        {}
+
+        specialized_socket& operator= (specialized_socket&& rhs)
+        {
+            Base::operator=(std::move(rhs));
+            return *this;
+        }
+    };
 }
 
 AZMQ_V1_INLINE_NAMESPACE_BEGIN
