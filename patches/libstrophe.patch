diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..d205a3b
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,51 @@
+cmake_minimum_required(VERSION 3.12)
+project(libstrophe)
+include(GNUInstallDirs)
+include(flags OPTIONAL)
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+enable_testing()
+set_property(GLOBAL PROPERTY USE_FOLDERS ON) # enables MSVC Solution Folders
+########################################
+if(MSVC)
+  add_definitions(
+    -D_CRT_NONSTDC_NO_DEPRECATE
+    -D_CRT_SECURE_NO_WARNINGS
+    -D_WINSOCK_DEPRECATED_NO_WARNINGS
+    )
+endif()
+########################################
+if(COMMAND xpFindPkg)
+  xpFindPkg(PKGS expat openssl)
+else()
+  find_package(OpenSSL)
+  find_package(EXPAT)
+endif()
+if(NOT EXPAT_FOUND)
+  message(FATAL_ERROR "can't find expat - libstrophe cmake currently hard-coded to use expat")
+endif()
+if(NOT OPENSSL_FOUND)
+  message(FATAL_ERROR "can't find OpenSSL - libstrophe cmake currently hard-coded to use OpenSSL")
+endif()
+####################
+include(CheckLibraryExists)
+function(checkLibraryConcat lib symbol liblist)
+  string(TOUPPER ${lib} LIB)
+  check_library_exists("${lib}" "${symbol}" "" LIBSTROPHE_HAS_${LIB})
+  if(LIBSTROPHE_HAS_${LIB})
+    list(APPEND ${liblist} ${lib})
+    set(${liblist} ${${liblist}} PARENT_SCOPE)
+  endif()
+endfunction()
+checkLibraryConcat(resolv __res_query SYS_LIBS)
+checkLibraryConcat(winmm timeGetTime SYS_LIBS)
+checkLibraryConcat(ws2_32 getch SYS_LIBS)
+########################################
+add_subdirectory(src)
+add_subdirectory(examples)
+add_subdirectory(tests)
+install(FILES strophe.h strophepp.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
new file mode 100644
index 0000000..5de7bc3
--- /dev/null
+++ b/examples/CMakeLists.txt
@@ -0,0 +1,13 @@
+set(examples
+  active
+  basic
+  bot
+  component
+  roster
+  uuid
+  )
+foreach(exe ${examples})
+  add_executable(${exe} ${exe}.c)
+  target_link_libraries(${exe} PRIVATE libstrophe)
+  set_property(TARGET ${exe} PROPERTY FOLDER examples)
+endforeach()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..6c4b9c3
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,61 @@
+set(lib_name ${PROJECT_NAME})
+########################################
+set(${lib_name}_libsrcs
+  auth.c
+  common.h
+  conn.c
+  crypto.c
+  ctx.c
+  event.c
+  handler.c
+  hash.c
+  hash.h
+  jid.c
+  md5.c
+  md5.h
+  ostypes.h
+  parser_expat.c
+  parser.h
+  #parser_libxml2.c # parser_expat instead
+  rand.c
+  rand.h
+  resolver.c
+  resolver.h
+  sasl.c
+  sasl.h
+  scram.c
+  scram.h
+  sha1.c
+  sha1.h
+  snprintf.c
+  snprintf.h
+  sock.c
+  sock.h
+  stanza.c
+  #tls_dummy.c # tls_openssl instead
+  #tls_gnutls.c # tls_openssl instead
+  tls.h
+  tls_openssl.c
+  #tls_schannel.c # tls_openssl instead
+  util.c
+  util.h
+  uuid.c
+  )
+source_group("" FILES ${${lib_name}_libsrcs})
+########################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+  )
+target_link_libraries(${lib_name} PRIVATE ${EXPAT_LIBRARIES} ${OPENSSL_LIBRARIES} ${SYS_LIBS})
+set_target_properties(${lib_name} PROPERTIES
+  PREFIX "" # strip off the "lib" prefix, since it's already libstrophe
+  )
+########################################
+set(targetsFile ${PROJECT_NAME}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
diff --git a/src/tls_openssl.c b/src/tls_openssl.c
index 0e440c1..04f379e 100644
--- a/src/tls_openssl.c
+++ b/src/tls_openssl.c
@@ -49,8 +49,12 @@ static void _tls_log_error(xmpp_ctx_t *ctx);
 
 void tls_initialize(void)
 {
+#if OPENSSL_API_COMPAT < 0x10100000L
     SSL_library_init();
     SSL_load_error_strings();
+#else
+    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
+#endif
 }
 
 void tls_shutdown(void)
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
new file mode 100644
index 0000000..dabc2ae
--- /dev/null
+++ b/tests/CMakeLists.txt
@@ -0,0 +1,28 @@
+add_library(testlib STATIC test.c test.h)
+target_link_libraries(testlib PUBLIC libstrophe)
+set_property(TARGET testlib PROPERTY FOLDER tests)
+set(tests
+  check_parser
+  res_query_dump
+  test_base64
+  test_ctx
+  test_hash
+  test_jid
+  test_md5
+  test_rand
+  test_resolver
+  test_sasl
+  test_scram
+  test_sha1
+  test_snprintf
+  test_sock
+  test_string
+  )
+foreach(exe ${tests})
+  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${exe}.c) # there are some tests only in repo, not in download
+    add_executable(${exe} ${exe}.c)
+    target_link_libraries(${exe} PRIVATE testlib)
+    add_test(NAME ${exe} COMMAND ${exe})
+    set_property(TARGET ${exe} PROPERTY FOLDER tests)
+  endif()
+endforeach()
diff --git a/tests/test_string.c b/tests/test_string.c
index fc1b391..0dc0b92 100644
--- a/tests/test_string.c
+++ b/tests/test_string.c
@@ -20,6 +20,16 @@
 
 #include "test.h" /* ARRAY_SIZE */
 
+/* strtok_s() has appeared in visual studio 2005.
+   Use own implementation for older versions. */
+#ifdef _MSC_VER
+# if (_MSC_VER >= 1400)
+# define strtok_r strtok_s
+# else
+# define strtok_r xmpp_strtok_r
+# endif
+#endif /* _MSC_VER */
+
 static int test_strtok_r(void)
 {
     const char *test = "-abc-=-def--";
