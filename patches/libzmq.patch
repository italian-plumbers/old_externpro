diff --git a/CMakeLists.txt b/CMakeLists.txt
index dd3d8eb9..08894734 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,12 +1,7 @@
 # CMake build script for ZeroMQ
+cmake_minimum_required(VERSION 3.0.2...3.21)
 project(ZeroMQ)
 
-if(${CMAKE_SYSTEM_NAME} STREQUAL Darwin)
-  cmake_minimum_required(VERSION 3.0.2)
-else()
-  cmake_minimum_required(VERSION 2.8.12)
-endif()
-
 include(CheckIncludeFiles)
 include(CheckCCompilerFlag)
 include(CheckCXXCompilerFlag)
@@ -20,6 +15,7 @@ include(FindThreads)
 include(GNUInstallDirs)
 include(CheckTypeSize)
 include(CMakePackageConfigHelpers)
+include(flags OPTIONAL)
 
 list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}")
 set(ZMQ_CMAKE_MODULES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/Modules)
@@ -262,20 +258,32 @@ option(ENABLE_CURVE "Enable CURVE security" ON)
 
 if(ENABLE_CURVE)
   if(WITH_LIBSODIUM)
-    find_package("Sodium")
-    if(SODIUM_FOUND)
+    if(COMMAND xpFindPkg)
+      set(XP_MODULE_PATH ${CMAKE_MODULE_PATH})
+      xpFindPkg(PKGS sodium)
       message(STATUS "Using libsodium for CURVE security")
+      get_target_property(SODIUM_INCLUDE_DIRS xpro::sodium INTERFACE_INCLUDE_DIRECTORIES)
+      get_target_property(SODIUM_DEFS xpro::sodium INTERFACE_COMPILE_DEFINITIONS)
       include_directories(${SODIUM_INCLUDE_DIRS})
-      if(WITH_LIBSODIUM_STATIC)
-        add_compile_definitions(SODIUM_STATIC)
-      endif()
+      add_compile_definitions(${SODIUM_DEFS})
       set(ZMQ_USE_LIBSODIUM 1)
       set(ZMQ_HAVE_CURVE 1)
     else()
-      message(
-        WARNING
-          "libsodium not installed, instead using builtin tweetnacl, you may want to install libsodium and run cmake again"
-      )
+      find_package("Sodium")
+      if(SODIUM_FOUND)
+        message(STATUS "Using libsodium for CURVE security")
+        include_directories(${SODIUM_INCLUDE_DIRS})
+        if(WITH_LIBSODIUM_STATIC)
+          add_compile_definitions(SODIUM_STATIC)
+        endif()
+        set(ZMQ_USE_LIBSODIUM 1)
+        set(ZMQ_HAVE_CURVE 1)
+      else()
+        message(
+          WARNING
+            "libsodium not installed, instead using builtin tweetnacl, you may want to install libsodium and run cmake again"
+        )
+      endif()
     endif()
   endif()
   if(NOT ZMQ_HAVE_CURVE)
@@ -1224,8 +1232,17 @@ set(VERSION ${ZMQ_VERSION_MAJOR}.${ZMQ_VERSION_MINOR}.${ZMQ_VERSION_PATCH})
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/libzmq.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libzmq.pc @ONLY)
 set(zmq-pkgconfig ${CMAKE_CURRENT_BINARY_DIR}/libzmq.pc)
 
+if(DEFINED XP_NAMESPACE)
+  set(nSpace ${XP_NAMESPACE}::)
+  set(nameSpace NAMESPACE ${nSpace})
+  set(XP_OPT_INSTALL EXCLUDE_FROM_ALL)
+endif()
+if(DEFINED XP_INSTALL_CMAKEDIR)
+  set(ZEROMQ_CMAKECONFIG_INSTALL_DIR ${XP_INSTALL_CMAKEDIR} CACHE STRING "install path for ZeroMQConfig.cmake")
+endif()
+
 if(NOT ZMQ_BUILD_FRAMEWORK)
-  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libzmq.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libzmq.pc ${XP_OPT_INSTALL} DESTINATION ${CMAKE_INSTALL_DATADIR}/pkgconfig)
 endif()
 
 if(MSVC)
@@ -1350,7 +1367,8 @@ else()
     set_property(TARGET objects PROPERTY POSITION_INDEPENDENT_CODE ON)
     target_include_directories(
       objects PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-                     $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> $<INSTALL_INTERFACE:include>)
+                     $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+                     $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
   endif()
 
   if(BUILD_SHARED)
@@ -1422,7 +1440,8 @@ endif()
 foreach(target ${target_outputs})
   target_include_directories(
     ${target} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-                     $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> $<INSTALL_INTERFACE:include>)
+                     $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+                     $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 endforeach()
 
 if(BUILD_SHARED)
@@ -1566,7 +1585,7 @@ if(BUILD_SHARED)
           VERBATIM
           COMMENT "Perf tools")
       else()
-        install(TARGETS ${perf-tool} RUNTIME DESTINATION bin COMPONENT PerfTools)
+        install(TARGETS ${perf-tool} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT PerfTools)
       endif()
       if(ZMQ_HAVE_WINDOWS_UWP)
         set_target_properties(${perf-tool} PROPERTIES LINK_FLAGS_DEBUG "/OPT:NOICF /OPT:NOREF")
@@ -1650,7 +1669,7 @@ foreach(readme ${readme-docs})
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${readme} ${CMAKE_CURRENT_BINARY_DIR}/${readme}.txt)
 
   if(NOT ZMQ_BUILD_FRAMEWORK)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${readme}.txt DESTINATION share/zmq)
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${readme}.txt DESTINATION ${CMAKE_INSTALL_DOCDIR})
   endif()
 endforeach()
 
@@ -1658,7 +1677,7 @@ if(WITH_DOC)
   if(NOT ZMQ_BUILD_FRAMEWORK)
     install(
       FILES ${html-docs}
-      DESTINATION doc/zmq
+      DESTINATION ${CMAKE_INSTALL_DOCDIR}
       COMPONENT RefGuide)
   endif()
 endif()
@@ -1688,7 +1707,7 @@ write_basic_package_version_file(
 if(BUILD_SHARED OR BUILD_STATIC)
   install(
     EXPORT ${PROJECT_NAME}-targets
-    FILE ${PROJECT_NAME}Targets.cmake
+    FILE ${PROJECT_NAME}Targets.cmake ${nameSpace}
     DESTINATION ${ZEROMQ_CMAKECONFIG_INSTALL_DIR})
   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
                 ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
diff --git a/builds/cmake/Modules/FindSodium.cmake b/builds/cmake/Modules/FindSodium.cmake
index 9ec36d1d..88f41315 100644
--- a/builds/cmake/Modules/FindSodium.cmake
+++ b/builds/cmake/Modules/FindSodium.cmake
@@ -39,7 +39,7 @@ find_library(
 )
 
 include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(sodium DEFAULT_MSG SODIUM_LIBRARIES SODIUM_INCLUDE_DIRS)
+find_package_handle_standard_args(Sodium DEFAULT_MSG SODIUM_LIBRARIES SODIUM_INCLUDE_DIRS)
 mark_as_advanced(SODIUM_FOUND SODIUM_LIBRARIES SODIUM_INCLUDE_DIRS)
 
 ################################################################################
diff --git a/builds/cmake/ZeroMQConfig.cmake.in b/builds/cmake/ZeroMQConfig.cmake.in
index 3f16e595..bae7e24f 100644
--- a/builds/cmake/ZeroMQConfig.cmake.in
+++ b/builds/cmake/ZeroMQConfig.cmake.in
@@ -4,8 +4,8 @@
 #
 # ::
 #
-#   libzmq-static
-#   libzmq
+#   @nSpace@libzmq-static
+#   @nSpace@libzmq
 #
 # This module sets the following variables in your project::
 #
@@ -16,19 +16,19 @@
 
 @PACKAGE_INIT@
 
-if(NOT TARGET libzmq AND NOT TARGET libzmq-static)
+if(NOT TARGET @nSpace@libzmq AND NOT TARGET @nSpace@libzmq-static)
   include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
 
-  if (TARGET libzmq)
-    get_target_property(@PROJECT_NAME@_INCLUDE_DIR libzmq INTERFACE_INCLUDE_DIRECTORIES)
+  if (TARGET @nSpace@libzmq)
+    get_target_property(@PROJECT_NAME@_INCLUDE_DIR @nSpace@libzmq INTERFACE_INCLUDE_DIRECTORIES)
   else ()
-    get_target_property(@PROJECT_NAME@_INCLUDE_DIR libzmq-static INTERFACE_INCLUDE_DIRECTORIES)
+    get_target_property(@PROJECT_NAME@_INCLUDE_DIR @nSpace@libzmq-static INTERFACE_INCLUDE_DIRECTORIES)
   endif()
 
-  if (TARGET libzmq)
-    get_target_property(@PROJECT_NAME@_LIBRARY libzmq LOCATION)
+  if (TARGET @nSpace@libzmq)
+    get_target_property(@PROJECT_NAME@_LIBRARY @nSpace@libzmq LOCATION)
   endif()
-  if (TARGET libzmq-static)
-    get_target_property(@PROJECT_NAME@_STATIC_LIBRARY libzmq-static LOCATION)
+  if (TARGET @nSpace@libzmq-static)
+    get_target_property(@PROJECT_NAME@_STATIC_LIBRARY @nSpace@libzmq-static LOCATION)
   endif()
 endif()
diff --git a/include/zmq.h b/include/zmq.h
index d05659f7..e6a6b054 100644
--- a/include/zmq.h
+++ b/include/zmq.h
@@ -478,6 +478,9 @@ ZMQ_EXPORT const char *zmq_msg_gets (const zmq_msg_t *msg_,
 #define ZMQ_PROTOCOL_ERROR_WS_UNSPECIFIED 0x30000000
 
 ZMQ_EXPORT void *zmq_socket (void *, int type_);
+typedef void(zmq_router_skt_peer_connect_notification_fn) (const unsigned char* rmtID_, size_t rmtIDLen_, int connectingElseDisconnecting_, void *hint_);
+ZMQ_EXPORT void *zmq_new_router_socket (void * context_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
+
 ZMQ_EXPORT int zmq_close (void *s_);
 ZMQ_EXPORT int
 zmq_setsockopt (void *s_, int option_, const void *optval_, size_t optvallen_);
@@ -778,6 +781,11 @@ ZMQ_EXPORT int zmq_socket_monitor_pipes_stats (void *s);
 
 #endif // ZMQ_BUILD_DRAFT_API
 
+// expose socket option ZMQ_METADATA, which is currently only available in the
+// draft API:
+#ifndef ZMQ_METADATA
+#define ZMQ_METADATA 95
+#endif
 
 #undef ZMQ_EXPORT
 
diff --git a/src/ctx.cpp b/src/ctx.cpp
index 2b64c510..34f26edd 100644
--- a/src/ctx.cpp
+++ b/src/ctx.cpp
@@ -475,8 +475,12 @@ fail_cleanup_slots:
     return false;
 }
 
-zmq::socket_base_t *zmq::ctx_t::create_socket (int type_)
+zmq::socket_base_t *zmq::ctx_t::create_socket (int type_, std::function<zmq::socket_base_t*(int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_)> sktAllocFn)
 {
+  if(!sktAllocFn)
+  {
+    sktAllocFn = [](int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_){return socket_base_t::create (type_, parent_, tid_, sid_);};
+  }
     scoped_lock_t locker (_slot_sync);
 
     //  Once zmq_ctx_term() or zmq_ctx_shutdown() was called, we can't create
@@ -505,7 +509,7 @@ zmq::socket_base_t *zmq::ctx_t::create_socket (int type_)
     const int sid = (static_cast<int> (max_socket_id.add (1))) + 1;
 
     //  Create the socket and register its mailbox.
-    socket_base_t *s = socket_base_t::create (type_, this, slot, sid);
+    socket_base_t *s = sktAllocFn(type_, this, slot, sid);
     if (!s) {
         _empty_slots.push_back (slot);
         return NULL;
@@ -516,6 +520,14 @@ zmq::socket_base_t *zmq::ctx_t::create_socket (int type_)
     return s;
 }
 
+zmq::socket_base_t *zmq::ctx_t::create_router_socket (zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_)
+{
+  return create_socket(0, [cnfn_, cnfnhint_](int, zmq::ctx_t *parent_, uint32_t tid_, int sid_)
+  {
+    return socket_base_t::create_router( parent_, tid_, sid_, cnfn_, cnfnhint_);
+  });
+}
+
 void zmq::ctx_t::destroy_socket (class socket_base_t *socket_)
 {
     scoped_lock_t locker (_slot_sync);
diff --git a/src/ctx.hpp b/src/ctx.hpp
index 0ccd68fa..1201e1a8 100644
--- a/src/ctx.hpp
+++ b/src/ctx.hpp
@@ -30,6 +30,7 @@
 #ifndef __ZMQ_CTX_HPP_INCLUDED__
 #define __ZMQ_CTX_HPP_INCLUDED__
 
+#include <functional>
 #include <map>
 #include <vector>
 #include <string>
@@ -120,7 +121,9 @@ class ctx_t ZMQ_FINAL : public thread_ctx_t
     int get (int option_);
 
     //  Create and destroy a socket.
-    zmq::socket_base_t *create_socket (int type_);
+    // if sktAllocFn is empty then it will allocate it using socket_base_t::create(...)
+    zmq::socket_base_t *create_socket (int type_, std::function<zmq::socket_base_t*(int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_)> sktAllocFn = {});
+    zmq::socket_base_t *create_router_socket (zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
     void destroy_socket (zmq::socket_base_t *socket_);
 
     //  Send command to the destination thread.
diff --git a/src/curve_server.cpp b/src/curve_server.cpp
index fadfc746..5104b5a4 100644
--- a/src/curve_server.cpp
+++ b/src/curve_server.cpp
@@ -410,13 +410,19 @@ int zmq::curve_server_t::process_initiate (msg_t *msg_)
                               _cn_secret);
     zmq_assert (rc == 0);
 
+    // parse the metadata BEFORE doing ZAP authentication so that ZAP can use
+    // any applicable metadata:
+    auto retMetadata = parse_metadata (
+      &initiate_plaintext[crypto_box_ZEROBYTES + 128],
+      clen - crypto_box_ZEROBYTES - 128);
+
     //  Given this is a backward-incompatible change, it's behind a socket
     //  option disabled by default.
     if (zap_required () || !options.zap_enforce_domain) {
         //  Use ZAP protocol (RFC 27) to authenticate the user.
         rc = session->zap_connect ();
         if (rc == 0) {
-            send_zap_request (client_key);
+            send_zap_request (client_key, _signature);
             state = waiting_for_zap_reply;
 
             //  TODO actually, it is quite unlikely that we can read the ZAP
@@ -439,8 +445,7 @@ int zmq::curve_server_t::process_initiate (msg_t *msg_)
         state = sending_ready;
     }
 
-    return parse_metadata (&initiate_plaintext[crypto_box_ZEROBYTES + 128],
-                           clen - crypto_box_ZEROBYTES - 128);
+    return retMetadata;
 }
 
 int zmq::curve_server_t::produce_ready (msg_t *msg_)
@@ -497,10 +502,34 @@ int zmq::curve_server_t::produce_error (msg_t *msg_) const
     return 0;
 }
 
-void zmq::curve_server_t::send_zap_request (const uint8_t *key_)
+void zmq::curve_server_t::send_zap_request (const uint8_t *key_,
+                                            const std::string& signature_)
+{
+    // send not only the key but also an optional signature for the key, if one
+    // was present in the metadata:
+    if (signature_.empty())
+    {
+        zap_client_t::send_zap_request ("CURVE", 5, key_,
+                                        crypto_box_PUBLICKEYBYTES);
+    }
+    else
+    {
+        const uint8_t* credentials[2] = { key_,
+          static_cast<const uint8_t*>(
+            static_cast<const void*>(signature_.data())) };
+        size_t credentialSizes[2] = { crypto_box_PUBLICKEYBYTES,
+                                      signature_.size() };
+        zap_client_t::send_zap_request ("CURVE", 5, credentials,
+                                        credentialSizes, 2);
+    }
+}
+
+int zmq::curve_server_t::property (const std::string &name_, const void *value_,
+                                   size_t length_)
 {
-    zap_client_t::send_zap_request ("CURVE", 5, key_,
-                                    crypto_box_PUBLICKEYBYTES);
+    if (name_ == "X-ClientKeySignature" && value_ && length_)
+        _signature.assign(static_cast<const char*>(value_), length_);
+    return 0; // success
 }
 
 #endif
diff --git a/src/curve_server.hpp b/src/curve_server.hpp
index 995efce0..e1fd3b6a 100644
--- a/src/curve_server.hpp
+++ b/src/curve_server.hpp
@@ -74,13 +74,21 @@ class curve_server_t ZMQ_FINAL : public zap_client_common_handshake_t,
     //  Key used to produce cookie
     uint8_t _cookie_key[crypto_secretbox_KEYBYTES];
 
+    //  Signature for client's public key, empty() if not provided
+    std::string _signature;
+
     int process_hello (msg_t *msg_);
     int produce_welcome (msg_t *msg_);
     int process_initiate (msg_t *msg_);
     int produce_ready (msg_t *msg_);
     int produce_error (msg_t *msg_) const;
 
-    void send_zap_request (const uint8_t *key_);
+    void send_zap_request (const uint8_t *key_,
+                           const std::string& signature_);
+
+    int property (const std::string &name_, const void *value_, size_t length_)
+      override;
+
 };
 #ifdef _MSC_VER
 #pragma warning(pop)
diff --git a/src/rep.cpp b/src/rep.cpp
index 99707f89..b1dad7d2 100644
--- a/src/rep.cpp
+++ b/src/rep.cpp
@@ -32,8 +32,8 @@
 #include "err.hpp"
 #include "msg.hpp"
 
-zmq::rep_t::rep_t (class ctx_t *parent_, uint32_t tid_, int sid_) :
-    router_t (parent_, tid_, sid_),
+zmq::rep_t::rep_t (class ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_) :
+    router_t (parent_, tid_, sid_, cnfn_, cnfnhint_),
     _sending_reply (false),
     _request_begins (true)
 {
diff --git a/src/rep.hpp b/src/rep.hpp
index 995fe40c..20f4b595 100644
--- a/src/rep.hpp
+++ b/src/rep.hpp
@@ -42,7 +42,7 @@ class socket_base_t;
 class rep_t ZMQ_FINAL : public router_t
 {
   public:
-    rep_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);
+    rep_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
     ~rep_t ();
 
     //  Overrides of functions from socket_base_t.
diff --git a/src/router.cpp b/src/router.cpp
index 77526e4e..79d82568 100644
--- a/src/router.cpp
+++ b/src/router.cpp
@@ -36,8 +36,8 @@
 #include "likely.hpp"
 #include "err.hpp"
 
-zmq::router_t::router_t (class ctx_t *parent_, uint32_t tid_, int sid_) :
-    routing_socket_base_t (parent_, tid_, sid_),
+zmq::router_t::router_t (class ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_) :
+    routing_socket_base_t (parent_, tid_, sid_, cnfn_, cnfnhint_),
     _prefetched (false),
     _routing_id_sent (false),
     _current_in (NULL),
diff --git a/src/router.hpp b/src/router.hpp
index f020672f..0267ba9e 100644
--- a/src/router.hpp
+++ b/src/router.hpp
@@ -48,7 +48,7 @@ class pipe_t;
 class router_t : public routing_socket_base_t
 {
   public:
-    router_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);
+    router_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
     ~router_t () ZMQ_OVERRIDE;
 
     //  Overrides of functions from socket_base_t.
diff --git a/src/socket_base.cpp b/src/socket_base.cpp
index bbb378cc..50783d7c 100644
--- a/src/socket_base.cpp
+++ b/src/socket_base.cpp
@@ -171,13 +171,13 @@ zmq::socket_base_t *zmq::socket_base_t::create (int type_,
             s = new (std::nothrow) req_t (parent_, tid_, sid_);
             break;
         case ZMQ_REP:
-            s = new (std::nothrow) rep_t (parent_, tid_, sid_);
+            s = new (std::nothrow) rep_t (parent_, tid_, sid_, nullptr, nullptr);
             break;
         case ZMQ_DEALER:
             s = new (std::nothrow) dealer_t (parent_, tid_, sid_);
             break;
         case ZMQ_ROUTER:
-            s = new (std::nothrow) router_t (parent_, tid_, sid_);
+            s = new (std::nothrow) router_t (parent_, tid_, sid_, nullptr, nullptr);
             break;
         case ZMQ_PULL:
             s = new (std::nothrow) pull_t (parent_, tid_, sid_);
@@ -192,7 +192,7 @@ zmq::socket_base_t *zmq::socket_base_t::create (int type_,
             s = new (std::nothrow) xsub_t (parent_, tid_, sid_);
             break;
         case ZMQ_STREAM:
-            s = new (std::nothrow) stream_t (parent_, tid_, sid_);
+            s = new (std::nothrow) stream_t (parent_, tid_, sid_, nullptr, nullptr);
             break;
         case ZMQ_SERVER:
             s = new (std::nothrow) server_t (parent_, tid_, sid_);
@@ -237,6 +237,21 @@ zmq::socket_base_t *zmq::socket_base_t::create (int type_,
     return s;
 }
 
+zmq::socket_base_t *
+zmq::socket_base_t::create_router (zmq::ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_)
+{
+    socket_base_t *s = new (std::nothrow) router_t (parent_, tid_, sid_, cnfn_, cnfnhint_);
+    alloc_assert (s);
+
+    if (s->_mailbox == NULL) {
+        s->_destroyed = true;
+        LIBZMQ_DELETE (s);
+        return NULL;
+    }
+
+    return s;
+}
+
 zmq::socket_base_t::socket_base_t (ctx_t *parent_,
                                    uint32_t tid_,
                                    int sid_,
@@ -2063,8 +2078,10 @@ bool zmq::socket_base_t::is_disconnected () const
 
 zmq::routing_socket_base_t::routing_socket_base_t (class ctx_t *parent_,
                                                    uint32_t tid_,
-                                                   int sid_) :
+                                                   int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_) :
     socket_base_t (parent_, tid_, sid_)
+   ,_cnfn(cnfn_)
+   ,_cnfnhint(cnfnhint_)
 {
 }
 
@@ -2126,6 +2143,10 @@ void zmq::routing_socket_base_t::add_out_pipe (blob_t routing_id_,
       _out_pipes.ZMQ_MAP_INSERT_OR_EMPLACE (ZMQ_MOVE (routing_id_), outpipe)
         .second;
     zmq_assert (ok);
+    if(_cnfn)
+    {
+      _cnfn(routing_id_.data(), routing_id_.size(), 1/*true: is connecting*/, _cnfnhint);
+    }
 }
 
 bool zmq::routing_socket_base_t::has_out_pipe (const blob_t &routing_id_) const
@@ -2151,8 +2172,13 @@ zmq::routing_socket_base_t::lookup_out_pipe (const blob_t &routing_id_) const
 
 void zmq::routing_socket_base_t::erase_out_pipe (const pipe_t *pipe_)
 {
-    const size_t erased = _out_pipes.erase (pipe_->get_routing_id ());
+  auto const& rmtId = pipe_->get_routing_id();
+    const size_t erased = _out_pipes.erase (rmtId);
     zmq_assert (erased);
+    if(_cnfn)
+    {
+      _cnfn(rmtId.data(), rmtId.size(), 0/*false: is disconnecting*/, _cnfnhint);
+    }
 }
 
 zmq::routing_socket_base_t::out_pipe_t
@@ -2163,6 +2189,10 @@ zmq::routing_socket_base_t::try_erase_out_pipe (const blob_t &routing_id_)
     if (it != _out_pipes.end ()) {
         res = it->second;
         _out_pipes.erase (it);
+        if(_cnfn)
+        {
+          _cnfn(routing_id_.data(), routing_id_.size(), 0/*false: is disconnecting*/, _cnfnhint);
+        }
     }
     return res;
 }
diff --git a/src/socket_base.hpp b/src/socket_base.hpp
index 92deb9f7..34f9478f 100644
--- a/src/socket_base.hpp
+++ b/src/socket_base.hpp
@@ -72,6 +72,8 @@ class socket_base_t : public own_t,
     //  Create a socket of a specified type.
     static socket_base_t *
     create (int type_, zmq::ctx_t *parent_, uint32_t tid_, int sid_);
+    static socket_base_t *
+    create_router (zmq::ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
 
     //  Returns the mailbox associated with this socket.
     i_mailbox *get_mailbox () const;
@@ -355,7 +357,7 @@ class socket_base_t : public own_t,
 class routing_socket_base_t : public socket_base_t
 {
   protected:
-    routing_socket_base_t (class ctx_t *parent_, uint32_t tid_, int sid_);
+    routing_socket_base_t (class ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
     ~routing_socket_base_t () ZMQ_OVERRIDE;
 
     // methods from socket_base_t
@@ -397,6 +399,10 @@ class routing_socket_base_t : public socket_base_t
     typedef std::map<blob_t, out_pipe_t> out_pipes_t;
     out_pipes_t _out_pipes;
 
+    // peer connection-notification function
+    zmq_router_skt_peer_connect_notification_fn *_cnfn;
+    void *_cnfnhint;
+
     // Next assigned name on a zmq_connect() call used by ROUTER and STREAM socket types
     std::string _connect_routing_id;
 };
diff --git a/src/stream.cpp b/src/stream.cpp
index 3713c7e7..b9f9c794 100644
--- a/src/stream.cpp
+++ b/src/stream.cpp
@@ -36,8 +36,8 @@
 #include "likely.hpp"
 #include "err.hpp"
 
-zmq::stream_t::stream_t (class ctx_t *parent_, uint32_t tid_, int sid_) :
-    routing_socket_base_t (parent_, tid_, sid_),
+zmq::stream_t::stream_t (class ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_) :
+    routing_socket_base_t (parent_, tid_, sid_, cnfn_, cnfnhint_),
     _prefetched (false),
     _routing_id_sent (false),
     _current_out (NULL),
diff --git a/src/stream.hpp b/src/stream.hpp
index b5ea24cd..da2a9a83 100644
--- a/src/stream.hpp
+++ b/src/stream.hpp
@@ -42,7 +42,7 @@ class pipe_t;
 class stream_t ZMQ_FINAL : public routing_socket_base_t
 {
   public:
-    stream_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_);
+    stream_t (zmq::ctx_t *parent_, uint32_t tid_, int sid_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_);
     ~stream_t ();
 
     //  Overrides of functions from socket_base_t.
diff --git a/src/zmq.cpp b/src/zmq.cpp
index 2c2e3d52..569dbc17 100644
--- a/src/zmq.cpp
+++ b/src/zmq.cpp
@@ -260,6 +260,17 @@ void *zmq_socket (void *ctx_, int type_)
     return static_cast<void *> (s);
 }
 
+void *zmq_new_router_socket (void * ctx_, zmq_router_skt_peer_connect_notification_fn *cnfn_, void *cnfnhint_)
+{
+    if (!ctx_ || !(static_cast<zmq::ctx_t *> (ctx_))->check_tag ()) {
+        errno = EFAULT;
+        return NULL;
+    }
+    zmq::ctx_t *ctx = static_cast<zmq::ctx_t *> (ctx_);
+    zmq::socket_base_t *s = ctx->create_router_socket (cnfn_, cnfnhint_);
+    return static_cast<void *> (s);
+}
+
 int zmq_close (void *s_)
 {
     zmq::socket_base_t *s = as_socket_base_t (s_);
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 08056143..f47dbf60 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,5 +1,5 @@
 # CMake build script for ZeroMQ tests
-cmake_minimum_required(VERSION "2.8.1")
+cmake_minimum_required(VERSION 2.8.1...3.21)
 
 # On Windows: solution file will be called tests.sln
 project(tests)
@@ -234,7 +234,10 @@ endif()
 foreach(test ${tests})
   # target_sources not supported before CMake 3.1
   if(ZMQ_HAVE_CURVE AND ${test} MATCHES test_security_curve)
-    add_executable(${test} ${test}.cpp "../src/tweetnacl.c" "../src/err.cpp" "../src/random.cpp" "../src/clock.cpp")
+    if(NOT SODIUM_FOUND)
+      set(tweetnacl_src "../src/tweetnacl.c")
+    endif()
+    add_executable(${test} ${test}.cpp ${tweetnacl_src} "../src/err.cpp" "../src/random.cpp" "../src/clock.cpp")
   else()
     add_executable(${test} ${test}.cpp)
   endif()
diff --git a/unittests/CMakeLists.txt b/unittests/CMakeLists.txt
index 7132f00b..ae083a41 100644
--- a/unittests/CMakeLists.txt
+++ b/unittests/CMakeLists.txt
@@ -1,5 +1,5 @@
 # CMake build script for ZeroMQ unit tests
-cmake_minimum_required(VERSION "2.8.1")
+cmake_minimum_required(VERSION 2.8.1...3.21)
 
 set(unittests
     unittest_ypipe
