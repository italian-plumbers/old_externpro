diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000..73e240e5
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,14 @@
+cmake_minimum_required(VERSION 3.20)
+project(openh264)
+include(GNUInstallDirs)
+include(flags OPTIONAL)
+if(DEFINED XP_PRO_VER)
+  set(prefix ${CMAKE_INSTALL_PREFIX})
+  set(lib_dir ${CMAKE_INSTALL_LIBDIR})
+  set(inc_dir ${CMAKE_INSTALL_INCLUDEDIR})
+  set(VERSION ${XP_PRO_VER})
+  set(LIBS -lstdc++)
+  configure_file(${CMAKE_PROJECT_NAME}.pc.in ${CMAKE_PROJECT_NAME}.pc @ONLY NEWLINE_STYLE LF)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+add_subdirectory(codec)
diff --git a/codec/CMakeLists.txt b/codec/CMakeLists.txt
new file mode 100644
index 00000000..f1dfcd14
--- /dev/null
+++ b/codec/CMakeLists.txt
@@ -0,0 +1,57 @@
+project(codec)
+if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64")
+  enable_language(ASM_NASM)
+  if(CMAKE_ASM_NASM_COMPILER_LOADED)
+    add_definitions(-DX86_ASM)
+    if(MSVC)
+      add_definitions(-DWIN64)
+    elseif(UNIX)
+      set(asmDef -DUNIX64)
+      # TRICKY: NASM needs trailing slash https://gitlab.kitware.com/cmake/cmake/issues/12919
+      set(asmInc -I${CMAKE_CURRENT_SOURCE_DIR}/common/x86/)
+      # TRICKY: CMAKE_ASM_NASM_COMPILE_OBJECT is defined in CMakeASM_NASMInformation.cmake as
+      # <CMAKE_ASM_NASM_COMPILER> <INCLUDES> <FLAGS> -f ${CMAKE_ASM_NASM_OBJECT_FORMAT} -o <OBJECT> <SOURCE>
+      string(REPLACE "<FLAGS>" "<FLAGS> ${asmDef} ${asmInc}"
+        CMAKE_ASM_NASM_COMPILE_OBJECT ${CMAKE_ASM_NASM_COMPILE_OBJECT}
+        )
+    endif()
+  endif()
+else()
+  message(AUTHOR_WARNING "Unsupported CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
+endif()
+add_subdirectory(common)
+add_subdirectory(decoder)
+add_subdirectory(processing)
+add_subdirectory(encoder)
+add_subdirectory(console)
+####################
+set(lib_name ${CMAKE_PROJECT_NAME})
+set(lib_deps common decoder processing encoder)
+set(lib_srcs
+  api/svc/codec_api.h
+  api/svc/codec_app_def.h
+  api/svc/codec_def.h
+  api/svc/codec_ver.h
+  )
+source_group(api\\svc FILES ${lib_srcs})
+##########
+foreach(lib ${lib_deps})
+  list(APPEND obj_libs $<TARGET_OBJECTS:${lib}_obj>)
+endforeach()
+add_library(${lib_name} STATIC ${lib_srcs} ${obj_libs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+##########
+set(targetsFile ${lib_name}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(FILES ${lib_srcs} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/wels)
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
diff --git a/codec/common/CMakeLists.txt b/codec/common/CMakeLists.txt
new file mode 100644
index 00000000..4df5e77f
--- /dev/null
+++ b/codec/common/CMakeLists.txt
@@ -0,0 +1,103 @@
+set(lib_name common)
+set(obj_name ${lib_name}_obj)
+####################
+set(lib_srcs
+  generate_version.sh
+  targets.mk
+  )
+source_group("" FILES ${lib_srcs})
+####################
+set(arm_srcs
+  arm/arm_arch_common_macro.S
+  arm/copy_mb_neon.S
+  arm/deblocking_neon.S
+  arm/expand_picture_neon.S
+  arm/intra_pred_common_neon.S
+  arm/mc_neon.S
+  )
+source_group(arm FILES ${arm_srcs})
+set(obj_srcs ${arm_srcs})
+####################
+set(arm64_srcs
+  arm64/arm_arch64_common_macro.S
+  arm64/copy_mb_aarch64_neon.S
+  arm64/deblocking_aarch64_neon.S
+  arm64/expand_picture_aarch64_neon.S
+  arm64/intra_pred_common_aarch64_neon.S
+  arm64/mc_aarch64_neon.S
+  )
+source_group(arm64 FILES ${arm64_srcs})
+list(APPEND obj_srcs ${arm64_srcs})
+####################
+set(inc_srcs
+  inc/copy_mb.h
+  inc/cpu_core.h
+  inc/cpu.h
+  inc/crt_util_safe_x.h
+  inc/deblocking_common.h
+  inc/expand_pic.h
+  inc/intra_pred_common.h
+  inc/ls_defines.h
+  inc/macros.h
+  inc/mc.h
+  inc/measure_time.h
+  inc/memory_align.h
+  inc/sad_common.h
+  inc/typedefs.h
+  inc/utils.h
+  inc/version_gen.h.template
+  inc/version.h
+  inc/welsCodecTrace.h
+  inc/wels_common_defs.h
+  inc/wels_const_common.h
+  inc/WelsThreadLib.h
+  )
+source_group(inc FILES ${inc_srcs})
+list(APPEND obj_srcs ${inc_srcs})
+####################
+set(src_srcs
+  src/common_tables.cpp
+  src/copy_mb.cpp
+  src/cpu.cpp
+  src/crt_util_safe_x.cpp
+  src/deblocking_common.cpp
+  src/expand_pic.cpp
+  src/intra_pred_common.cpp
+  src/mc.cpp
+  src/memory_align.cpp
+  src/sad_common.cpp
+  src/utils.cpp
+  src/welsCodecTrace.cpp
+  src/WelsThreadLib.cpp
+  )
+source_group(src FILES ${src_srcs})
+list(APPEND obj_srcs ${src_srcs})
+####################
+set(x86_srcs
+  x86/asm_inc.asm
+  x86/cpuid.asm
+  x86/deblock.asm
+  x86/expand_picture.asm
+  x86/intra_pred_com.asm
+  x86/mb_copy.asm
+  x86/mc_chroma.asm
+  x86/mc_luma.asm
+  x86/satd_sad.asm
+  x86/vaa.asm
+  )
+source_group(x86 FILES ${x86_srcs})
+list(APPEND obj_srcs ${x86_srcs})
+####################
+set(incDirs $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc> ${codec_SOURCE_DIR}/api/svc)
+if(CMAKE_ASM_NASM_COMPILER_LOADED)
+  list(APPEND incDirs $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/x86>)
+endif()
+##########
+add_library(${obj_name} OBJECT ${obj_srcs})
+target_include_directories(${obj_name} PRIVATE ${incDirs})
+##########
+add_library(${lib_name} STATIC ${lib_srcs} $<TARGET_OBJECTS:${obj_name}>)
+target_include_directories(${lib_name} PUBLIC ${incDirs})
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+target_link_libraries(${lib_name} Threads::Threads)
diff --git a/codec/console/CMakeLists.txt b/codec/console/CMakeLists.txt
new file mode 100644
index 00000000..a23d76f3
--- /dev/null
+++ b/codec/console/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_subdirectory(common)
+add_subdirectory(dec)
+add_subdirectory(enc)
diff --git a/codec/console/common/CMakeLists.txt b/codec/console/common/CMakeLists.txt
new file mode 100644
index 00000000..7baf0235
--- /dev/null
+++ b/codec/console/common/CMakeLists.txt
@@ -0,0 +1,11 @@
+set(lib_name console_common)
+####################
+set(lib_srcs
+  targets.mk
+  inc/read_config.h
+  src/read_config.cpp
+  )
+source_group("" FILES ${lib_srcs})
+####################
+add_library(${lib_name} STATIC ${lib_srcs})
+target_include_directories(${lib_name} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>)
diff --git a/codec/console/dec/CMakeLists.txt b/codec/console/dec/CMakeLists.txt
new file mode 100644
index 00000000..35a20682
--- /dev/null
+++ b/codec/console/dec/CMakeLists.txt
@@ -0,0 +1,14 @@
+set(exe_name h264dec)
+set(exe_deps decoder console_common)
+####################
+set(exe_srcs
+  targets.mk
+  inc/d3d9_utils.h
+  src/d3d9_utils.cpp
+  src/h264dec.cpp
+  )
+source_group("" FILES ${exe_srcs})
+####################
+add_executable(${exe_name} ${exe_srcs})
+target_include_directories(${exe_name} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/inc)
+target_link_libraries(${exe_name} ${exe_deps})
diff --git a/codec/console/enc/CMakeLists.txt b/codec/console/enc/CMakeLists.txt
new file mode 100644
index 00000000..66105820
--- /dev/null
+++ b/codec/console/enc/CMakeLists.txt
@@ -0,0 +1,11 @@
+set(exe_name h264enc)
+set(exe_deps encoder console_common)
+####################
+set(exe_srcs
+  targets.mk
+  src/welsenc.cpp
+  )
+source_group("" FILES ${exe_srcs})
+####################
+add_executable(${exe_name} ${exe_srcs})
+target_link_libraries(${exe_name} ${exe_deps})
diff --git a/codec/decoder/CMakeLists.txt b/codec/decoder/CMakeLists.txt
new file mode 100644
index 00000000..4b94c31f
--- /dev/null
+++ b/codec/decoder/CMakeLists.txt
@@ -0,0 +1,119 @@
+set(lib_name decoder)
+set(lib_deps common)
+set(obj_name ${lib_name}_obj)
+####################
+set(lib_srcs
+  targets.mk
+  )
+source_group("" FILES ${lib_srcs})
+####################
+set(core_arm_srcs
+  core/arm/block_add_neon.S
+  core/arm/intra_pred_neon.S
+  )
+source_group(core\\arm FILES ${core_arm_srcs})
+set(obj_srcs ${core_arm_srcs})
+####################
+set(core_arm64_srcs
+  core/arm64/block_add_aarch64_neon.S
+  core/arm64/intra_pred_aarch64_neon.S
+  )
+source_group(core\\arm64 FILES ${core_arm64_srcs})
+list(APPEND obj_srcs ${core_arm64_srcs})
+####################
+set(core_inc_srcs
+  core/inc/as264_common.h
+  core/inc/au_parser.h
+  core/inc/bit_stream.h
+  core/inc/cabac_decoder.h
+  core/inc/deblocking.h
+  core/inc/dec_frame.h
+  core/inc/dec_golomb.h
+  core/inc/decode_mb_aux.h
+  core/inc/decoder_context.h
+  core/inc/decoder_core.h
+  core/inc/decoder.h
+  core/inc/decode_slice.h
+  core/inc/error_code.h
+  core/inc/error_concealment.h
+  core/inc/fmo.h
+  core/inc/get_intra_predictor.h
+  core/inc/manage_dec_ref.h
+  core/inc/mb_cache.h
+  core/inc/memmgr_nal_unit.h
+  core/inc/mv_pred.h
+  core/inc/nal_prefix.h
+  core/inc/nalu.h
+  core/inc/parameter_sets.h
+  core/inc/parse_mb_syn_cabac.h
+  core/inc/parse_mb_syn_cavlc.h
+  core/inc/pic_queue.h
+  core/inc/picture.h
+  core/inc/rec_mb.h
+  core/inc/slice.h
+  core/inc/vlc_decoder.h
+  core/inc/wels_common_basis.h
+  core/inc/wels_const.h
+  )
+source_group(core\\inc FILES ${core_inc_srcs})
+list(APPEND obj_srcs ${core_inc_srcs})
+####################
+set(core_src_srcs
+  core/src/au_parser.cpp
+  core/src/bit_stream.cpp
+  core/src/cabac_decoder.cpp
+  core/src/deblocking.cpp
+  core/src/decode_mb_aux.cpp
+  core/src/decoder_core.cpp
+  core/src/decoder.cpp
+  core/src/decoder_data_tables.cpp
+  core/src/decode_slice.cpp
+  core/src/error_concealment.cpp
+  core/src/fmo.cpp
+  core/src/get_intra_predictor.cpp
+  core/src/manage_dec_ref.cpp
+  core/src/memmgr_nal_unit.cpp
+  core/src/mv_pred.cpp
+  core/src/parse_mb_syn_cabac.cpp
+  core/src/parse_mb_syn_cavlc.cpp
+  core/src/pic_queue.cpp
+  core/src/rec_mb.cpp
+  )
+source_group(core\\src FILES ${core_src_srcs})
+list(APPEND obj_srcs ${core_src_srcs})
+####################
+set(core_x86_srcs
+  core/x86/dct.asm
+  core/x86/intra_pred.asm
+  )
+source_group(core\\x86 FILES ${core_x86_srcs})
+list(APPEND obj_srcs ${core_x86_srcs})
+####################
+set(plus_srcs
+  plus/inc/welsDecoderExt.h
+  plus/src/welsDecoderExt.cpp
+  )
+source_group(plus FILES ${plus_srcs})
+list(APPEND obj_srcs ${plus_srcs})
+####################
+set(plus_srcs
+  plus/res/resource.h
+  plus/res/welsdec.rc
+  )
+source_group(plus FILES ${plus_srcs})
+list(APPEND lib_srcs ${plus_srcs})
+####################
+set(incDirs
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/core/inc>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/plus/inc>
+  )
+##########
+foreach(lib ${lib_deps})
+  list(APPEND depInc $<TARGET_PROPERTY:${lib},INTERFACE_INCLUDE_DIRECTORIES>)
+endforeach()
+add_library(${obj_name} OBJECT ${obj_srcs})
+target_include_directories(${obj_name} PRIVATE ${incDirs} ${depInc})
+##########
+add_library(${lib_name} STATIC ${lib_srcs} $<TARGET_OBJECTS:${obj_name}>)
+target_include_directories(${lib_name} PUBLIC ${incDirs})
+target_link_libraries(${lib_name} ${lib_deps})
diff --git a/codec/decoder/core/src/decode_slice.cpp b/codec/decoder/core/src/decode_slice.cpp
index 01b3b682..989c090d 100644
--- a/codec/decoder/core/src/decode_slice.cpp
+++ b/codec/decoder/core/src/decode_slice.cpp
@@ -1341,7 +1341,7 @@ int32_t WelsDecodeMbCavlcISlice (PWelsDecoderContext pCtx, PNalUnit pNalCur, uin
   if (iUsedBits > (pBs->iBits -
                    1)) { //When BS incomplete, as long as find it, SHOULD stop decoding to avoid mosaic or crash.
     WelsLog (& (pCtx->sLogCtx), WELS_LOG_WARNING,
-             "WelsDecodeMbCavlcISlice()::::pBs incomplete, iUsedBits:%"PRId64" > pBs->iBits:%d, MUST stop decoding.",
+             "WelsDecodeMbCavlcISlice()::::pBs incomplete, iUsedBits:%" PRId64 " > pBs->iBits:%d, MUST stop decoding.",
              (int64_t) iUsedBits, pBs->iBits);
     return -1;
   }
@@ -1710,7 +1710,7 @@ int32_t WelsDecodeMbCavlcPSlice (PWelsDecoderContext pCtx, PNalUnit pNalCur, uin
   if (iUsedBits > (pBs->iBits -
                    1)) { //When BS incomplete, as long as find it, SHOULD stop decoding to avoid mosaic or crash.
     WelsLog (& (pCtx->sLogCtx), WELS_LOG_WARNING,
-             "WelsDecodeMbCavlcISlice()::::pBs incomplete, iUsedBits:%"PRId64" > pBs->iBits:%d, MUST stop decoding.",
+             "WelsDecodeMbCavlcISlice()::::pBs incomplete, iUsedBits:%" PRId64 " > pBs->iBits:%d, MUST stop decoding.",
              (int64_t) iUsedBits, pBs->iBits);
     return -1;
   }
diff --git a/codec/encoder/CMakeLists.txt b/codec/encoder/CMakeLists.txt
new file mode 100644
index 00000000..fb3a9e19
--- /dev/null
+++ b/codec/encoder/CMakeLists.txt
@@ -0,0 +1,159 @@
+set(lib_name encoder)
+set(lib_deps processing)
+set(obj_name ${lib_name}_obj)
+####################
+set(lib_srcs
+  targets.mk
+  )
+source_group("" FILES ${lib_srcs})
+####################
+set(core_arm_srcs
+  core/arm/intra_pred_neon.S
+  core/arm/intra_pred_sad_3_opt_neon.S
+  core/arm/memory_neon.S
+  core/arm/pixel_neon.S
+  core/arm/reconstruct_neon.S
+  core/arm/svc_motion_estimation.S
+  )
+source_group(core\\arm FILES ${core_arm_srcs})
+set(obj_srcs ${core_arm_srcs})
+####################
+set(core_arm64_srcs
+  core/arm64/intra_pred_aarch64_neon.S
+  core/arm64/intra_pred_sad_3_opt_aarch64_neon.S
+  core/arm64/memory_aarch64_neon.S
+  core/arm64/pixel_aarch64_neon.S
+  core/arm64/reconstruct_aarch64_neon.S
+  core/arm64/svc_motion_estimation_aarch64_neon.S
+  )
+source_group(core\\arm64 FILES ${core_arm64_srcs})
+list(APPEND obj_srcs ${core_arm64_srcs})
+####################
+set(core_inc_srcs
+  core/inc/as264_common.h
+  core/inc/au_set.h
+  core/inc/bit_stream.h
+  core/inc/deblocking.h
+  core/inc/decode_mb_aux.h
+  core/inc/dq_map.h
+  core/inc/encode_mb_aux.h
+  core/inc/encoder_context.h
+  core/inc/encoder.h
+  core/inc/extern.h
+  core/inc/get_intra_predictor.h
+  core/inc/mb_cache.h
+  core/inc/md.h
+  core/inc/mt_defs.h
+  core/inc/mv_pred.h
+  core/inc/nal_encap.h
+  core/inc/nal_prefix.h
+  core/inc/parameter_sets.h
+  core/inc/param_svc.h
+  core/inc/picture.h
+  core/inc/picture_handle.h
+  core/inc/property.h
+  core/inc/rc.h
+  core/inc/ref_list_mgr_svc.h
+  core/inc/sample.h
+  core/inc/set_mb_syn_cabac.h
+  core/inc/set_mb_syn_cavlc.h
+  core/inc/slice.h
+  core/inc/slice_multi_threading.h
+  core/inc/stat.h
+  core/inc/svc_base_layer_md.h
+  core/inc/svc_enc_frame.h
+  core/inc/svc_enc_golomb.h
+  core/inc/svc_enc_macroblock.h
+  core/inc/svc_encode_mb.h
+  core/inc/svc_encode_slice.h
+  core/inc/svc_enc_slice_segment.h
+  core/inc/svc_mode_decision.h
+  core/inc/svc_motion_estimate.h
+  core/inc/svc_set_mb_syn_cavlc.h
+  core/inc/svc_set_mb_syn.h
+  core/inc/vlc_encoder.h
+  core/inc/wels_common_basis.h
+  core/inc/wels_const.h
+  core/inc/wels_func_ptr_def.h
+  core/inc/wels_preprocess.h
+  core/inc/wels_transpose_matrix.h
+  )
+source_group(core\\inc FILES ${core_inc_srcs})
+list(APPEND obj_srcs ${core_inc_srcs})
+####################
+set(core_src_srcs
+  core/src/au_set.cpp
+  core/src/deblocking.cpp
+  core/src/decode_mb_aux.cpp
+  core/src/encode_mb_aux.cpp
+  core/src/encoder.cpp
+  core/src/encoder_data_tables.cpp
+  core/src/encoder_ext.cpp
+  core/src/get_intra_predictor.cpp
+  core/src/md.cpp
+  core/src/mv_pred.cpp
+  core/src/nal_encap.cpp
+  core/src/picture_handle.cpp
+  core/src/property.cpp
+  core/src/ratectl.cpp
+  core/src/ref_list_mgr_svc.cpp
+  core/src/sample.cpp
+  core/src/set_mb_syn_cabac.cpp
+  core/src/set_mb_syn_cavlc.cpp
+  core/src/slice_multi_threading.cpp
+  core/src/svc_base_layer_md.cpp
+  core/src/svc_encode_mb.cpp
+  core/src/svc_encode_slice.cpp
+  core/src/svc_enc_slice_segment.cpp
+  core/src/svc_mode_decision.cpp
+  core/src/svc_motion_estimate.cpp
+  core/src/svc_set_mb_syn_cabac.cpp
+  core/src/svc_set_mb_syn_cavlc.cpp
+  core/src/wels_preprocess.cpp
+  )
+source_group(core\\src FILES ${core_src_srcs})
+list(APPEND obj_srcs ${core_src_srcs})
+####################
+set(core_x86_srcs
+  core/x86/coeff.asm
+  core/x86/dct.asm
+  core/x86/intra_pred.asm
+  core/x86/matrix_transpose.asm
+  core/x86/memzero.asm
+  core/x86/quant.asm
+  core/x86/sample_sc.asm
+  core/x86/score.asm
+  )
+source_group(core\\x86 FILES ${core_x86_srcs})
+list(APPEND obj_srcs ${core_x86_srcs})
+####################
+set(plus_srcs
+  plus/inc/welsEncoderExt.h
+  plus/src/welsEncoderExt.cpp
+  )
+source_group(plus FILES ${plus_srcs})
+list(APPEND obj_srcs ${plus_srcs})
+####################
+set(plus_srcs
+  plus/res/resource.h
+  plus/res/welsenc.rc
+  #plus/src/DllEntry.cpp
+  plus/src/wels_enc_export.def
+  )
+source_group(plus FILES ${plus_srcs})
+list(APPEND lib_srcs ${plus_srcs})
+####################
+set(incDirs
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/core/inc>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/plus/inc>
+  )
+##########
+foreach(lib ${lib_deps})
+  list(APPEND depInc $<TARGET_PROPERTY:${lib},INTERFACE_INCLUDE_DIRECTORIES>)
+endforeach()
+add_library(${obj_name} OBJECT ${obj_srcs})
+target_include_directories(${obj_name} PRIVATE ${incDirs} ${depInc})
+##########
+add_library(${lib_name} STATIC ${lib_srcs} $<TARGET_OBJECTS:${obj_name}>)
+target_include_directories(${lib_name} PUBLIC ${incDirs})
+target_link_libraries(${lib_name} ${lib_deps})
diff --git a/codec/encoder/core/src/encoder_ext.cpp b/codec/encoder/core/src/encoder_ext.cpp
index cd30423e..49a829e8 100644
--- a/codec/encoder/core/src/encoder_ext.cpp
+++ b/codec/encoder/core/src/encoder_ext.cpp
@@ -3958,7 +3958,7 @@ int32_t WelsEncoderEncodeExt (sWelsEncCtx* pCtx, SFrameBSInfo* pFbi, const SSour
           t_bs_append = WelsTime() - t_bs_append;
           if (pCtx->pSliceThreading->pFSliceDiff) {
             fprintf (pCtx->pSliceThreading->pFSliceDiff,
-                     "%6"PRId64" us consumed at AppendSliceToFrameBs() for coding_idx: %d iDid: %d qid: %d\n",
+                     "%6" PRId64 " us consumed at AppendSliceToFrameBs() for coding_idx: %d iDid: %d qid: %d\n",
                      t_bs_append, pCtx->iCodingIndex, iCurDid, 0);
           }
 #endif//MT_DEBUG
diff --git a/codec/encoder/core/src/ratectl.cpp b/codec/encoder/core/src/ratectl.cpp
index 03bab723..a3e4bf98 100644
--- a/codec/encoder/core/src/ratectl.cpp
+++ b/codec/encoder/core/src/ratectl.cpp
@@ -694,7 +694,7 @@ void   RcVBufferCalculationSkip (sWelsEncCtx* pEncCtx) {
   pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW] += (pWelsSvcRc->iFrameDqBits - kiOutputMaxBits);
   pWelsSvcRc->iBufferMaxBRFullness[ODD_TIME_WINDOW] += (pWelsSvcRc->iFrameDqBits - kiOutputMaxBits);
 
-  WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG, "[Rc] bits in buffer = %"PRId64", bits in Max bitrate buffer = %"PRId64,
+  WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG, "[Rc] bits in buffer = %" PRId64 ", bits in Max bitrate buffer = %" PRId64,
            pWelsSvcRc->iBufferFullnessSkip, pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW]);
 //condition 2: VGOP bits constraint
   int64_t iVGopBitsPred = 0;
@@ -764,7 +764,7 @@ void WelsRcFrameDelayJudge (sWelsEncCtx* pEncCtx, EVideoFrameType eFrameType, lo
     pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW] -= kiOutputMaxBits;
     pWelsSvcRc->iBufferMaxBRFullness[ODD_TIME_WINDOW] -= kiOutputMaxBits;
     WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-             "[Rc] bits in buffer = %"PRId64", bits in Max bitrate buffer = %"PRId64", Predict skip frames = %d and %d",
+             "[Rc] bits in buffer = %" PRId64 ", bits in Max bitrate buffer = %" PRId64 ", Predict skip frames = %d and %d",
              pWelsSvcRc->iBufferFullnessSkip, pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW], iPredSkipFramesTarBr,
              iPredSkipFramesMaxBr);
     pWelsSvcRc->iBufferFullnessSkip = WELS_MAX (pWelsSvcRc->iBufferFullnessSkip, 0);
@@ -808,7 +808,7 @@ void UpdateBufferWhenFrameSkipped (sWelsEncCtx* pEncCtx, int32_t iSpatialNum) {
     pWelsSvcRc->iBufferFullnessSkip = pWelsSvcRc->iBufferFullnessSkip - kiOutputBits;
     pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW] -= kiOutputMaxBits;
     pWelsSvcRc->iBufferMaxBRFullness[ODD_TIME_WINDOW] -= kiOutputMaxBits;
-    WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG, "[Rc] bits in buffer = %"PRId64", bits in Max bitrate buffer = %"PRId64,
+    WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG, "[Rc] bits in buffer = %" PRId64 ", bits in Max bitrate buffer = %" PRId64,
              pWelsSvcRc->iBufferFullnessSkip, pWelsSvcRc->iBufferMaxBRFullness[EVEN_TIME_WINDOW]);
 
     pWelsSvcRc->iBufferFullnessSkip = WELS_MAX (pWelsSvcRc->iBufferFullnessSkip, 0);
@@ -936,7 +936,7 @@ void RcUpdateIntraComplexity (sWelsEncCtx* pEncCtx) {
   if (pWelsSvcRc->iIdrNum > 255)
     pWelsSvcRc->iIdrNum = 255;
   WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_INFO,
-           "RcUpdateIntraComplexity iFrameDqBits = %d,iQStep= %d,iIntraCmplx = %"PRId64,
+           "RcUpdateIntraComplexity iFrameDqBits = %d,iQStep= %d,iIntraCmplx = %" PRId64,
            pWelsSvcRc->iFrameDqBits, pWelsSvcRc->iQStep, pWelsSvcRc->iIntraComplexity);
 }
 
@@ -963,7 +963,7 @@ void RcUpdateFrameComplexity (sWelsEncCtx* pEncCtx) {
   if (pTOverRc->iPFrameNum > 255)
     pTOverRc->iPFrameNum = 255;
   WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-           "RcUpdateFrameComplexity iFrameDqBits = %d,iQStep= %d,pTOverRc->iLinearCmplx = %"PRId64, pWelsSvcRc->iFrameDqBits,
+           "RcUpdateFrameComplexity iFrameDqBits = %d,iQStep= %d,pTOverRc->iLinearCmplx = %" PRId64, pWelsSvcRc->iFrameDqBits,
            pWelsSvcRc->iQStep, pTOverRc->iLinearCmplx);
 }
 
@@ -1203,7 +1203,7 @@ void WelsRcDropFrameUpdate (sWelsEncCtx* pEncCtx, uint32_t iDropSize) {
 
   pWelsSvcRc->iBufferFullnessSkip -= (int32_t)iDropSize;
   pWelsSvcRc->iBufferFullnessSkip = WELS_MAX (0, pWelsSvcRc->iBufferFullnessSkip);
-  WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_INFO, "[WelsRcDropFrameUpdate:\tdrop:%d\t%"PRId64"\n", iDropSize,
+  WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_INFO, "[WelsRcDropFrameUpdate:\tdrop:%d\t%" PRId64 "\n", iDropSize,
            pWelsSvcRc->iBufferFullnessSkip);
 }
 
@@ -1273,7 +1273,7 @@ void WelsRcFrameDelayJudgeTimeStamp (sWelsEncCtx* pEncCtx, EVideoFrameType eFram
     }
   }
   WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-           "WelsRcFrameDelayJudgeTimeStamp iSkipFrameNum = %d,buffer = %"PRId64",threadhold = %d,bitrate = %d,iSentBits = %d,lasttimestamp = %lld,timestamp=%lld\n",
+           "WelsRcFrameDelayJudgeTimeStamp iSkipFrameNum = %d,buffer = %" PRId64 ",threadhold = %d,bitrate = %d,iSentBits = %d,lasttimestamp = %lld,timestamp=%lld\n",
            pWelsSvcRc->iSkipFrameNum, pWelsSvcRc->iBufferFullnessSkip, pWelsSvcRc->iBufferSizeSkip, iBitRate, iSentBits,
            pWelsSvcRc->uiLastTimeStamp, uiTimeStamp);
 }
@@ -1298,7 +1298,7 @@ void  WelsRcPictureInitGomTimeStamp (sWelsEncCtx* pEncCtx, long long uiTimeStamp
                                 IDR_BITRATE_RATIO));
 
       WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-               "[Rc] First IDR iSpatialBitrate = %d,iBufferFullnessSkip = %"PRId64",iTargetBits= %d,dBpp = %f,initQp = %d",
+               "[Rc] First IDR iSpatialBitrate = %d,iBufferFullnessSkip = %" PRId64 ",iTargetBits= %d,dBpp = %f,initQp = %d",
                pDLayerParam->iSpatialBitrate, pWelsSvcRc->iBufferFullnessSkip, pWelsSvcRc->iTargetBits, dBpp,
                pWelsSvcRc->iInitialQp);
 
@@ -1322,7 +1322,7 @@ void  WelsRcPictureInitGomTimeStamp (sWelsEncCtx* pEncCtx, long long uiTimeStamp
       }
       iLumaQp = WELS_CLIP3 (iLumaQp, MIN_IDR_QP, MAX_IDR_QP);
       WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-               "[Rc]I iLumaQp = %d,iQStep = %d,iTargetBits = %d,iBufferFullnessSkip =%"PRId64",iMaxTh=%d,iMinTh = %d,iFrameComplexity= %"PRId64,
+               "[Rc]I iLumaQp = %d,iQStep = %d,iTargetBits = %d,iBufferFullnessSkip =%" PRId64 ",iMaxTh=%d,iMinTh = %d,iFrameComplexity= %" PRId64,
                iLumaQp, pWelsSvcRc->iQStep, pWelsSvcRc->iTargetBits, pWelsSvcRc->iBufferFullnessSkip, iMaxTh, iMinTh,
                pWelsSvcRc->iIntraComplexity);
 
@@ -1361,7 +1361,7 @@ void  WelsRcPictureInitGomTimeStamp (sWelsEncCtx* pEncCtx, long long uiTimeStamp
     iLumaQp = WELS_CLIP3 (iLumaQp,  GOM_MIN_QP_MODE, GOM_MAX_QP_MODE);
 
     WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_DEBUG,
-             "[Rc]P iTl = %d,iLumaQp = %d,iQStep = %d,iTargetBits = %d,iBufferFullnessSkip =%"PRId64",iMaxTh=%d,iMinTh = %d,iFrameComplexity= %lld,iCmplxRatio=%"PRId64,
+             "[Rc]P iTl = %d,iLumaQp = %d,iQStep = %d,iTargetBits = %d,iBufferFullnessSkip =%" PRId64 ",iMaxTh=%d,iMinTh = %d,iFrameComplexity= %lld,iCmplxRatio=%" PRId64,
              iTl, iLumaQp, pWelsSvcRc->iQStep, pWelsSvcRc->iTargetBits, pWelsSvcRc->iBufferFullnessSkip, iMaxTh, iMinTh,
              pEncCtx->pVaa->sComplexityAnalysisParam.iFrameComplexity, iCmplxRatio);
   }
diff --git a/codec/processing/CMakeLists.txt b/codec/processing/CMakeLists.txt
new file mode 100644
index 00000000..c0d359c8
--- /dev/null
+++ b/codec/processing/CMakeLists.txt
@@ -0,0 +1,144 @@
+set(lib_name processing)
+set(lib_deps common)
+set(obj_name ${lib_name}_obj)
+####################
+set(lib_srcs
+  targets.mk
+  )
+source_group("" FILES ${lib_srcs})
+####################
+set(interface_srcs
+  interface/IWelsVP.h
+  )
+source_group(interface FILES ${interface_srcs})
+set(obj_srcs ${interface_srcs})
+####################
+set(src_adaptivequantization_srcs
+  src/adaptivequantization/AdaptiveQuantization.cpp
+  src/adaptivequantization/AdaptiveQuantization.h
+  )
+source_group(src\\adaptivequantization FILES ${src_adaptivequantization_srcs})
+list(APPEND obj_srcs ${src_adaptivequantization_srcs})
+####################
+set(src_arm_srcs
+  src/arm/adaptive_quantization.S
+  src/arm/down_sample_neon.S
+  src/arm/pixel_sad_neon.S
+  src/arm/vaa_calc_neon.S
+  )
+source_group(src\\arm FILES ${src_arm_srcs})
+list(APPEND obj_srcs ${src_arm_srcs})
+####################
+set(src_arm64_srcs
+  src/arm64/adaptive_quantization_aarch64_neon.S
+  src/arm64/down_sample_aarch64_neon.S
+  src/arm64/pixel_sad_aarch64_neon.S
+  src/arm64/vaa_calc_aarch64_neon.S
+  )
+source_group(src\\arm64 FILES ${src_arm64_srcs})
+list(APPEND obj_srcs ${src_arm64_srcs})
+####################
+set(src_backgrounddetection_srcs
+  src/backgrounddetection/BackgroundDetection.cpp
+  src/backgrounddetection/BackgroundDetection.h
+  )
+source_group(src\\backgrounddetection FILES ${src_backgrounddetection_srcs})
+list(APPEND obj_srcs ${src_backgrounddetection_srcs})
+####################
+set(src_common_srcs
+  src/common/common.h
+  src/common/memory.cpp
+  src/common/memory.h
+  src/common/resource.h
+  src/common/typedef.h
+  src/common/util.h
+  src/common/WelsFrameWork.cpp
+  src/common/WelsFrameWorkEx.cpp
+  src/common/WelsFrameWork.h
+  )
+source_group(src\\common FILES ${src_common_srcs})
+list(APPEND obj_srcs ${src_common_srcs})
+####################
+set(src_common_srcs
+  src/common/WelsVP.def
+  src/common/WelsVP.rc
+  )
+source_group(src\\common FILES ${src_common_srcs})
+list(APPEND lib_srcs ${src_common_srcs})
+####################
+set(src_complexityanalysis_srcs
+  src/complexityanalysis/ComplexityAnalysis.cpp
+  src/complexityanalysis/ComplexityAnalysis.h
+  )
+source_group(src\\complexityanalysis FILES ${src_complexityanalysis_srcs})
+list(APPEND obj_srcs ${src_complexityanalysis_srcs})
+####################
+set(src_denoise_srcs
+  src/denoise/denoise.cpp
+  src/denoise/denoise_filter.cpp
+  src/denoise/denoise.h
+  )
+source_group(src\\denoise FILES ${src_denoise_srcs})
+list(APPEND obj_srcs ${src_denoise_srcs})
+####################
+set(src_downsample_srcs
+  src/downsample/downsample.cpp
+  src/downsample/downsamplefuncs.cpp
+  src/downsample/downsample.h
+  )
+source_group(src\\downsample FILES ${src_downsample_srcs})
+list(APPEND obj_srcs ${src_downsample_srcs})
+####################
+set(src_imagerotate_srcs
+  src/imagerotate/imagerotate.cpp
+  src/imagerotate/imagerotatefuncs.cpp
+  src/imagerotate/imagerotate.h
+  )
+source_group(src\\imagerotate FILES ${src_imagerotate_srcs})
+list(APPEND obj_srcs ${src_imagerotate_srcs})
+####################
+set(src_scenechangedetection_srcs
+  src/scenechangedetection/SceneChangeDetection.cpp
+  src/scenechangedetection/SceneChangeDetection.h
+  )
+source_group(src\\scenechangedetection FILES ${src_scenechangedetection_srcs})
+list(APPEND obj_srcs ${src_scenechangedetection_srcs})
+####################
+set(src_scrolldetection_srcs
+  src/scrolldetection/ScrollDetection.cpp
+  src/scrolldetection/ScrollDetectionFuncs.cpp
+  src/scrolldetection/ScrollDetectionFuncs.h
+  src/scrolldetection/ScrollDetection.h
+  )
+source_group(src\\scrolldetection FILES ${src_scrolldetection_srcs})
+list(APPEND obj_srcs ${src_scrolldetection_srcs})
+####################
+set(src_vaacalc_srcs
+  src/vaacalc/vaacalcfuncs.cpp
+  src/vaacalc/vaacalculation.cpp
+  src/vaacalc/vaacalculation.h
+  )
+source_group(src\\vaacalc FILES ${src_vaacalc_srcs})
+list(APPEND obj_srcs ${src_vaacalc_srcs})
+####################
+set(src_x86_srcs
+  src/x86/denoisefilter.asm
+  src/x86/downsample_bilinear.asm
+  src/x86/vaa.asm
+  )
+source_group(src\\x86 FILES ${src_x86_srcs})
+list(APPEND obj_srcs ${src_x86_srcs})
+####################
+set(incDirs $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/interface>)
+##########
+foreach(lib ${lib_deps})
+  list(APPEND depInc $<TARGET_PROPERTY:${lib},INTERFACE_INCLUDE_DIRECTORIES>)
+endforeach()
+add_library(${obj_name} OBJECT ${obj_srcs})
+target_include_directories(${obj_name} PRIVATE ${incDirs} ${depInc}
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/common
+  )
+##########
+add_library(${lib_name} STATIC ${lib_srcs} $<TARGET_OBJECTS:${obj_name}>)
+target_include_directories(${lib_name} PUBLIC ${incDirs})
+target_link_libraries(${lib_name} ${lib_deps})
diff --git a/openh264.pc.in b/openh264.pc.in
index 7fb5d0c1..2ae60f68 100644
--- a/openh264.pc.in
+++ b/openh264.pc.in
@@ -1,10 +1,10 @@
 prefix=@prefix@
-libdir=${prefix}/lib
-includedir=${prefix}/include
+libdir=${prefix}/@lib_dir@
+includedir=${prefix}/@inc_dir@
 
 Name: OpenH264
 Description: OpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC.
 Version: @VERSION@
-Libs: -L${libdir} -lopenh264 @LIBS@
+Libs: -L${libdir} -lopenh264@SUFFIX@ @LIBS@
 Libs.private: @LIBS_PRIVATE@
 Cflags: -I${includedir}
