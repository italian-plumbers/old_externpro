diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..f532267
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,35 @@
+cmake_minimum_required(VERSION 3.12)
+project(fecpp)
+include(GNUInstallDirs)
+include(flags)
+set(lib_name ${PROJECT_NAME})
+#######################################
+set(${lib_name}_libsrcs
+  fecpp.cpp
+  fecpp.h
+  #fecpp_python.cpp # TODO
+  )
+source_group("" FILES ${${lib_name}_libsrcs})
+#######################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+  )
+add_subdirectory(test)
+#######################################
+set(targetsFile ${PROJECT_NAME}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(FILES fecpp.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
+set(txtFiles format.txt license.txt news.txt readme.txt)
+install(FILES ${txtFiles} DESTINATION ${CMAKE_INSTALL_DOCDIR})
diff --git a/fecpp.cpp b/fecpp.cpp
index e2e5b56..82e21b2 100644
--- a/fecpp.cpp
+++ b/fecpp.cpp
@@ -553,7 +553,7 @@ fec_code::fec_code(size_t K_arg, size_t N_arg) :
 */
 void fec_code::encode(
    const byte input[], size_t size,
-   std::tr1::function<void (size_t, size_t, const byte[], size_t)> output)
+   std::function<void (size_t, size_t, const byte[], size_t)> output)
    const
    {
    if(size % K != 0)
@@ -608,7 +608,7 @@ void fec_code::encode(
 void fec_code::decode(
    const std::map<size_t, const byte*>& shares,
    size_t share_size,
-   std::tr1::function<void (size_t, size_t, const byte[], size_t)> output) const
+   std::function<void (size_t, size_t, const byte[], size_t)> output) const
    {
    /*
    Todo:
diff --git a/fecpp.h b/fecpp.h
index aa68bbe..b9888a4 100644
--- a/fecpp.h
+++ b/fecpp.h
@@ -12,7 +12,7 @@
 
 #include <map>
 #include <vector>
-#include <tr1/functional>
+#include <functional>
 
 namespace fecpp {
 
@@ -43,7 +43,7 @@ class fec_code
       */
       void encode(
          const byte input[], size_t size,
-         std::tr1::function<void (size_t, size_t, const byte[], size_t)> out)
+         std::function<void (size_t, size_t, const byte[], size_t)> out)
          const;
 
       /**
@@ -53,7 +53,7 @@ class fec_code
       */
       void decode(
          const std::map<size_t, const byte*>& shares, size_t share_size,
-         std::tr1::function<void (size_t, size_t, const byte[], size_t)> out)
+         std::function<void (size_t, size_t, const byte[], size_t)> out)
          const;
 
    private:
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
new file mode 100644
index 0000000..5c8d1c4
--- /dev/null
+++ b/test/CMakeLists.txt
@@ -0,0 +1,14 @@
+xpFindPkg(PKGS boost)
+set(${PROJECT_NAME}_exes
+  benchmark
+  gen_test_vec
+  #test_fec # TODO: fix compile errors
+  test_recovery
+  zfec
+  )
+set(test_recovery_deps Boost::boost)
+foreach(exe ${${PROJECT_NAME}_exes})
+  source_group("" FILES ${exe}.cpp)
+  add_executable(${exe} ${exe}.cpp)
+  target_link_libraries(${exe} PRIVATE ${lib_name} ${${exe}_deps})
+endforeach()
diff --git a/test/benchmark.cpp b/test/benchmark.cpp
index b690cef..462658a 100644
--- a/test/benchmark.cpp
+++ b/test/benchmark.cpp
@@ -59,7 +59,7 @@ void benchmark_fec(size_t k, size_t n)
 
    save_to_map saver(share_len, shares);
 
-   fec.encode(&input[0], input.size(), std::tr1::ref(saver));
+   fec.encode(&input[0], input.size(), std::ref(saver));
 
    while(shares.size() > k)
       shares.erase(shares.begin());
diff --git a/test/test_fec.cpp b/test/test_fec.cpp
index ae76d6e..31fec19 100644
--- a/test/test_fec.cpp
+++ b/test/test_fec.cpp
@@ -9,6 +9,8 @@
 #include <string.h>
 #include "fecpp.h"
 
+using fecpp::byte;
+
 /*
  * compatibility stuff
  */
@@ -77,7 +79,7 @@ my_malloc(int sz, const char *s)
  */
 
 int
-test_decode(fec_code& code, size_t k, size_t index[], size_t sz,
+test_decode(fecpp::fec_code& code, size_t k, size_t index[], size_t sz,
             const char *s)
 {
     int errors;
@@ -88,12 +90,12 @@ test_decode(fec_code& code, size_t k, size_t index[], size_t sz,
     static byte **d_original = NULL, **d_src = NULL ;
 
     if (sz < 1 || sz > 8192) {
-	fprintf(stderr, "test_decode: size %d invalid, must be 1..8K\n",
+	fprintf(stderr, "test_decode: size %zd invalid, must be 1..8K\n",
 		sz);
 	return 1 ;
     }
     if (k < 1 || k > 255 + 1) {
-	fprintf(stderr, "test_decode: k %d invalid, must be 1..%d\n",
+	fprintf(stderr, "test_decode: k %zd invalid, must be 1..%d\n",
 		k, 255 + 1 );
 	return 2 ;
     }
@@ -148,11 +150,11 @@ test_decode(fec_code& code, size_t k, size_t index[], size_t sz,
 	    fprintf(stderr, "error reconstructing block %d\n", i);
 	}
     if (errors)
-	fprintf(stderr, "Errors reconstructing %d blocks out of %d\n",
+	fprintf(stderr, "Errors reconstructing %d blocks out of %zd\n",
 	    errors, k);
 
     fprintf(stderr,
-	"  k %3d, l %3d  c_enc %10.6f MB/s c_dec %10.6f MB/s     \r",
+	"  k %3zd, l %3d  c_enc %10.6f MB/s c_dec %10.6f MB/s     \r",
 	k, reconstruct,
 	(double)(k * sz * reconstruct)/(double)ticks[2],
 	(double)(k * sz * reconstruct)/(double)ticks[1]);
@@ -206,7 +208,7 @@ main(int argc, char *argv[])
 
     for ( kk = KK ; kk > 2 ; kk-- )
        {
-       fec_code code(kk, lim);
+       fecpp::fec_code code(kk, lim);
        ixs = (size_t*)my_malloc(kk * sizeof(size_t), "ixs" );
 
        for (i=0; i<kk; i++) ixs[i] = kk - i ;
diff --git a/test/test_recovery.cpp b/test/test_recovery.cpp
index bdce3e2..2f2bc28 100644
--- a/test/test_recovery.cpp
+++ b/test/test_recovery.cpp
@@ -147,7 +147,7 @@ bool check_recovery(byte k, byte n, const std::string& hex_input,
       packets_map.erase(chooser.choose());
 
    // assumes all same size
-   code.decode(packets_map, packets[0].size(), std::tr1::ref(check_output));
+   code.decode(packets_map, packets[0].size(), std::ref(check_output));
 
    check_output.confirm();
 
diff --git a/test/zfec.cpp b/test/zfec.cpp
index 3e4b52b..a886237 100644
--- a/test/zfec.cpp
+++ b/test/zfec.cpp
@@ -125,13 +125,13 @@ void zfec_encode(size_t k, size_t n,
       size_t got = in.gcount();
 
       if(got == buf.size())
-         fec.encode(&buf[0], buf.size(), std::tr1::ref(file_writer));
+         fec.encode(&buf[0], buf.size(), std::ref(file_writer));
       else
          {
          // Handle final block by padding up to k bytes with 0s
          for(size_t i = 0; i != pad_bytes; ++i)
             buf[i+got] = 0;
-         fec.encode(&buf[0], got + pad_bytes, std::tr1::ref(file_writer));
+         fec.encode(&buf[0], got + pad_bytes, std::ref(file_writer));
          }
       }
    }
