diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3dccec310..8d1213416 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -32,6 +32,14 @@ INCLUDE(GNUInstallDirs)
 INCLUDE(IdeSplitSources)
 INCLUDE(FeatureSummary)
 INCLUDE(EnableWarnings)
+include(flags OPTIONAL)
+if(DEFINED XP_NAMESPACE)
+  set(XP_OPT_INSTALL EXCLUDE_FROM_ALL)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
 
 # Build options
 #
@@ -79,6 +87,10 @@ IF(MSVC)
 	# are linking statically
 	OPTION(STATIC_CRT		"Link the static CRT libraries"		 		 ON)
 
+	# Some MSVC flags are not compatible with what's been set externally
+	OPTION(XP_SKIP_MSVC_FLAGS	"Skip MSVC flags set here"				OFF)
+	MARK_AS_ADVANCED(XP_SKIP_MSVC_FLAGS)
+
 	# If you want to embed a copy of libssh2 into libgit2, pass a
 	# path to libssh2
 	OPTION(EMBED_SSH_PATH		"Path to libssh2 to embed (Windows)"			OFF)
@@ -102,6 +114,8 @@ ENDIF()
 
 # Platform specific compilation flags
 IF (MSVC)
+	IF (NOT XP_SKIP_MSVC_FLAGS)
+
 	IF (STDCALL)
 		MESSAGE(FATAL_ERROR "The STDCALL option is no longer supported; libgit2 is now always built as a cdecl library.  If you're using PInvoke, please add the CallingConventions.Cdecl attribute for support.")
 	ENDIF()
@@ -191,6 +205,8 @@ IF (MSVC)
 	SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
 	SET(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
 	SET(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}")
+
+	ENDIF() # XP_SKIP_MSVC_FLAGS
 ELSE ()
 	IF (ENABLE_REPRODUCIBLE_BUILDS)
 		SET(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> Dqc <TARGET> <LINK_FLAGS> <OBJECTS>")
diff --git a/cmake/PkgBuildConfig.cmake b/cmake/PkgBuildConfig.cmake
index 54c5e294c..3ff153f26 100644
--- a/cmake/PkgBuildConfig.cmake
+++ b/cmake/PkgBuildConfig.cmake
@@ -73,5 +73,5 @@ function(pkg_build_config)
     file(APPEND "${PKGCONFIG_FILE}" "Cflags: -I\${includedir} ${PKGCONFIG_CFLAGS}\n")
 
     # Install .pc file
-    install(FILES "${PKGCONFIG_FILE}" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
+    install(FILES "${PKGCONFIG_FILE}" ${XP_OPT_INSTALL} DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 endfunction()
diff --git a/cmake/SelectHTTPSBackend.cmake b/cmake/SelectHTTPSBackend.cmake
index 4998f0f2a..7bc8f8b9d 100644
--- a/cmake/SelectHTTPSBackend.cmake
+++ b/cmake/SelectHTTPSBackend.cmake
@@ -1,7 +1,12 @@
 INCLUDE(SanitizeBool)
 
 # We try to find any packages our backends might use
-FIND_PACKAGE(OpenSSL)
+if(COMMAND xpFindPkg)
+  xpFindPkg(PKGS openssl)
+  get_target_property(OPENSSL_INCLUDE_DIR xpro::crypto INTERFACE_INCLUDE_DIRECTORIES)
+else()
+  FIND_PACKAGE(OpenSSL)
+endif()
 FIND_PACKAGE(mbedTLS)
 IF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
 	FIND_PACKAGE(Security)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index fdb367335..e3eecf3b0 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -203,7 +203,12 @@ IF(USE_BUNDLED_ZLIB STREQUAL ON)
 ENDIF()
 
 IF(USE_BUNDLED_ZLIB STREQUAL "OFF")
-	FIND_PACKAGE(ZLIB)
+	if(COMMAND xpFindPkg)
+	  xpFindPkg(PKGS zlib)
+	  get_target_property(ZLIB_INCLUDE_DIRS ${ZLIB_LIBRARIES} INTERFACE_INCLUDE_DIRECTORIES)
+	else()
+	  FIND_PACKAGE(ZLIB)
+	endif()
 	IF(ZLIB_FOUND)
 		LIST(APPEND LIBGIT2_SYSTEM_INCLUDES ${ZLIB_INCLUDE_DIRS})
 		LIST(APPEND LIBGIT2_LIBS ${ZLIB_LIBRARIES})
@@ -231,7 +236,12 @@ ENDIF()
 
 # Optional external dependency: libssh2
 IF (USE_SSH)
-	FIND_PKGLIBRARIES(LIBSSH2 libssh2)
+	if(COMMAND xpFindPkg)
+	  xpFindPkg(PKGS libssh2)
+	  get_target_property(LIBSSH2_INCLUDE_DIRS ${LIBSSH2_LIBRARIES} INTERFACE_INCLUDE_DIRECTORIES)
+	else()
+	  FIND_PKGLIBRARIES(LIBSSH2 libssh2)
+	endif()
 	IF (NOT LIBSSH2_FOUND)
 		FIND_PACKAGE(LibSSH2)
 		SET(LIBSSH2_INCLUDE_DIRS ${LIBSSH2_INCLUDE_DIR})
@@ -384,6 +394,7 @@ ENDIF()
 # Compile and link libgit2
 ADD_LIBRARY(git2 ${WIN_RC} ${LIBGIT2_OBJECTS})
 TARGET_LINK_LIBRARIES(git2 ${LIBGIT2_LIBS})
+target_include_directories(git2 PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 SET_TARGET_PROPERTIES(git2 PROPERTIES C_STANDARD 90)
 SET_TARGET_PROPERTIES(git2 PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${libgit2_BINARY_DIR})
@@ -424,10 +435,12 @@ IF (MSVC_IDE)
 ENDIF ()
 
 # Install
-INSTALL(TARGETS git2
+set(LIBGIT2_TARGETS_FILE ${PROJECT_NAME}-targets)
+INSTALL(TARGETS git2 EXPORT ${LIBGIT2_TARGETS_FILE}
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
 	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
 	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
 )
 INSTALL(DIRECTORY ${libgit2_SOURCE_DIR}/include/git2 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
 INSTALL(FILES ${libgit2_SOURCE_DIR}/include/git2.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(EXPORT ${LIBGIT2_TARGETS_FILE} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
