# - Find an @CMAKE_PROJECT_NAME@ installation.
# @CMAKE_PROJECT_NAME@_DIR
################################################################################
# should match xpGetCompilerPrefix in externpro's xpfunmac.cmake
# NOTE: wanted to use externpro version, but chicken-egg problem
function(getCompilerPrefix _ret)
  set(options GCC_TWO_VER)
  cmake_parse_arguments(X "${options}" "" "" ${ARGN})
  if(MSVC)
    set(prefix vc${MSVC_TOOLSET_VERSION})
  elseif(CMAKE_COMPILER_IS_GNUCXX)
    exec_program(${CMAKE_CXX_COMPILER}
      ARGS ${CMAKE_CXX_COMPILER_ARG1} -dumpfullversion -dumpversion
      OUTPUT_VARIABLE GCC_VERSION
      )
    if(X_GCC_TWO_VER)
      set(digits "\\1\\2")
    else()
      set(digits "\\1\\2\\3")
    endif()
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)?"
      "gcc${digits}"
      prefix ${GCC_VERSION}
      )
  elseif(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang") # LLVM/Apple Clang (clang.llvm.org)
    if(${CMAKE_SYSTEM_NAME} STREQUAL Darwin)
      exec_program(${CMAKE_CXX_COMPILER}
        ARGS ${CMAKE_CXX_COMPILER_ARG1} -dumpversion
        OUTPUT_VARIABLE CLANG_VERSION
        )
      string(REGEX REPLACE "([0-9]+)\\.([0-9]+)(\\.[0-9]+)?"
        "clang-darwin\\1\\2" # match boost naming
        prefix ${CLANG_VERSION}
        )
    else()
      string(REGEX REPLACE "([0-9]+)\\.([0-9]+)(\\.[0-9]+)?"
        "clang\\1\\2" # match boost naming
        prefix ${CMAKE_CXX_COMPILER_VERSION}
        )
    endif()
  else()
    message(SEND_ERROR "Find@CMAKE_PROJECT_NAME@.cmake: compiler support lacking: ${CMAKE_CXX_COMPILER_ID}")
  endif()
  set(${_ret} ${prefix} PARENT_SCOPE)
endfunction()
function(getNumBits _ret)
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(numBits 64)
  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(numBits 32)
  else()
    message(FATAL_ERROR "numBits not 64 or 32")
  endif()
  set(${_ret} ${numBits} PARENT_SCOPE)
endfunction()
################################################################################
# TRICKY: clear cached variables each time we cmake so we can change
# @CMAKE_PROJECT_NAME@_REV and reuse the same build directory
unset(@CMAKE_PROJECT_NAME@_DIR CACHE)
################################################################################
# find the path to the @CMAKE_PROJECT_NAME@ directory
getCompilerPrefix(COMPILER)
getNumBits(BITS)
# projects using @CMAKE_PROJECT_NAME@: set(@CMAKE_PROJECT_NAME@_REV `git describe --tags`)
set(@CMAKE_PROJECT_NAME@_SIG ${@CMAKE_PROJECT_NAME@_REV}-${COMPILER}-${BITS})
# TRICKY: match what is done in cmake's Modules/CPack.cmake, setting CPACK_SYSTEM_NAME
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(XP_SYSTEM_NAME win${BITS})
else()
  set(XP_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
endif()
set(XP_DEV_BUILD_NAME "@CMAKE_PROJECT_NAME@_${@CMAKE_PROJECT_NAME@_SIG}")
set(XP_INSTALLED_NAME "@CMAKE_PROJECT_NAME@-${@CMAKE_PROJECT_NAME@_SIG}-${XP_SYSTEM_NAME}")
# NOTE: environment variable setting examples:
# set(ENV{@CMAKE_PROJECT_NAME@_BUILD_DIR} ~/src/@CMAKE_PROJECT_NAME@/_bld)
# set(ENV{extern_DIR} ~/extern)
find_path(@CMAKE_PROJECT_NAME@_DIR
  NAMES
    @CMAKE_PROJECT_NAME@_${@CMAKE_PROJECT_NAME@_SIG}.txt
  PATHS
    # developer/build versions
    "$ENV{@CMAKE_PROJECT_NAME@_BUILD_DIR}/${XP_DEV_BUILD_NAME}"
    # installed versions
    "$ENV{extern_DIR}/${XP_INSTALLED_NAME}"
    "~/extern/${XP_INSTALLED_NAME}"
    "/opt/extern/${XP_INSTALLED_NAME}"
    "C:/opt/extern/${XP_INSTALLED_NAME}"
    "C:/dev/extern/${XP_INSTALLED_NAME}"
  DOC "@CMAKE_PROJECT_NAME@ directory"
  )
if(NOT @CMAKE_PROJECT_NAME@_DIR)
  if(EXISTS $ENV{extern_DIR})
    set(archive_name "${XP_INSTALLED_NAME}.tar.xz")
    message(STATUS "${XP_INSTALLED_NAME} not found.\nAttempting download of ${archive_name} ...")
    file(DOWNLOAD @XP_DOWNLOAD_URL@/${@CMAKE_PROJECT_NAME@_REV}/${archive_name}
      $ENV{extern_DIR}/${archive_name}
      )
    message(STATUS "Attempting extraction of ${archive_name} ...")
    file(ARCHIVE_EXTRACT
      INPUT $ENV{extern_DIR}/${archive_name}
      DESTINATION $ENV{extern_DIR}
      )
    message(STATUS "Attempting to remove ${archive_name}")
    file(REMOVE $ENV{extern_DIR}/${archive_name})
    if(EXISTS $ENV{extern_DIR}/${XP_INSTALLED_NAME})
      set(@CMAKE_PROJECT_NAME@_DIR $ENV{extern_DIR}/${XP_INSTALLED_NAME})
    endif()
  endif()
endif()
if(NOT @CMAKE_PROJECT_NAME@_DIR)
  set(@CMAKE_PROJECT_NAME@_INSTALL_INFO @XP_INSTALL_INFO@) # @CMAKE_PROJECT_NAME@ can set(XP_INSTALL_INFO) to define this
  if(DEFINED @CMAKE_PROJECT_NAME@_INSTALLER_LOCATION) # defined by project using @CMAKE_PROJECT_NAME@
    message(FATAL_ERROR "@CMAKE_PROJECT_NAME@ ${@CMAKE_PROJECT_NAME@_SIG} not found.\n${@CMAKE_PROJECT_NAME@_INSTALLER_LOCATION}")
  else()
    message(FATAL_ERROR "@CMAKE_PROJECT_NAME@ ${@CMAKE_PROJECT_NAME@_SIG} not found${@CMAKE_PROJECT_NAME@_INSTALL_INFO}")
  endif()
else()
  message(STATUS "Found @CMAKE_PROJECT_NAME@: ${@CMAKE_PROJECT_NAME@_DIR}")
  set(moduleDir ${@CMAKE_PROJECT_NAME@_DIR}/share/cmake)
  list(APPEND XP_MODULE_PATH ${moduleDir})
  set(FPHSA_NAME_MISMATCHED TRUE) # find_package_handle_standard_args NAME_MISMATCHED (prefix usexp-)
  link_directories(${@CMAKE_PROJECT_NAME@_DIR}/lib)
  if(EXISTS ${moduleDir}/xpfunmac.cmake)
    include(${moduleDir}/xpfunmac.cmake)
  endif()
  if(COMMAND xpCheckInstall)
    xpCheckInstall(@CMAKE_PROJECT_NAME@)
  endif()
endif()
